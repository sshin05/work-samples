/**
*  @fileOverview This is the main javascript file for the Golf.com Leaderboad
*  page. It contains classes for the Leaderbard, Customized Leaderbard, Players 
*  and Scorecards.  It also has a number of utility and helper objects for 
*  sorting, generating ajax request urls and querying the window location 
*  property.  It is fully documented using the jsdoc-toolkit, more of which
*  can be found here: http://www.jsdoctoolkit.org/ and here: 
*  http://www.jsdoctoolkit.org/wiki/index.php?page=Home - It does not document 
*  any of the objects within the Prototype and Scriptaculous APIs.  Those API 
*  docs can be found here: http://www.prototypejs.org/api and here: 
*  http://wiki.script.aculo.us/scriptaculous/tags/effects - Enjoy!
*/

/**
*  Global server object
*  @type Server
*  @default null
*/
var server = null;

/**
*  Global leaderboard object
*  @type Leaderboard
*  @default null
*/
var leaderboard = null;

/**
*  Global customizedLeaderboard object
*  @type CustomizedLeaderboard
*  @default null
*/
var customizedLeaderboard = null;

/**
*  _Tourn object for period updates
*  @type _Tourn
*  @default null
*/
var newTourn = null;

/**
*  Flag that tells us if the periodic updater found new data
*  @type Boolean
*  @default false
*/
var isNewTourn = false;

/**
*  Flag telling us to suppress the leaderboard title.  Used during the 
*  Master's tournament.  Declared in the template.
*  @name suppressLbTitle
*  @type {Boolean}
*  @default false
*/

/**
*  This is the primary json object - it contains all the information for a
*  tournament.
*  @name _Tourn
*  @namespace
*  @extends TournUtil
*/
var Tourn = null;

/**
Omniture function that is called whenever a leaderboard link, on that is
dynamically generated by the JS of this file, is clicked.
*/

var OmniClick = function(){
	s_time.channel = 'golf';
	s_time.pageName = 'golf|tours-news|leaderboard-scorecard';
	s_time.prop11 = 'leaderboard';
	s_time.prop16 = 'tours-news';
	s_time.prop17 = location.href;
	void(s_time.t());
}

/**
*  Initializes the server object and creates the leaderboard and customized 
*  leaderboard. This is also where the timeout is set for the periodic realtime
*  update checking.
*  @event
*  @see #getTournJson
*  @see #loadNewData
*  @see Server
*  @see CustomizedLeaderboard
*  @see Leaderboard
*  @see Server#getOnloadUrl
*  @see Server#setTournFolder
*/
var createLeaderboard = function() {
  server = new Server();
  new Ajax.Request(server.getOnloadUrl(), {
    method: 'get',
    onSuccess: function(transport){
      Tourn = getTournJson(transport.responseText);
      server.setTournFolder();
      customizedLeaderboard = new CustomizedLeaderboard();
      leaderboard = new Leaderboard(false);
      setTimeout(function(){loadNewData();}, 30000);
    }
  });
};

/**
*  This periodic updater is run every 45 seconds checking for new tournament 
*  data.  New data is determined by the Tourn.CurTime property.
*  @see #getTournJson
*  @see #loadNewData
*  @see CustomizedLeaderboard
*  @see Leaderboard
*  @see Server#getOnloadUrl
*  @see Tourn#getRevisionDate
*  @see Server#setTournFolder
*/
var loadNewData = function() {
  new Ajax.Request(server.getOnloadUrl() + "?rand=" + Math.floor(Math.random()*1000000000), {
    method: 'get',
    onSuccess: function(transport){
      newTourn = getTournJson(transport.responseText);
	  //document.getElementById("ad1").innerHTML = newTourn.getRevisionDate() + " || " + Tourn.getRevisionDate() + " || " + eval(newTourn.getRevisionDate() > Tourn.getRevisionDate())
	  if(newTourn.getRevisionDate() > Tourn.getRevisionDate()) {
        Tourn = newTourn;
        newTourn = null;
        isNewTourn = true;
        server.setTournFolder();
        customizedLeaderboard = new CustomizedLeaderboard();
        leaderboard = new Leaderboard(true);
      }
	  iframeAdFactory.refresh ();
    }
  });
  setTimeout(function(){loadNewData(); },45000);
};

/**
*  Process the ajax response text and creates the primary json object for the 
*  tournament leaderboard.  Extends {@link TournUtil}.
*  @param {String} [Tourn] responseText The Ajax response text
*  @return {Tourn} The primary Tourn JSON
*  @see Tourn
*  @see TournUtil
*/
var getTournJson = function(responseText) {
  var baseTourn = eval('(' + responseText + ')').Tourn;
  return Object.extend(baseTourn, TournUtil);
};
/**
*  A number of helper functions to augment the Tourn object
*  @namespace
*/
var TournUtil = {
  /**
  *  Gets a round object that represents the current round
  *  @param {Array} rounds An array of round objects
  *  @return {_Round} A round object representing the current round, returns 
  *  the input array if current round is not found
  *  @see _Round
  */
  getCurrentRound: function(rounds) {
    if(!rounds) {return null;}
    if (rounds.length) {
      for (var i = 0; i < rounds.length; i++) {
        if (rounds[i].Num == this.CurRnd) { return rounds[i]; }
      }
    }
    else { return rounds; }
  },
  /**
  *  Parses the tournament start date and returns the 4 digit year
  *  @return {String} The 4 digit year
  */
  getDate: function() {
    return this.TournStartDate.match(/.{4}$/);
  },
  /**
  *  Concatenates the tournament location, city and state
  *  @return {String} tournament location, contatenates the location name, 
  *  city and state
  */
  getLocation: function() {
    return this.Loc + ', ' + this.localCity + ', ' + this.LocState;
  },
  /**
  *  Gets a player object with a matching player id
  *  @param {String} pid The player id
  *  @return {_Player} returns a {@link _Player} object with a matching 
  *  player id
  *  @see _Player
  */
  getPlayer: function(pid) {
    var players = this.Players.Player;
    for(var i = 0, len = players.length; i < len; ++i) {
      if(players[i].PID == pid) { return players[i]; }
    }
  },
  /**
  *  Gets a date object defining the current data feed timestamp
  *  @return {Date} a date object representing the current data feed timestamp
  */
  getRevisionDate: function() {
    var currentTimeString = this.CurTime;
    var dayString = currentTimeString.match(/\. (.{10})$/)[1];
    var timeString = currentTimeString.match(/^(.{11})/)[1];
   	//document.getElementById("ad1").innerHTML =  dayString + " || " + timeString + " || " + new Date(dayString + ' ' + timeString);
    return new Date(dayString + ' ' + timeString);
  },
  /**
  *  Determines if the tournament is a "Masters" tournament
  *  @return {Boolean} if the tournament is a "Masters" tournament
  */
  isMajor: function() {
    //return (window.suppressLbTitle || server.isMajor) ? true : false;
	//100 == British Open; 033 == PGA Championship; 014 == The Masters; 260 == U.S. Open
    return (Tourn.TournId === '014' || Tourn.TournId === '260' || Tourn.TournId === "100" || Tourn.TournId === "033") ? true : false;
  }
};

var Server = Class.create(
  /**
  *  @name Server
  *  @class Responsible for generating urls for ajax requests
  *  @lends Server.prototype
  */
  {
  /** @ignore */
  initialize: function() {
    /** Used to parse the url get parameters */
    this.pageQuery         = new PageQuery(window.location.search);
    /** The name of the static resource directory */
    this.staticFolder      = this.getStaticFolder();
    /** A single character code representing the tournament type */
    this.tourCode          = this.getTourCode();
    /** The name of the tournament directory */
    this.tournFolder       = this.queryString('folder');
    /** The name of the ajax directory */
    this.resourceDirectory = this.getResourceDirectory();
    /* Temporary property used for developing for the Master's Tournament */
    //this.isMajor         = this.queryString('isMajor');
    /** The url used for the ajax request when the page is loaded */
    this.onloadUrl         = this.getOnloadUrl();
  },
  /**
  *  Tells us if debugads is being included in the url - for ad testing
  *  @return {String} "debugads" if found, null otherwise
  */
  getDebugAds: function() {
    return this.queryString('debugads');
  },
  /**
  *  Gets the url to use for the ajax request on page load
  *  @return {String} the url to use for the ajax request on page load
  */
  getOnloadUrl: function() {
    if (this.resourceDirectory == 'json') {
      return this.staticFolder    + 
             '/json/leaderboard/' + 
             //this.tournFolder     + 
			 'current_r' + 
             '/ModifiedLeaderboard.json'; 
    }
	else if (this.tournFolder) {
      return this.staticFolder    + 
             '/xml/leaderboard/' + 
             this.tournFolder     + 
             '/ModifiedLeaderboard.json'; 
	 // return '/golf/test/ModifiedLeaderboard.json';
    }
    else {
      return this.staticFolder           + 
             '/xml/leaderboard/current_' + 
             this.tourCode               + 
             '/ModifiedLeaderboard.json'; 
	//  return '/golf/test/ModifiedLeaderboard.json';
    }
  },
  /**
  *  Gets the url to use for the ajax request for the player detail 
  *  information - run when clicking on a player name
  *  @param {String} pid The 3 character player id
  *  @return {String} The url to use for player detail information
  */
  getPlayerDetailUrl: function(pid) {
    return this.staticFolder      + '/'             + 
           this.resourceDirectory + '/leaderboard/' + 
           this.tournFolder       + '/scorecard_'   + 
           pid                    + '.json';
  },
  /**
  *  Gets the url to use for the ajax request for the player stats 
  *  information - run when clicking on a player name
  *  @param {String} pid The 3 character player id
  *  @return {String} The url to use for player detail information
  */
  getPlayerStatsUrl: function(pid) {
    return this.staticFolder      + '/'             + 
           this.resourceDirectory + '/leaderboard/' + 
		   this.tournFolder       + '/scorecard_'   + 
           //this.tournFolder       + '/tourn_stats_' + 
           pid +'.json';
  },
  /**
  *  Gets the name of the ajax resource directory
  *  @return {String} the name of the ajax resource directory
  */
  getResourceDirectory: function() { 
    return 'json';
     /*uncomment when all json is moved to the json directory
    return (this.tournFolder) ? 'json' : 'xml';*/
  },
  /** 
  *  Gets the url path to the static resource directory
  *  @return {String} The url path to the static resource directory
  */
  getStaticFolder: function() { 
    return 'http://' + window.location.host + '/golf/static';
  },
  /**
  *  Gets the tournament code
  *  @return {string} the single character tournament code (type)
  */
  getTourCode: function() {
    var tourCodeQuery = this.queryString('TID');
    return (tourCodeQuery) ? tourCodeQuery : 'r';
  },
  /**
  *  Gets the value for this key based on the query string parameters
  *  @param {String} key Used for the value lookup
  *  @return {String} Returns the value for this key - returns null if the key 
  *  is not found
  */
  queryString: function(key) {
    var keyValue = this.pageQuery.getValue(key);
    return (keyValue) ? unescape(keyValue) : null;
  },
  /** 
  *  Determines and sets the tournament directory on the file system - 
  *  concatenates tour code, year and tourn id
  */
  setTournFolder: function() {
    /**
    *  The directory for this tournament - a concatenation of the tourCode, 
    *  year and tournament id
    */
    this.tournFolder = this.tourCode + Tourn.getDate() + Tourn.TournId;
    // if(this.isMajor) {this.tournFolder = this.tourCode + Tourn.getDate() + Tourn.TournId + '_mt/r2008014';}
  }
});

var setLeaderBoardPageTitle = function(tourn) {
	/** Dynamically change the title tag when LB loads **/
	document.title = tourn + " Leaderboard | Tours &amp; News | Golf.com";
};

var PageQuery = Class.create(
  /**
  *  @name PageQuery
  *  @class Responsible for parsing the url query parameters
  *  @lends PageQuery.prototype
  */
  {
  /** @ignore */
  initialize:function(queryParam) {
    /** The key value used for querying the url get parameters */
    this.query         = this.getQuery(queryParam);
    /** An array of keys and values represented in the url get parameters */
    this.keyValuePairs = this.getKeyValuePairs();
  },
  /**
  *  Parses the current browser url and gets an array of key value pairs 
  *  representing the url get parameters
  *  @return {Array} An array of key value pairs representing the url get 
  *  parameters
  */
  getKeyValuePairs: function() {
    var keyValuePairs = [];
    if (this.query) {
      var querySplit = this.query.split('&');
      for (var i = 0; i < querySplit.length; i++) {
        keyValuePairs[i] = querySplit[i];
      }
    }
    return keyValuePairs;
  },
  /**
  *  Gets the window.location.search property, but without the ?
  *  @param {String} queryParam The window.location.search property
  *  @return {String} returns queryParam without the ?.  Returns null if there 
  *  are no get parameters
  */
  getQuery: function(queryParam) {
    if (queryParam.length > 1) {
      return queryParam.substring(1, queryParam.length);
    }
    else {
      return null;
    }
  },
  /**
  *  Gets the value for the passed parameter based on the url query string
  *  @param {string} key The parameter/key needed to retrieve the value
  *  @return {string} The value for the given key
  */
  getValue: function(s) {
    for(var j=0; j < this.keyValuePairs.length; j++) {
    var keyValueSplit = this.keyValuePairs[j].split('=');
      if (keyValueSplit[0] == s) {
      if(s == 'debugads') { return true; }
        return keyValueSplit[1]; 
      }
    }
    return null;
  }
});

var Leaderboard = Class.create(
  /**
  *  @name Leaderboard
  *  @class Responsible for creating the Leaderboard
  *  @lends Leaderboard.prototype
  *  @param {Boolean} isNewTourn Flag notification if real time update
  */
  {
  /** @ignore */
  initialize: function(isNewTourn) {
    /** Flag notifying if this is a real time tournament update */
    this.isNewTourn = isNewTourn;
    /** A list of _Player objects showing on the Leaderboard */
    this.players = this.getPlayers();
    this.createElements();
    this.showElements();
  },
  /**
  *  Instantiates LeaderboardColumnTitle, LeaderboardHeader and 
  *  LeaderboardContent
  */
  createElements: function() {
    /** Instantiation of LeaderboardColumnTitle */
    this.columnTitleElement = new LeaderboardColumnTitle();
    /** Instantiation of LeaderboardHeader */
    this.headerElement = new LeaderboardHeader();
    /** Instantiation of LeaderboardContent */
    this.contentElement = new LeaderboardContent(this.players);
  },
  /**
  *  Shows the html elements on the leaderboard page.  Highlights the 
  *  appropriate subnav title and shows advertising.
  */
  showElements: function() {
    this.columnTitleElement.updateContainer();
    this.headerElement.updateContainer();
    this.contentElement.updateContainer();
    this.columnTitleElement.sorter.setDomProperties();
    document.getElementById('LeaderboardFooter').style.display = 'block';
    this.chgPageTitle();
    return false;
  },
  /**
  *  Gets an array of _Player objects to show on the leaderboard
  *  @return {Array} _Player objects
  */
  getPlayers: function() {
    return Tourn.Players.Player;
  },
  /**
  *  Shows the ads
  */
  chgPageTitle: function() {
	setLeaderBoardPageTitle(Tourn.Name);
  }
});

var CustomizedLeaderboard = Class.create(
  /**
  *  @name CustomizedLeaderboard
  *  @class Responsible for creating the CustomizedLeaderboard
  *  @lends CustomizedLeaderboard.prototype
  */
  {
  initialize: function() {
    /** An array of ids for players to show on the cusotmized leaderboard */
    this.playerPids = [];
    
    /**
    *  DOM element for the customized leaderboard column titles
    *  @type HTMLElement
    *  @default "$('cLeaderboardColumnTitles')"
    */
    this.customColumnTitles = $('cLeaderboardColumnTitles');
    
    /**
    *  DOM element for the customized leaderboard content
    *  @type HTMLElement
    *  @default "$('cLeaderboardColumnContent')"
    */
    this.customContent = $('cLeaderboardColumnContent');
    
    /**
    *  DOM element for the customized leaderboard wrapper
    *  @type HTMLElement
    *  @default "$('customizedLeaderboard')"
    */
    this.customLeaderboard = $('customizedLeaderboard');
    
    this.customColumnTitles.update();
    this.customContent.update();
    
    /**
    *  Flag telling us whether or not the customized leaderboard is currently 
    *  visible on the page
    *  @type Boolean
    *  @default "true"
    */
    this.isVisible = false;
    
    /** A list of _Player objects for the customized leaderboard */
    this.players = this.getPlayers();
    
    this.createElements();
    this.showElements();
  },
  /**
  *  Instantiates CustomizedColumnTitle, LeaderboardHeader and CustomizedContent
  */
  createElements: function() {
    /** Instantiation of CustomizedColumnTitle */
    this.columnTitleElement = new CustomizedColumnTitle();
    /** Instantiation of LeaderboardHeader */
    this.headerElement = new LeaderboardHeader();
    /** Instantiation of CustomizedContent */    
    this.contentElement = new CustomizedContent(this.players);
  },
  /**
  *  Shows the html elements on the leaderboard page.  Highlights the 
  *  appropriate subnav title and shows advertising.
  */
  showElements: function() {
    this.customColumnTitles.update(this.columnTitleElement.elem);
    this.columnTitleElement.sorter.setDomProperties();
    if(this.getPlayerCount() > 0) {
      this.customLeaderboard.show(); this.isVisible = true;
    }
  },
  /**
  *  Gets an array of _Player objects for the customized leaderboard.  Based 
  *  on looking up player ids in the cookies.
  *  @return {Array} An array of _Player objects for the customized leaderboard
  */
  getPlayers: function() {
    var players = [];
    try {
      var playerIdsOnCustom = document.cookie.match(/p.{5}/g);
      if(!playerIdsOnCustom){return players;}
      for(var i = 0; i < playerIdsOnCustom.length; i++) {
        var player = Tourn.getPlayer(playerIdsOnCustom[i].substring(1,6));
        if (player) {
          this.playerPids.push(player.PID);
          players.push(player);
        }
      }
    }
    catch(e){ console.log(e); }
    return players;
  },
  /**
  *  Gets a count of players on the customized leaderboard
  *  @return {Number} A count of players on the customized leaderboard
  */
  getPlayerCount: function() {
    return this.playerPids.length;
  },
  /**
  *  Tells us if a particular player is currently on the customized leaderboard
  *  @param {String} pid The 3 character player id and unique identifier
  *  @return {Boolean} Tells us if the player is on the customized leaderboard
  */
  isPlayerOnList: function(pid) {
    for(var i = 0; i < this.playerPids.length; i++) {
      if(pid == this.playerPids[i]) { return true; }
    }
    return false;
  },
  /**
  *  Adds a player to the customized leaderboard and shows it in the DOM.  
  *  Also sets the cookie with the player id.
  *  @param {String} pid The 3 character player id and unique identifier
  */
  addPlayer: function(pid) {
    try{
    if(this.isPlayerOnList(pid)) {return;}
    var whichRow = (((this.getPlayerCount() + 1) % 2) == 1) ? 
      'oddRow' : 'evenRow';
    this.playerPids.push(pid);
    var newPlayer = new CustomizedPlayerElement(Tourn.getPlayer(pid), whichRow);
    var playerRow = newPlayer.elem;
    if(!this.isVisible) {
      $('cLeaderboardColumnContent').appendChild(playerRow);
      new Effect.BlindDown(this.customLeaderboard, {
        duration: 0.5,
        afterFinish:function(){
          this.isVisible = true;
        }.bind(this)
      });
    }
    else {
      playerRow.style.display = 'none';
      $('cLeaderboardColumnContent').appendChild(playerRow);
      new Effect.BlindDown(playerRow, {duration: 0.5});
    }
    Cookie.set('p' + pid, 'leaderboardPlayer', (365 * 20));
    //setCookie('p' + pid, 'leaderboardPlayer', getExpDate(365 * 20,0,0), '/');
    }
    catch(e) {
      console.error(e);
    }
  },
  /**
  *  Removes a player from the customized leaderboard and removes it from 
  *  the DOM.  Also deletes the corresponding cookie.
  *  @param {Object} DOM element for a particular player on the customized 
  *  leaderboard
  *  @param {String} pid The 3 character player id and unique identifier
  */
  removePlayer: function(playerElement, pid) {
    this.playerPids = this.playerPids.without(pid);
    if(this.getPlayerCount() == 0) {
      new Effect.BlindUp(this.customLeaderboard, {
        duration: 0.5,
        afterFinish:function() {
          this.isVisible = false;
          $('cLeaderboardColumnContent').removeChild(playerElement);
          var cookieName = 'p' + pid;
          //deleteCookie(cookieName,'/');
          Cookie.erase(cookieName);
          var theDiv = document.getElementsByClassName(pid)[0];
          theDiv.className = '';
        }.bind(this)
      });
    }
    else {
      new Effect.BlindUp(playerElement, {
        duration: 0.5,
        afterFinish:function() {
          try {
            $('cLeaderboardColumnContent').removeChild(playerElement);
            var cookieName = 'p' + pid;
            //deleteCookie(cookieName,'/');
            Cookie.erase(cookieName);
            var theDiv = document.getElementsByClassName(pid)[0];
            theDiv.className = '';
          }
          catch(e) {console.log(e); return false;}
        }.bind(this)
      });
    }
  }
});

var LeaderboardColumnTitle = Class.create(
  /**
  *  @name LeaderboardColumnTitle
  *  @class Responsible for creating the column titles for the Leaderboard
  *  @lends LeaderboardColumnTitle.prototype
  */
  {
  initialize: function() {
    /**
    *  The title text for the add column
    *  @type String
    *  @default "ADD"
    *  @constant
    */
    this.addPlayerLabel = 'ADD';
    this.sorter = new Sorter();
    /**
    *  The primary HTML element for leaderboard columns
    *  @type HTMLElement
    *  @default "table"
    */ 
    this.elem = document.createElement('table');
    var tbody = document.createElement('tbody');
    tbody.appendChild(this.buildTr1());
    tbody.appendChild(this.buildTr2());
    this.elem.appendChild(tbody);
  },
  /**
  *  Appends the Column Title element to the DOM
  */
  updateContainer: function() {
    if (isNewTourn) {document.getElementById('gridHeader').innerHTML = '';}
    document.getElementById('gridHeader').appendChild(this.elem);
  },
  /**
  *  Builds a column title th element for the Leaderboard
  *  @param {String} className The class name to use for the th
  *  @param {String} text The text to use for the th inner text
  *  @param {Number} rowSpan The number to use for the th rowspan property
  *  @param {Number} colSpan The number to use for the th colspan property
  *  @return {HTMLElement} A th element for a Leaderboard column header
  */
  buildTh: function(className, text, rowSpan, colspan) {
    var th = document.createElement('th');
    if(className) {th.className = className;}
    if(rowSpan)   {th.rowSpan = rowSpan;}
    if(text)      {th.appendChild(document.createTextNode(text));}
    if(colspan)   {th.colSpan = colspan;}
    return th;
  },
  /**
  *  Builds the first row of the column headers for the leaderboard
  *  @return {HTMLElement} a tr html element of row headers
  */  
  buildTr1: function() {
    var tr1 = document.createElement('tr');    
    tr1.appendChild(this.buildTh('add addPlayerColumn',this.addPlayerLabel,2));    
    var th = document.createElement('th');
    th.className = 'positionColumn';
    th.rowSpan = 2;
    var a = document.createElement('a');
    a.appendChild(document.createTextNode('POS'));
    a.href = 'javascript:void(0);';
    Event.observe(a, 
                  'click',
                  this.sorter.sortListener.bindAsEventListener(this.sorter));
    th.appendChild(a);
    tr1.appendChild(th);
    th = document.createElement('th');
    th.className = 'nameColumn';
    th.rowSpan = 2;
    th.appendChild(document.createTextNode('Player Name: '));
    a = document.createElement('a');
    a.appendChild(document.createTextNode('First'));
    a.href = 'javascript:void(0);';
    Event.observe(a, 
                  'click',
                  this.sorter.sortListener.bindAsEventListener(this.sorter));
    th.appendChild(a);
    th.appendChild(document.createTextNode(' | '));
    a = document.createElement('a');
    a.appendChild(document.createTextNode('Last'));
    a.href = 'javascript:void(0);';
    Event.observe(a, 
                  'click',
                  this.sorter.sortListener.bindAsEventListener(this.sorter));
    th.appendChild(a);    
    tr1.appendChild(th);
    tr1.appendChild(this.buildTh('countryColumn', 'COUNTRY', 2));
    tr1.appendChild(this.buildTh(null, 'SCORING TO PAR', null, 3));
    tr1.appendChild(this.buildTh(null, 'ROUNDS', null, window.Tourn.NumRnds));
    th = document.createElement('th');
    th.className = 'tourTotalColumn';
    th.rowSpan = 2;
    a = document.createElement('a');
    a.appendChild(document.createTextNode('TOTAL'));
    a.href = 'javascript:void(0);';
    Event.observe(a, 
                  'click',
                  this.sorter.sortListener.bindAsEventListener(this.sorter));
    th.appendChild(a);
    tr1.appendChild(th);
    return tr1;
  },
  /**
  *  Builds the second row of column titles
  *  @return {HTMLElement} a tr element representing the 2nd row of column 
  *  titles
  */
  buildTr2: function() {
    var tr2 = document.createElement('tr');
    tr2.className = 'secondLevelHeaders';
    var th = document.createElement('th');
    th.className = 'todayColumn';
    var a = document.createElement('a');
    a.appendChild(document.createTextNode('Today'));
    a.href = 'javascript:void(0);';
    Event.observe(a, 
                  'click',
                  this.sorter.sortListener.bindAsEventListener(this.sorter));
    th.appendChild(a);
    tr2.appendChild(th);
    th = document.createElement('th');
    th.className = 'thruColumn';
    a = document.createElement('a');
    a.appendChild(document.createTextNode('Thru'));
    a.href = 'javascript:void(0);';
    Event.observe(a, 
                  'click',
                  this.sorter.sortListener.bindAsEventListener(this.sorter));
    th.appendChild(a);
    tr2.appendChild(th);
    th = document.createElement('th');
    th.className = 'totalColumn';
    a = document.createElement('a');
    a.appendChild(document.createTextNode('Total'));
    a.href = 'javascript:void(0);';
    Event.observe(a, 
                  'click',
                  this.sorter.sortListener.bindAsEventListener(this.sorter));
    th.appendChild(a);
    tr2.appendChild(th);
    tr2 = this.buildRoundElements(tr2);
    return tr2;
  },
  /**
  *  Updates the 2nd row tr with the appropriate number of round headers
  *  @param {HTMLElement} tr The 2nd row of column titles
  *  @return {HTMLElement} The 2nd row of column titles updated with the 
  *  right number of round headers
  */
  buildRoundElements: function(tr) {
	var RdValue = 0;
    for(var i = 1, len = Tourn.NumRnds; i <= len; ++i) {
	  RdValue = (i>4) ? (Tourn.TournId === "026" && i === 5) ? i : "PO" : i;
      tr.appendChild(this.buildTh('roundColumn', RdValue));
    }
    return tr;
  }
});


var CustomizedColumnTitle = Class.create(LeaderboardColumnTitle,
  /**
  *  @name CustomizedColumnTitle
  *  @class Responsible for creating the column titles for the Customized 
  *  Leaderboard
  *  @lends CustomizedColumnTitle.prototype
  *  @extends LeaderboardColumnTitle
  */
  {
  initialize: function() {
    this.sorter = new CustomizedSorter();
    /**
    *  The title text for the delete column
    *  @type String
    *  @default "DEL"
    *  @constant
    */
    this.addPlayerLabel = 'DEL';
    /**
    *  The primary HTML element for leaderboard columns
    *  @type HTMLElement
    *  @default "table"
    */    
    this.elem = document.createElement('table');
    var tbody = document.createElement('tbody');
    tbody.appendChild(this.buildTr1());
    tbody.appendChild(this.buildTr2());
    this.elem.appendChild(tbody);
  }
});

var LeaderboardHeader = Class.create(
  /**
  *  @name LeaderboardHeader
  *  @class Responsible for creating the tournament header element for the 
  *  Leaderboard
  *  @lends LeaderboardHeader.prototype
  */
  {
  initialize: function() {
    /**
    *  The primary HTML element for the tournament header
    *  @type HTMLElement
    *  @default "div"
    */ 
    this.elem = document.createElement('div');
    //if(!Tourn.isMajor()) {
      this.elem.appendChild(this.buildHeaderSpan());
      this.elem.appendChild(document.createElement('br'));
      this.elem.appendChild(this.buildLabelsDiv());
      this.elem.appendChild(this.buildTitlesDiv());
   // }
  },
  /**
  *  Appends the leaderboard header to the DOM
  */
  updateContainer: function() {
    if(isNewTourn) {document.getElementById('mainHeader').innerHTML = '';}
    document.getElementById('mainHeader').appendChild(this.elem);
  },
  /**
  *  Gets the Header html element
  *  @return {HTMLElement}  The header HTML element
  */
  buildHeaderSpan: function() {
    var headerSpan = document.createElement('span');
    headerSpan.className = 'header';
    headerSpan.appendChild(document.createTextNode(Tourn.Name));
    return headerSpan;
  },
  /**
  *  Gets the header labels html element
  *  @return {HTMLElement} The header labels element
  */
  buildLabelsDiv: function() {
    var div = document.createElement('div');
    div.className = 'labels';
    div.appendChild(document.createTextNode('Location:'));
    div.appendChild(document.createElement('br'));
    div.appendChild(document.createTextNode('Start date:'));
    div.appendChild(document.createElement('br'));
    div.appendChild(document.createTextNode('Purse:'));
    return div;
  },
  /**
  *  Gets the header titles html element
  *  @return {HTMLElement} The header titles element
  */
  buildTitlesDiv: function() {
    var div = document.createElement('div');
    div.className = 'titles';
    div.appendChild(document.createTextNode(Tourn.getLocation()));
    div.appendChild(document.createElement('br'));
    div.appendChild(document.createTextNode(Tourn.TournStartDate));
    var timeSpan = document.createElement('span');
    timeSpan.className = 'timeSpan';
    timeSpan.appendChild(document.createTextNode(' (all times Eastern)'));
    div.appendChild(timeSpan);
    div.appendChild(document.createElement('br')); 
    div.appendChild(document.createTextNode(Tourn.Purse));
    return div;
  }
});

function insertLBAdRow(sort) {
	/* This portion adds the container for the Ad ten rows down within the leaderboard */ 
	var div = document.createElement("div");
	div.className = "insertLBAdRow";
	div.setAttribute("id", "lb-ad");
	div.style.height = "51px";
	div.style.backgroundColor = "white";
	if (typeof sort != 'undefined' && sort) { div.innerHTML = ''; }
	else { iframeAdFactory.getAd('i_640x50', 640, 50, false, false, true, div); }
	return div;
}

function removeLBAdRow() {
	/* This portion removes the container for the Ad ten rows down within the leaderboard */ 
	var par = document.getElementById("playerInfoPanels").firstChild;
	var obj = document.getElementById("lb-ad");
	var content = obj.innerHTML;
	par.removeChild(obj);
	return content;
}

var LeaderboardContent = Class.create(
  /**
  *  @name LeaderboardContent
  *  @class Responsible for creating the leaderboard content of Leaderboard 
  *  players
  *  @lends LeaderboardContent.prototype
  *  @param {Array} players An array of _Player objects
  */  
  {
  initialize: function(players) {
    /**
    *  The primary HTML element for the tournament content
    *  @type HTMLElement
    *  @default "div"
    */ 
    this.elem = document.createElement('div');
    /** @ignore */
    this._init(players);
  },
  _init: function(players) {
    for(var i = 0, len = players.length; i < len; ++i) {
      var whichRow = (((i + 1) % 2) == 1) ? 'oddRow' : 'evenRow';
      if (this.elem) { 
        this.elem.appendChild(this.getPlayerElement(players[i], whichRow));
      }
		if(i == 9){
			this.elem.appendChild(new insertLBAdRow());
		}
    }
  },
  /**
  *  Appends the Leaderboard content to the DOM and shows it
  */
  updateContainer: function() {
    if(isNewTourn) {document.getElementById('playerInfoPanels').innerHTML = '';}
    $('playerInfoPanels').update(this.elem);
    $('playerInfoPanels').show();
    return false;
  },
  /**
  *  Creates a PlayerElement object and returns the HTML node representing a 
  *  player in the Leaderboard
  *  @param {_Player} player The json for this player retrieved from the 
  *  tournament ajax request
  *  @param {String} whichRow Expected values are either 'odd' or 'even'. 
  *  Used for CSS styling.
  *  @return {HTMLElement} The html element representing a player row on the 
  *  Leaderboard
  */
  getPlayerElement: function(player, whichRow) {
    return (new PlayerElement(player, whichRow)).elem;
  },
  setAdElement: function (){
	this.elem = document.createElement('tr');
	this.className = "lb-ad";
  }
});

var CustomizedContent = Class.create(LeaderboardContent,
  /**
  *  @name CustomizedContent
  *  @class Responsible for creating the leaderboard content of Customized 
  *  Leaderboard players
  *  @lends CustomizedContent.prototype
  *  @param {Array} players An array of _Player objects
  *  @extends LeaderboardContent
  */  
  {
  initialize: function(players) {
    /**
    *  The primary HTML element for the customized tournament content
    *  @type HTMLElement
    *  @default "div" - $('cLeaderboardColumnContent')
    */ 
    this.elem = document.getElementById('cLeaderboardColumnContent');
    /** @ignore */
    this._init(players);
  },
  /**
  *  Creates a PlayerElement object and returns the HTML node representing a 
  *  player in the Customized Leaderbard
  *  @param {_Player} player The json for this player retrieved from the 
  *  tournament ajax request
  *  @param {String} whichRow Expected values are either 'odd' or 'even'. 
  *  Used for CSS styling.
  *  @return {HTMLElement} The html element representing a player row on the 
  *  Leaderboard
  */
  getPlayerElement: function(player, whichRow) {
    return (new CustomizedPlayerElement(player, whichRow, true)).elem;
  },
  /**
  *  Appends the Customized Leaderboard content to the DOM and shows it
  */
  updateContainer: function() {
    $('cLeaderboardColumnContent').update(this.elem);
  }
});

var PlayerElement = Class.create(
  /**
  *  @name PlayerElement
  *  @class Responsible for creating a player in the Leaderboard
  *  @lends PlayerElement.prototype
  *  @param {_Player} player The _Player for the Leaderboard row
  *  @param {String} whichRow Expected values are either 'odd' or 'even.  Used 
  *  for CSS styling.
  */  
  {
  initialize: function(player, whichRow, cLB) {
    if(customizedLeaderboard.isPlayerOnList(player.PID)) {
      /**
      *  The full class name for the 'add player' cell.  Includes the player id.
      *  @type String
      *  @default "empty string - no value"
      */
      this.toggleDivClassName = 'playerAdded ' + player.PID;
    }
    else {
      this.toggleDivClassName = '';
    }
    this._init(player, whichRow, cLB);
  },
  /** @ignore */
  _init: function(player, whichRow, cLB) {
    /**
    *  The HTML element container for the player row
    *  @type HTMLElement
    *  @default "div"
    */
    this.elem = document.createElement('div');
    this.elem.className = 'panel';    
    this.setDetailDiv();
    this.setPlayerAttributes(player);
    /**
    *  The classname used for this player row.  Expected values or either 
    *  'odd' or 'even'. Used for CSS styling.
    *  @type String
    */
    this.whichRow = whichRow;
	/** If the calling object is the custom leaderboard object*/
	this.customLB = (cLB) ? cLB : false;
    this.appendChildren();
  },
  /** Creates the HTML element container for the player detail */
  setDetailDiv: function() {
    /**
    *  This is the HTML element container for the detail section for this player
    *  @type HTMLElement
    #  @default "div"
    */
    this.detailDiv = document.createElement('div');
    this.detailDiv.style.display = 'none';
  },
  /**
  *  Used to cache the player attributes needed from the _Player object. 
  *  Saves memory resources.
  *  @param {_Player} player A _Player object
  */
  setPlayerAttributes: function(player) {
    /** The unique identifier for this player */
    this.pid = player.PID;
    /** The player's full name.  Concatenation of first and last name */
    this.playerFullName = player.Fname +' '+ player.Lname;
    /** The player country.  Used for the class name for the flag cell */
    this.playerCountry = player.country;
    /** The player's current position in the tournament */
    this.currentPosition = (player.CurPos) ? player.CurPos : '';
    /** The player's current par */
    this.currentParRel = (player.CurParRel) ? player.CurParRel : '';
    /** Thru what round has the player played */
    this.thru = (player.Thru) ? player.Thru : '';
    /** Tournament total par for the player */
    this.tournParRel = (player.TournParRel) ? player.TournParRel : '';
    this.tournParRel = (player.TournParRel == '+0') ? '' : player.TournParRel;
    /** Tournament total stroke for the player */
    this.tournStroke = (player.TournStrk) ? player.TournStrk : '';
    /** An array of round objects for the player */
    this.playerRounds = player.Rnd;
    /** The tee time - used when a player hasn't begun playing */
    this.ttime = (this.currentParRel == 'E' && this.thru == '' ) ? player.TTimeEST : null;
    if(this.currentParRel == 'E' && this.thru == '' && this.ttime.indexOf(':') == -1) {this.fixTTime();}
  },
  fixTTime: function() {
	  var ttime = this.ttime;
	  var hour = Number(ttime.substring(0, 2));
	  var minute = Number(ttime.substring(2));
	  var amOrPm = 'am';
	  if(hour >= 12) {
		  amOrPm = 'pm';
		  if(hour > 12) {
			  hour = hour - 12;
		  }
	  }
	  if(minute < 10) {
		  minute = '0' + minute;
	  }
	  this.ttime = hour + ':' + minute + ' ' + amOrPm;
	  if(this.ttime == '0:00 am') {this.ttime = ''; this.currentParRel = '';}
  },
  /**
  *  Gets the table element container for the player row
  *  @return {HTMLElement} The table element
  */
  getTable: function() {
    var table = document.createElement('table');
    var tbody = document.createElement('tbody');
    tbody.appendChild(this.getPlayerTr());
    table.appendChild(tbody);
    return table;
  },
  /**
  *  Appends both the player row and it's corresponding detail div to the DOM.  The detail div is initially hidden.
  */
  appendChildren: function() {
    this.elem.appendChild(this.getTable());
    this.elem.appendChild(this.detailDiv);
  },
  /**
  *  Gets the player tr html element for the player row.
  *  @return {HTMLElement} The tr element for the player row
  */
  getPlayerTr: function() {
    var tr = document.createElement('tr');
    tr.className = this.whichRow;
    tr.appendChild(this.getAddPlayerTd());    
    var td = document.createElement('td');
    td.className = 'positionColumn';
    td.appendChild(document.createTextNode(this.cleanString(this.currentPosition)));
    tr.appendChild(td);    
    tr.appendChild(this.getNameTd());
    tr.appendChild(this.getCountryTd());    
    
    if (this.ttime) {
      td = document.createElement('td');
      td.style.width = '70px';
      td.appendChild(document.createTextNode(this.cleanString(this.ttime)));
      tr.appendChild(td);
    }
    else {
      td = document.createElement('td');
      td.className = 'todayColumn';
      td.appendChild(document.createTextNode(this.cleanString(this.currentParRel)));
      tr.appendChild(td);
      td = document.createElement('td');
      td.className = 'thruColumn';
      td.appendChild(document.createTextNode(this.cleanString(this.thru)));
      tr.appendChild(td);
  } 
    td = document.createElement('td');
    td.className = 'totalColumn';
    td.appendChild(document.createTextNode(this.cleanString(this.tournParRel)));
    tr.appendChild(td);    
    tr = this.appendRoundTds(tr);    
    td = document.createElement('td');
    td.className = 'tourTotalColumn';
    td.appendChild(document.createTextNode(this.cleanString(this.tournStroke)));
    tr.appendChild(td);    
    return tr;
  },
  /**
  *  Gets the 'addPlayer' td element for the row
  *  @return {HTMLElement} The td element for the rw.
  */
  getAddPlayerTd: function() {
    var td = document.createElement('td');
    td.className = 'addPlayerColumn';
    /**
    *  The div that's used for the add to customized leaderboard cell
    *  @type HTMLElement
    *  @default "div"
    */
    this.toggleDiv = document.createElement('div');
    this.toggleDiv.className = this.toggleDivClassName;
    Event.observe(this.toggleDiv, 'click', this.customToggle.bind(this));
    td.appendChild(this.toggleDiv);
    return td;
  },
  /**
  *  Run when the addPlayer div is clicked
  *  @event
  */
  customToggle: function() {
    this.toggleDiv.className  = 'playerAdded ' + this.pid;
	OmniClick();
    customizedLeaderboard.addPlayer(this.pid);
  },
  /**
  *  Gets the td element for the player's name
  *  @return {HTMLElement} The td for the player's name
  */
  getNameTd: function() {
    var td = document.createElement('td');
    td.className = 'nameColumn';
    /**
    *  The html link element for the player name.  Clicking on this expands the player scorecard
    *  @type HTMLElement
    *  @default "a"
    */
	
   if(Tourn.TourCode !== "L" && Tourn.TourCode !== "E" ){
		this.playerLinkElement = document.createElement('a');
		this.playerLinkElement.className = 'toggleDetailLink';
		this.playerLinkElement.href = 'javascript:void(0);';
		this.playerLinkElement.appendChild(document.createTextNode(this.playerFullName));
		var playerDetailElement = new PlayerDetailElement(this.detailDiv, this.pid, this.whichRow);
		this.playerLinkElement.onclick = playerDetailElement.showPlayerDetail.bind(playerDetailElement);
		td.appendChild(this.playerLinkElement);
				
		if (this.playerRounds.length > 4 && this.customLB === false){
			this.playerLinkElement.triggerEvent = function(eventName){
				if (document.createEvent){
					var evt = document.createEvent('HTMLEvents');
					evt.initEvent(eventName, true, true);
					return this.dispatchEvent(evt);
				}
				if (this.fireEvent){
					return this.fireEvent('on' + eventName);
				} 
			}
			this.playerLinkElement.triggerEvent('click');
		}
   }
	else {
		this.playerLinkElement = document.createElement('b');
		this.playerLinkElement.style.paddingLeft = "10px";	
		this.playerLinkElement.appendChild(document.createTextNode(this.playerFullName));
		var playerDetailElement = new PlayerDetailElement(this.detailDiv, this.pid, this.whichRow);
		td.appendChild(this.playerLinkElement);
	}
    return td;
  },
  /**
  *  Gets the td element for the country flag cell
  *  @return {HTMLElement}
  */
  getCountryTd: function() {
    var td = document.createElement('td');
    td.className = 'countryColumn';
    var div = document.createElement('div');
    div.className = this.playerCountry.toUpperCase();
    if(div.className == '') {
		if(Tourn.TourCode !== "L" && Tourn.TourCode !== "E"){
			div.style.display = 'none';
		}
		else {
			div.style.width="1px";
			div.style.visibility="hidden";
		}
	}
    td.appendChild(div);
    return td;
  },
  /**
  *  Updates the player row tr element with the appropriate number of round tds
  *  @param {HTMLElement} tr The tr element for the player row
  *  @return {HTMLelement} The updated tr element for the player row
  */
  appendRoundTds: function(tr) {
    var playerRoundStroke = null;    
    for(var i = 0, len = Number(Tourn.NumRnds); i < len; ++i) {
      playerRoundStroke = null;
      var td = document.createElement('td');
      td.className = 'roundColumn';
      if(this.playerRounds) {
        var playerRound = this.playerRounds[i];        
        if(playerRound) {
          if(playerRound.Stroke) { playerRoundStroke = playerRound.Stroke; }
        }
        if(playerRoundStroke) { td.appendChild(document.createTextNode(playerRoundStroke)); }
      }
      tr.appendChild(td);
    }
    return tr;
  },
  /**
  *  A utility method to clean null or undefined properties with an empty string.  Used for view purposes.
  *  @param {Object} theString The value to be cleaned
  *  @return {String} A string value or an empty string
  */
  cleanString: function(theString) {
    return (theString instanceof Object) ? null : theString;
  }
});

var CustomizedPlayerElement = Class.create(PlayerElement,
  /**
  *  @name CustomizedPlayerElement
  *  @class Responsible for creating a player in the Customized Leaderboard
  *  @lends CustomizedPlayerElement.prototype
  *  @param {_Player} player The _Player for the Customized Leaderboard row
  *  @param {String} whichRow Expected values are either 'odd' or 'even.  Used for CSS styling.
  */ 
  {
  initialize: function(player, whichRow, cLB) {
    /**
    *  The class name for the 'delete player' cell.
    *  @type String
    *  @default "removePlayer"
    */
    this.toggleDivClassName = 'removePlayer';
    this._init(player, whichRow, cLB);
  },
  /**
  *  Run when the delete player div is clicked
  *  @event
  */
  customToggle: function() {
	OmniClick();
    customizedLeaderboard.removePlayer(this.elem, this.pid);
  }
});

var PlayerDetailElement = Class.create(
  /**
  *  @name PlayerDetailElement
  *  @class Responsible for player scorecards
  *  @lends PlayerDetailElement.prototype
  *  @param {HTMLElement} elem The container html element for the player scorecard
  *  @param {String} pid The player id
  *  @param {String} whichRow Expected values are either 'odd' or 'even'.  Used for CSS styling.
  */ 
  {
  initialize: function(elem, pid, whichRow) {
    /** The container html element for the player scorecard */
    this.elem = elem;
    /** The player id */
    this.pid = pid;
    /** Expected values are either 'odd' or 'even'.  Used for CSS styling. */
    this.whichRow = whichRow;
    /**
    *  Flag telling us if the scorecard is visible
    *  @type Boolean
    *  @default "false"
    */
    this.isVisible = false;
    /**
    *  Flag telling us if the element has content
    *  @type Boolean
    *  @default "false"
    */
    this.hasContent = false;
    /**
    *  Flag telling us if the scorecard panel is moving
    *  @type Boolean
    *  @default "false"
    */
    this.isMoving = false;
  },
  /**
  *  Run when someone clicks on a player's name.  Show's the player's scorecard panel.
  */
  showPlayerDetail: function() {
    if(this.isMoving) {return;}
    this.isMoving = true;
    if(this.hasContent) {this.togglePlayerDetail();}
    else {
      new Ajax.Request(window.server.getPlayerDetailUrl(this.pid), {
        method: 'get',
        onSuccess: function(transport) {
          this.setRoundAttributes(transport.responseText);
          if(!Tourn.isMajor()) {
            new Ajax.Request(window.server.getPlayerStatsUrl(this.pid), {
                method: 'get',
                onSuccess: function(transport) {
                  /** Array for "Today's Round Stats" */
                  this.stats = eval('(' + transport.responseText + ')').PlayerTournamentStats.Player.Stat;
                  this.doRest();
                }.bind(this),
                onFailure: function() {
                  this.doRest();
                }.bind(this)
            });
          }
          else {
            this.doRest();
          }
        }.bind(this)
      });
    }
  },
  /** Function runner to build the scorecard panel after the ajax request completes. */
  doRest: function() {
    var outerTable = document.createElement('table');
    /** tbody html element inside the scorecard panel container */
    this.outerTbody = document.createElement('tbody');
    var scorecardElement = new Scorecard(this); 
    this.outerTbody.appendChild(scorecardElement.elem);
    outerTable.appendChild(this.outerTbody);
    this.elem.appendChild(outerTable);
    this.togglePlayerDetail();
  },
  /** Toggles whether to show or hide the player scorecard */
  togglePlayerDetail: function() {
    if(this.isVisible) { this.closeScorecard(); }
    else { this.openScorecard(); }
  },
  /** Expands the scorecard using scriptaculous effects */
  openScorecard: function() {
    new Effect.BlindDown(this.elem, {
      duration: 0.5,
      afterFinish:function(){
        this.isMoving = false;
        this.isVisible = true;
        this.hasContent = true;
		OmniClick();
      }.bind(this)
    });
  },
  /** Used to cache only the needed data elements from the scorecard json to save memory resources */
  setRoundAttributes: function(responseText) {
    /**
    *  A player scorecard
    *  @type Scorecard
    */
    this.playerDetail = eval('(' + responseText + ')').PlayerScorecard.Player;
    /** An Array of player scorecard rounds */
    this.playerRounds = this.playerDetail.Rnd;
    /** A round object representing the current round */
    this.currentRound = Tourn.getCurrentRound(this.playerRounds);
    /** An array of Hole objects */
    this.holes = this.currentRound.Hole;
  },
  /** Creates a ScorecardFull that includes all the rounds played for this player */
  showFullScorecard: function() {
    var fullScorecard = new ScorecardFull(this);
    var outerTbodyTrs = this.outerTbody.getElementsByTagName('tr');
    for(var i = 0; i < outerTbodyTrs.length; i++) {
      this.outerTbody.removeChild(outerTbodyTrs[i]);
    }
    this.outerTbody.appendChild(fullScorecard.elem);
  },
  /** Shoes the most recent round's scorecard for this player */
  showRecentScorecard: function() {
    var scorecardElement = new Scorecard(this);
    var outerTbodyTrs = this.outerTbody.getElementsByTagName('tr');
    for(var i = 0; i < outerTbodyTrs.length; i++) {
      this.outerTbody.removeChild(outerTbodyTrs[i]);
    }
    this.outerTbody.appendChild(scorecardElement.elem);
  },
  /** Closes the scorecard panel using scriptaculous effects */
  closeScorecard: function() {
    new Effect.BlindUp( this.elem, {
      duration: 0.5,
      afterFinish:function(){
        this.isMoving = false;
        this.isVisible = false;
		OmniClick();
      }.bind(this)
    });
  }
});

var Scorecard = Class.create(
  /**
  *  @name Scorecard
  *  @class Responsible for building the scorecard element
  *  @lends Scorecard.prototype
  *  @param {PlayerDetailElement} playerDetail The PlayerDetail object for this scorecard
  */ 
  {
  initialize: function(playerDetail) {
    /**
    *  The PlayerDetail object for this scorecard
    *  @type PlayerDetailElement
    */
    this.playerDetail = playerDetail;
    /**
    *  The value for the outerTd colspan attribute
    *  @constant
    *  @default "12"
    *  @type String
    */
    this.outerTdColspan = '12';
    /**
    *  The value for the headshot rowSpan attribute
    *  @constant
    *  @default "6"
    *  @type String
    */
    this.headshotRowspan = '6';
    /**
    *  The value for the line1 colspan attribute
    *  @constant
    *  @default 12
    *  @type String
    */
    this.l1colspan = '15';
    /**
    *  The value for the line 2 colspan attribute
    *  @constant
    *  @default "12"
    *  @type String
    */
    this.l2colspan = '7';
    /**
    *  The value for the toggle lastest/full scorecard link
    *  @default "View Full Scorecard"
    *  @type String
    */
    this.scorecardToggleLink = 'View Full Scorecard';
    /**
    *  The main containing tr element for the scorecard
    *  @type HTMLElement
    */
    this.elem = document.createElement('tr');
    this.elem.appendChild(this.getOuterTd(false));
  },
  /**
  *  Gets the outerTd element for the scorecard
  *  @param {Boolean} isFull Tells us if this is for a full scorecard
  *  @return {HTMLElement} The td html element
  */
  getOuterTd: function(isFull) {
    var outerTd = document.createElement('td');
    outerTd.className = 'playerDetail';
    outerTd.colSpan = this.outerTdColspan;
    outerTd.appendChild(this.getInnerTable(isFull));
    outerTd.appendChild(document.createElement('br'));
    var legendTable = new ScorecardLegend(this.playerDetail);
    outerTd.appendChild(legendTable.elem);
    return outerTd;
  },
  /**
  *  Gets the inner table html element for the scorecard
  *  @param {Boolean} isFull Tells us if this is for a full scorecard
  *  @return {HTMLElement} The table html element
  */
  getInnerTable: function(isFull) {
    var innerTable = document.createElement('table');
    var innerTbody = document.createElement('tbody');
    innerTbody.appendChild(this.getHeadshotTr());
    innerTbody.appendChild(new ScorecardTrHole(this.playerDetail.holes,isFull).elem);
    innerTbody.appendChild(new ScorecardTrPar(this.playerDetail.holes,isFull).elem);
    innerTbody.appendChild(new ScorecardTrYards(this.playerDetail.holes,isFull).elem);
    innerTbody = this.appendScorecardTrStroke(innerTbody,isFull);
    innerTbody.appendChild(this.getToggleFullScorecardTr());
    innerTable.appendChild(innerTbody);
    return innerTable;
  },
  /**
  *  Creates a ScorecardTrStroke object and appends a stroke tr element to the scorecard tbody
  *  @param {HTMLElement} tbody The scorecard tbody html element
  *  @param {Boolean} isFull The flag telling us if this is a full scorecard
  *  @return {HTMLElement} tbody The scorecard tbody html element
  */
  appendScorecardTrStroke: function(tbody,isFull) {
    tbody.appendChild(new ScorecardTrStroke(this.playerDetail.holes, Tourn.CurRnd,isFull).elem);
    return tbody;
  },
  /** 
  *  Creates and returns the Headshot tr html element
  *  @return {HTMLElement}
  */
  getHeadshotTr: function() {
    var tr = document.createElement('tr');
    var td = document.createElement('td');
    td.className = 'headshot';
    td.rowSpan = this.headshotRowspan;
    var div = document.createElement('div');
    div.className = 'headshotWrapper';
    var img = document.createElement('img');
    img.src = 'http://img.timeinc.net/golf/static/img/stats/players/'+ this.playerDetail.pid +'_66x105.jpg';
    img.alt = '';
    var a = document.createElement('a');
    a.href = '/golf/tours_news/playerdetails/0,28352,'+ this.playerDetail.pid +',00.html';
    a.appendChild(document.createTextNode('Player Details'));
	a.onclick = function(){
		OmniClick();
	}
    div.appendChild(img);
    td.appendChild(div);
    td.appendChild(a);
    tr.appendChild(td);
    return tr;
  },
  /**
  *  Creates amd returns the toggle full scorecard tr element
  *  @return {HTMLElement}
  */
  getToggleFullScorecardTr: function() {
    var tr = document.createElement('tr');
    var td1 = document.createElement('td');
    var stats = null;
    if(this.playerDetail.stats) {stats = this.playerDetail.stats;}
    td1.colSpan = this.l1colspan;
    td1.style.textAlign = 'left';
    td1.style.fontSize = '11px';
    td1.style.padding = '3px 0 3px 5px';
    var htmlVar = '';
    if(!Tourn.isMajor()) { //100 == British Open; 033 == PGA Championship; 014 == The Masters; 260 == U.S. Open
      if (stats[0].Rnd.length) {
        htmlVar = '<ul><li style="font-weight:bold">Today\'s Round</li><li>Driving Distance: ' + ((stats != null) ? stats[0].Rnd[Tourn.CurRnd - 1].RValue : '') + '</li><li>Driving Accuracy: ' + ((stats != null) ? stats[1].Rnd[Tourn.CurRnd - 1].RValue : '') + '</li><li>Green in Regulation: ' + ((stats != null) ? stats[2].Rnd[Tourn.CurRnd - 1].RValue : '') + '</li></ul>';
      }
      else if(stats[0].Rnd.RValue) {
        htmlVar = '<ul><li style="font-weight:bold">Today\'s Round</li><li>Driving Distance: ' + ((stats != null) ? stats[0].Rnd.RValue : '') + '</li><li>Driving Accuracy: ' + ((stats != null) ? stats[1].Rnd.RValue : '') + '</li><li>Green in Regulation: ' + ((stats != null) ? stats[2].Rnd.RValue : '') + '</li></ul>';
      }
      else {
        htmlVar = '<ul><li style="font-weight:bold">Today\'s Round</li><li>Driving Distance:</li><li>Driving Accuracy:</li><li>Green in Regulation:</li></ul>';
      }
    }
    td1.innerHTML = htmlVar;
    var td2 = document.createElement('td');
    td2.className = 'viewFullScorecard';
    td2.colSpan = this.l2colspan;
    var a = document.createElement('a');
    a.href = 'javascript:void(0);';
    a.appendChild(document.createTextNode(this.scorecardToggleLink));
    a = this.bindScorecardToggle(a);
	a.onclick = function(){
		OmniClick();
	}    
	td2.appendChild(a);
    tr.appendChild(td1);
    tr.appendChild(td2);
    return tr;
  },
  /**
  *  Binds the showFullScorecard method to the playerDetail class
  *  @param {HTMLElement} a The anchor html element
  *  @return {HTMLElement}
  */
  bindScorecardToggle: function(a) {
    Event.observe(a, 'click', this.playerDetail.showFullScorecard.bind(this.playerDetail));
    return a;
  }
});

var ScorecardTr = Class.create(
  /**
  *  @name ScorecardTr
  *  @class Responsible for creating scorecard tr html elements
  *  @lends ScorecardTr.prototype
  *  @param {Array} holes An array of Hole objects
  *  @param {Boolean} isFull tells us if this is a full scorecard
  */   
  {
  initialize: function(holes, isFull) {
    /** The label for this scorecard tr */
    this.label = '';
    /** Used for css styling */
    this.isOdd = false;
    /** Tells us if this is a full scorecard */
    this.isFull = isFull;
    /** An array of Hole objects */
    this.holes = holes;
    /** Flag tellins us if this is an out set */
    this.isOutSet = false;
    this.setElem();
  },
  setElem: function() {
    /** Main containing tr html element */
    this.elem = document.createElement('tr');
    if(this.isOdd) {this.elem.className = 'odd';}
    var th = document.createElement('th');
    th.appendChild(document.createTextNode(this.label));
    this.elem.appendChild(th);
    for(var i = 0, len = this.holes.length; i < len; ++i) {        
      var hole = this.holes[i];
      var td = document.createElement('td');
      if(i == 9 && !this.isOutSet) {
        td = this.getOutTd(td);
        this.elem.appendChild(td);
        i = 8;
        this.isOutSet = true;
      }
      else {
        td = this.setTdClassName(td, hole);
        td.appendChild(document.createTextNode(this.getValue(hole)));
        this.elem.appendChild(td);
      }
      if(i == 17) {
        this.elem.appendChild(this.getInTd());
        this.elem.appendChild(this.getTotalTd());
      }
    }
  },
  /**
  *  Sets the td class name - stroke coloring
  *  @param {HTMLElement} td This td html element
  *  @param {Hole} hole The corresponding hole object
  *  @return {HTMLElement} The stylized td html element
  */
  setTdClassName: function(td, hole) { return td; },
  /**
  *  Gets the value for this hole
  *  @param {Hole} hole The corresponding hole object
  *  @return {String} The value for this hole
  */
  getValue: function(hole) {return '';},
  /**
  *  Gets the out td html element
  *  @return {HTMLElement}
  */  
  getOutTd: function() {return;},
  /**
  *  Gets the in html element
  *  @return {HTMLElement}
  */
  getInTd: function() {return;},
  /**
  *  Gets the total html element
  *  @return {HTMLElement}
  */  
  getTotalTd: function() {return;}
});

var ScorecardTrHole = Class.create(ScorecardTr,
  /**
  *  @name ScorecardTrHole
  *  @class Responsible for creating Hole tr html elements
  *  @lends ScorecardTrHole.prototype
  *  @extends ScorecardTr
  *  @param {Array} holes An array of Hole objects
  *  @param {Boolean} isFull tells us if this is a full scorecard
  */    
  {
  initialize: function(holes, isFull) {
    this.label = 'Hole:';
    this.isFull = isFull;
    this.isOdd = true;
    this.holes = holes;
    this.isOutSet = false;
    this.setElem();
  },
  getValue: function(hole) { return hole.Num;},
  getOutTd: function(td) {
    td.appendChild(document.createTextNode('OUT'));
    td.style.fontWeight = 'bold';
    return td;
  },
  getInTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode('IN'));
    td.style.fontWeight = 'bold';
    return td;
  },
  getTotalTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode('TOTAL'));
    td.style.fontWeight = 'bold';
    return td;
  }
});

var ScorecardTrPar = Class.create(ScorecardTr,
  /**
  *  @name ScorecardTrPar
  *  @class Responsible for creating Par tr html elements
  *  @lends ScorecardTrPar.prototype
  *  @extends ScorecardTr
  *  @param {Array} holes An array of Hole objects
  *  @param {Boolean} isFull tells us if this is a full scorecard
  */     
  {
  initialize: function(holes, isFull) {
    this.label = 'Par:';
    this.isFull = isFull;
    this.isOdd = false;
    this.holes = holes;
    this.isOutSet = false;
    this.counter = 0;
    this.outPar = 0;
    this.inPar = 0;
    this.totalPar = 0;
    this.setElem();
  },
  getValue: function(hole) {
    this.counter++;
    var par = Number(hole.Par);
    if(this.counter <= 9) { this.outPar += par; }
    else { this.inPar += par; }
    this.totalPar += par;
    return par;
  },
  getOutTd: function(td) {
    td.appendChild(document.createTextNode(this.outPar));
    td.style.fontWeight = 'bold';
    return td;
  },
  getInTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode(this.inPar));
    td.style.fontWeight = 'bold';
    return td;
  },
  getTotalTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode(this.totalPar));
    td.style.fontWeight = 'bold';
    return td;
  }
});

var ScorecardTrYards = Class.create(ScorecardTr,
  /**
  *  @name ScorecardTrYards
  *  @class Responsible for creating Yards tr html elements
  *  @lends ScorecardTrYards.prototype
  *  @extends ScorecardTr
  *  @param {Array} holes An array of Hole objects
  *  @param {Boolean} isFull tells us if this is a full scorecard
  */  
  {
  initialize: function(holes,isFull) {
    this.label = 'Yards:';
    this.isFull = isFull;
    this.isOdd = true;
    this.holes = holes;
    this.isOutSet = false;
    this.counter = 0;
    this.outYards = 0;
    this.inYards = 0;
    this.totalYards = 0;
    this.setElem();
  },
  getValue: function(hole) { 
    this.counter++;
    var yards = Number(hole.ydsOfficial);
    if(this.counter <= 9) { 
      this.outYards += yards;
    }
    else {
      this.inYards += yards;
    }
    this.totalYards += yards;
    return yards;
  },
  getOutTd: function(td) {
    td.appendChild(document.createTextNode(this.outYards));
    td.style.fontWeight = 'bold';
    return td;
  },
  getInTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode(this.inYards));
    td.style.fontWeight = 'bold';
    return td;
  },
  getTotalTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode(this.totalYards));
    td.style.fontWeight = 'bold';
    return td;
  }
});

var ScorecardTrStroke = Class.create(ScorecardTr,
  /**
  *  @name ScorecardTrStroke
  *  @class Responsible for creating Stroke tr html elements
  *  @lends ScorecardTrStroke.prototype
  *  @extends ScorecardTr
  *  @param {Array} holes An array of Hole objects
  *  @param {String} roundNumber Tells us what round this is for
  *  @param {Boolean} isFull tells us if this is a full scorecard
  */    
  {
  initialize: function(holes, roundNumber, isFull) {
    this.label = 'R' + roundNumber + ':';
    this.isFull = isFull;
    this.isOdd = false;
    this.holes = holes;
    this.isOutSet = false;
    this.counter = 0;
    this.outStroke = 0;
    this.inStroke = 0;
    this.totalStroke = 0;
    this.setElem();
  },
  getValue: function(hole) {
    this.counter++;
    var stroke = Number(hole.Score);
  //  if(stroke == '') {
    //  stroke = Number(hole.Par) + Number(hole.RParRel);
  //  }
    if(this.counter <= 9) { 
      this.outStroke += stroke;
    }
    else {
      this.inStroke += stroke;
    }
    
    this.totalStroke += stroke;
       
    return (stroke == 0 )  ? '' : stroke; 
  },
  setTdClassName: function(td, hole) {
    var score = hole.Score;
    var diff = 0;
    //if(score == '') {
    //  score = Number(hole.Par) + Number(hole.RParRel);
    //}
    if(score) { diff = score - hole.Par; }
    switch(diff) {
      case -1:
        td.className = 'birdiesColor';
        return td;
      case -2:
        td.className = 'eaglesColor';
        return td;
      case 1:
        td.className = 'bogeysColor';
        return td;
      case 2:
      case 3:
      case 4:
      case 5:
        td.className = 'doubleBogeysColor';
        return td;
      default:
        return td;
    }
  },
  getOutTd: function(td) {
    td.appendChild(document.createTextNode((this.outStroke == 0) ? '' : this.outStroke));
    td.style.fontWeight = 'bold';
    return td;
  },
  getInTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode((this.inStroke == 0) ? '' : this.inStroke));
    td.style.fontWeight = 'bold';
    return td;
  },
  getTotalTd: function() {
    var td = document.createElement('td');
    td.appendChild(document.createTextNode((this.totalStroke == 0) ? '' : this.totalStroke));
    td.style.fontWeight = 'bold';
    return td;
  }
});

var ScorecardFull = Class.create(Scorecard, 
  /**
  *  @name ScorecardFull
  *  @class Responsible for creating full scorecards
  *  @lends ScorecardFull.prototype
  *  @extends Scorecard
  *  @param {PlayerDetailElement} playerDetail
  */    
  {
  initialize: function(playerDetail) {
    this.playerDetail = playerDetail;
    this.outerTdColspan = '15';
    this.headshotRowspan = 6 + Number(Tourn.CurRnd);
    this.l1colspan = '15';
    this.l2colspan = '7';
    this.scorecardToggleLink = 'View Last Round Scorecard';
    this.elem = document.createElement('tr');
    this.elem.appendChild(this.getOuterTd(true));
  },
  appendScorecardTrStroke: function(tbody){
    if(this.playerDetail.playerRounds.length) {
      var playerRounds = this.playerDetail.playerRounds;
      if(playerRounds.first().Num != 1) {
        playerRounds.reverse();
      }
      for(var i=0,len=playerRounds.length;i<len;++i){
        tbody.appendChild(new ScorecardTrStroke(playerRounds[i].Hole,i+1,true).elem);
      }
    }
    else {
      tbody.appendChild(new ScorecardTrStroke(this.playerDetail.playerRounds.Hole,1,true).elem);
    }
    return tbody;
  },
  bindScorecardToggle: function(a) {
    Event.observe(a, 'click', this.playerDetail.showRecentScorecard.bind(this.playerDetail));
    return a;
  }
});

var ScorecardLegend = Class.create(
  /**
  *  @name ScorecardLegend
  *  @class Responsible for creating the legend table
  *  @lends ScorecardLegend.prototype
  *  @param {PlayerDetailElement} playerDetailElement
  */   
  {
  initialize: function(playerDetailElement) {
    /**  */
    this.playerDetailElement = playerDetailElement;
    /** */
    this.elem = this.getScorecardLegend();
  },
  /** */
  getScorecardLegend: function() {
    var table = document.createElement('table');
    table.className = 'legend';
    var tbody = document.createElement('tbody');
    var tr = this.getLegendTr();
    var td = document.createElement('td');
    td.className = 'close';
    td.appendChild(this.getCloseScorecardLink());
    tr.appendChild(td);
    tbody.appendChild(tr);
    table.appendChild(tbody);
    return table;
  },
  /** */
  getLegendTr: function() {
    var tr = document.createElement('tr');
    tr.appendChild(this.getLegendLabelTd('label', 'Scorecard: '));
    tr = this.appendLegendTds(tr, 'eaglesLegend', 'eaglesLabel', 'Eagles');
    tr = this.appendLegendTds(tr, 'birdiesLegend', 'birdiesLabel', 'Birdies');
    tr = this.appendLegendTds(tr, 'parLegend', 'parLabel', 'Par');
    tr = this.appendLegendTds(tr, 'bogeysLegend', 'bogeysLabel', 'Bogeys');
    tr = this.appendLegendTds(tr, 'doubleBogeysLegend', '', 'Double Bogeys');
    return tr;
  },
  /** */
  appendLegendTds: function(tr, legendClass, labelClass, labelText) {
    tr.appendChild(this.getLegendTd(legendClass));
    tr.appendChild(this.getLegendLabelTd(labelClass, labelText));
    return tr;
  },
  /** */
  getLegendTd: function(legendClass) {
    var td = document.createElement('td');
    var div = document.createElement('div');
    div.className = legendClass;
    td.appendChild(div);
    return td;
  },
  /** */
  getLegendLabelTd: function(labelClass, labelText) {
    var td = document.createElement('td');
    td.className = labelClass;
    td.appendChild(document.createTextNode(labelText));
    return td;
  },
  /** */
  getCloseScorecardLink: function() {
    var a = document.createElement('a');
    a.href = 'javascript:void(0);';
    a.innerHTML = 'Close scorecard <span>^</span>';
    Event.observe(a, 'click', this.playerDetailElement.closeScorecard.bind(this.playerDetailElement));
    return a;
  }
});

var Sorter = Class.create(
  /**
  *  @name Sorter
  *  @class Responsible for all sort functionality
  *  @lends Sorter.prototype
  */    
  {
  initialize:function() {
    this.containerId = '';
    this._init();
  },
  /** @ignore */
  _init: function() {
    /** */
    this.main = null;
    /** */
    this.container = null;
    /** */
    this.children = null;
    /** */
    this.positionReversed = false;
    /** */
    this.firstNameReversed = true;
    /** */
    this.lastNameReversed = true;
    /** */
    this.todayReversed = true;
    /** */
    this.thruReversed = true;
    /** */
    this.totalReversed = true;
    /** */
    this.tourTotalReversed = true;  
  },
  /** */
  doSort:function(sortFunction, isReversed) {
    this.children = $A(this.container.childNodes);
    this.children.sort(sortFunction);
    if(!isReversed) {this.children.reverse();}
    var div = document.createElement('div');
    div.id = this.containerId;
    for(var i = 0, len = this.children.length, c = 1; i < len; i++, c++) {
		  this.children[i].firstChild.firstChild.firstChild.className = ((c % 2) == 1) ? 'oddRow' : 'evenRow';
		  div.appendChild(this.children[i]);
    }
    this.main.removeChild(this.container);
    this.main.appendChild(div);
    this.container = div;
  },
  /** */
  setDomProperties:function() {
    this.main = $('playerInfoPanels');
    this.container = this.main.down();
  },
  /** */
  sortListener: function(event) {
    var elem = event.element();
	/* Removes the LB ad component after the tenth position before re-sort to prevent sort malfunctions. */
	var restore = removeLBAdRow();
    if(elem.innerHTML.indexOf('POS') != -1) {
      this.doSort(this.sortByPosition, this.positionReversed);
      this.positionReversed = (this.positionReversed) ? false : true;
    }
    else if(elem.innerHTML.indexOf('First') != -1) {
      this.doSort(this.sortByFirstName, this.firstNameReversed);
      this.firstNameReversed = (this.firstNameReversed) ? false : true;
    }
    else if(elem.innerHTML.indexOf('Last') != -1) {
      this.doSort(this.sortByLastName, this.lastNameReversed);
      this.lastNameReversed = (this.lastNameReversed) ? false : true;
    }
    else if(elem.innerHTML.indexOf('Today') != -1) {
      this.doSort(this.sortByToday, this.todayReversed);
      this.todayReversed = (this.todayReversed) ? false : true;
    }
    else if(elem.innerHTML.indexOf('Thru') != -1) {
      this.doSort(this.sortByThru, this.thruReversed);
      this.thruReversed = (this.thruReversed) ? false : true;
    }
    else if(elem.innerHTML.indexOf('Total') != -1) {
      this.doSort(this.sortByTotal, this.totalReversed);
      this.totalReversed = (this.totalReversed) ? false : true;
    }
    else if(elem.innerHTML.indexOf('TOTAL') != -1) {
      this.doSort(this.sortByTourTotal, this.tourTotalReversed);
      this.tourTotalReversed = (this.tourTotalReversed) ? false : true;
    }
	new Insertion.After($('playerInfoPanels').select('[class="panel"]')[9], new insertLBAdRow("sort"));	
	$('lb-ad').update(restore);
	$('lb-ad').innerHTML;
  },
  /** */
  sortByPosition:function(a,b) {
    var aTd = a.getElementsByTagName('td')[1].innerHTML;
    var bTd = b.getElementsByTagName('td')[1].innerHTML;
    var aNum = null, bNum = null;
    if(aTd.indexOf('T') != -1) {aNum = Number(aTd.replace(/T/, ''));}
    else {aNum = Number(aTd);}
    if(bTd.indexOf('T') != -1) {bNum = Number(bTd.replace(/T/, ''));}
    else {bNum = Number(bTd);}
    if(isNaN(aNum) && !isNaN(bNum)) {return 1;}
    else if(!isNaN(aNum) && isNaN(bNum)) {return -1;}
    if(aNum > bNum) {return 1;}
    else if(aNum < bNum) {return -1;}
    else {return 0;}
  },
  /** */
  sortByFirstName:function(a,b) {
	   if(Tourn.TourCode !== "L" && Tourn.TourCode !== "E" ){
			var aFirst = a.getElementsByTagName('a')[0].innerHTML.match(/^(.*) .*$/)[1];
			var bFirst = b.getElementsByTagName('a')[0].innerHTML.match(/^(.*) .*$/)[1];
	   }
	   else {
			var aFirst = a.getElementsByTagName('b')[0].innerHTML.match(/^(.*) .*$/)[1];
			var bFirst = b.getElementsByTagName('b')[0].innerHTML.match(/^(.*) .*$/)[1];
	   }
    if(aFirst < bFirst) {return -1;}
    else if(aFirst > bFirst) {return 1;}
    else {return 0;}    
  },
  sortByLastName:function(a,b) {
	  
	   if(Tourn.TourCode !== "L" && Tourn.TourCode !== "E" ){
			var aFirst = a.getElementsByTagName('a')[0].innerHTML.match(/^.* (.*)$/)[1];
			var bFirst = b.getElementsByTagName('a')[0].innerHTML.match(/^.* (.*)$/)[1];
	   }
	   else {
			var aFirst = a.getElementsByTagName('b')[0].innerHTML.match(/^.* (.*)$/)[1];
			var bFirst = b.getElementsByTagName('b')[0].innerHTML.match(/^.* (.*)$/)[1];
	   }
    if(aFirst < bFirst) {return -1;}
    else if(aFirst > bFirst) {return 1;}
    else {return 0;}
  },
  /** */
  sortByToday:function(a,b) {
    var aTd = a.getElementsByTagName('td')[4].innerHTML;
    var bTd = b.getElementsByTagName('td')[4].innerHTML;
    var aNum = null;
    var bNum = null;
    aNum = (!isNaN(aTd)) ? Number(aTd) : aTd;
    bNum = (!isNaN(bTd)) ? Number(bTd) : bTd;
    if(aNum == 0) {aNum = 'zzzz';}
    if(bNum == 0) {bNum = 'zzzz';}
    if(aTd == 'E') {aNum = 0;}
    if(bTd == 'E') {bNum = 0;}
    if(isNaN(aNum) && !isNaN(bNum)) {return 1;}
        else if(!isNaN(aNum) && isNaN(bNum)) {return -1;}
    if(aNum < bNum) {return -1;}
        else if(aNum > bNum) {return 1;}
        else {return 0;}
  },
  /** */
  sortByThru: function(a,b) {
    var aTd = a.getElementsByTagName('td')[5].innerHTML;
    var bTd = b.getElementsByTagName('td')[5].innerHTML;
    var aNum = Number(aTd);
    var bNum = Number(bTd);
    
    if(isNaN(aNum) && !isNaN(bNum)) { return 1; }
      else if(!isNaN(aNum) && isNaN(bNum)) { return -1; }
      else if(isNaN(aNum) && isNaN(bNum)) { return 0; }
      else if(aNum < bNum) {return -1;}  
      else if(aNum > bNum) {return 1;}
      else {return 0;}
  },
  /** */
  sortByTotal: function(a,b) {
    var aTd = a.getElementsByTagName('td')[6].innerHTML;
    var bTd = b.getElementsByTagName('td')[6].innerHTML;
    var aNum = null;
    var bNum = null;
    aNum = (!isNaN(aTd)) ? Number(aTd) : aTd;
    bNum = (!isNaN(bTd)) ? Number(bTd) : bTd;
    if(aNum == 0) {aNum = 'zzzz';}
    if(bNum == 0) {bNum = 'zzzz';}
    if(aTd == 'E') {aNum = 0;}
    if(bTd == 'E') {bNum = 0;}
    if(isNaN(aNum) && !isNaN(bNum)) {return 1;}
        else if(!isNaN(aNum) && isNaN(bNum)) {return -1;}
    if(aNum < bNum) {return -1;}
        else if(aNum > bNum) {return 1;}
        else {return 0;}    
  },
  /** */
  sortByTourTotal: function(a,b) {
	var aTd = $(a).select('td[class="tourTotalColumn"]')[0].innerHTML;//$(a).getElementsByClassName('tourTotalColumn')[0].innerHTML;
	var bTd = $(b).select('td[class="tourTotalColumn"]')[0].innerHTML;//$(b).getElementsByClassName('tourTotalColumn')[0].innerHTML;
    var aNum = Number(aTd);
    var bNum = Number(bTd);
    if(aNum < bNum) {return -1;}
        else if(aNum > bNum) {return 1;}
        else {return 0;}
  }
});

var CustomizedSorter = Class.create(Sorter,
  /**
  *  @name CustomizedSorter
  *  @class Responsible for all sort functionality for the Customized Leaderboard
  *  @lends CustomizedSorter.prototype
  *  @extends Sorter
  */    
  {
  initialize: function() {
    /** */
    this.containerId = 'cLeaderboardColumnContent';
    this._init();
  },
  setDomProperties:function() {
    this.main = $('customizedLeaderboard');
    this.container = $(this.containerId);
  }
});