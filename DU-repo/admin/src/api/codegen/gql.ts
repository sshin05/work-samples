/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n    query FindAllAffiliates {\n      findAllAffiliates {\n        id\n        name\n      }\n    }\n  ": types.FindAllAffiliatesDocument,
    "\n    mutation CreateManualAssessment($assessment: AssessmentInput!) {\n      createManualAssessment(assessment: $assessment) {\n        id\n        vendorId\n        vendorAssessmentId\n        vendorName\n        assessmentTitle\n        assessmentDescription\n        assessmentUrl\n        assessmentImage\n        source\n      }\n    }\n  ": types.CreateManualAssessmentDocument,
    "\n    query FindAssessmentsBySource($source: String!) {\n      findAssessmentsBySource(source: $source) {\n        id\n        assessmentTitle\n        assessmentDescription\n        assessmentImage\n        dateUpdated\n        vendorName\n      }\n    }\n  ": types.FindAssessmentsBySourceDocument,
    "\n    query findLearnerAssessments($userId: ID!, $missionPartnerId: ID) {\n      findAssessmentsByUserId(\n        userId: $userId\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        assessmentTitle\n        vendorName\n        vendorAssessmentId\n        vendorId\n        startedAt\n        markedCompletedAt\n        status\n      }\n    }\n  ": types.FindLearnerAssessmentsDocument,
    "\n    query GetAssessmentById($id: ID!) {\n      getAssessmentById(id: $id) {\n        id\n        assessmentTitle\n        assessmentDescription\n        assessmentImage\n        assessmentUrl\n        durationInMinutes\n        dateUpdated\n        vendorName\n        vendorAssessmentId\n        vendorId\n      }\n    }\n  ": types.GetAssessmentByIdDocument,
    "\n    mutation UpdateAssessment($assessment: AssessmentInput!) {\n      updateAssessment(assessment: $assessment) {\n        id\n        vendorId\n        vendorAssessmentId\n        vendorName\n        assessmentTitle\n        assessmentDescription\n        assessmentUrl\n        assessmentImage\n        source\n      }\n    }\n  ": types.UpdateAssessmentDocument,
    "\n    mutation ExportBadges(\n      $ownerId: String\n      $missionPartnerId: String\n      $badgeId: String\n    ) {\n      exportBadges(\n        ownerId: $ownerId\n        missionPartnerId: $missionPartnerId\n        badgeId: $badgeId\n      )\n    }\n  ": types.ExportBadgesDocument,
    "\n    query GetAllAwardedBadgesByMissionPartnerMembership(\n      $missionPartnerId: ID!\n    ) {\n      getAllAwardedBadgesByMissionPartnerMembership(\n        missionPartnerId: $missionPartnerId\n      ) {\n        id: badgeId\n        imageUrl: badgeImage\n        title: badgeTitle\n        missionPartnerId\n        missionPartnerCount: missionPartnerMembersAwarded\n      }\n    }\n  ": types.GetAllAwardedBadgesByMissionPartnerMembershipDocument,
    "\n    query GetMissionPartnerOwnedBadges($missionPartnerId: ID!) {\n      getMissionPartnerOwnedBadges(missionPartnerId: $missionPartnerId) {\n        id: badgeId\n        imageUrl: badgeImage\n        title: badgeTitle\n        missionPartnerId\n        count: totalAwarded\n        missionPartnerCount: missionPartnerMembersAwarded\n      }\n    }\n  ": types.GetMissionPartnerOwnedBadgesDocument,
    "\n    query FindCatalogResults(\n      $search: String!\n      $searchAfter: [String]\n      $page: Int\n      $pageSize: Int\n      $type: String\n      $vendorId: String\n      $planType: String\n      $excludeCustomContent: Boolean\n      $missionPartnerId: String\n    ) {\n      findCatalogResults(\n        search: $search\n        searchAfter: $searchAfter\n        page: $page\n        pageSize: $pageSize\n        type: $type\n        vendorId: $vendorId\n        planType: $planType\n        excludeCustomContent: $excludeCustomContent\n        missionPartnerId: $missionPartnerId\n      ) {\n        hits {\n          __typename\n          ... on Course {\n            id\n            vendorId\n            vendorCourseId\n            vendorName\n            courseDescription\n            courseDuration\n            courseTitle\n            courseUrl\n            status\n            source\n            averageRating\n            totalReviews\n          }\n          ... on Assessment {\n            id\n            vendorId\n            vendorAssessmentId\n            vendorName\n            assessmentTitle\n            assessmentDescription\n            assessmentUrl\n            assessmentImage\n            durationInMinutes\n            source\n          }\n          ... on LearningPath {\n            id\n            title\n            schoolId\n            content {\n              description\n              summary\n            }\n            version\n            vendors\n            totalItems\n            totalDuration\n            enrolledLearners\n            averageRating\n            totalReviews\n          }\n          ... on ForceMultiplier {\n            id\n            version\n            title\n            fmStatus: status\n            learningPathUri\n            totalDuration\n            unsequenced\n            content {\n              description\n              summary\n            }\n            type\n            totalDuration\n            vendors\n            averageRating\n            totalReviews\n          }\n          ... on Skill {\n            id\n            title\n            content {\n              summary\n              description\n            }\n            vendors\n            version\n            totalItems\n            totalDuration\n            enrolledLearners\n          }\n          ... on Survey {\n            id\n            name\n            description\n            durationInMinutes\n            missionPartnerId\n            status\n          }\n          ... on Lab {\n            id\n            name\n            description\n            durationInMinutes\n            missionPartnerId\n            missionPartner {\n              name\n            }\n            status\n            instructions {\n              id\n              title\n              type\n            }\n            averageRating\n            totalReviews\n          }\n        }\n        searchAfter\n        total\n      }\n    }\n  ": types.FindCatalogResultsDocument,
    "\n    query FindContentById($id: ID!) {\n      findContentById(id: $id) {\n        id\n        content\n      }\n    }\n  ": types.FindContentByIdDocument,
    "\n    mutation deleteBanner {\n      deleteBanner\n    }\n  ": types.DeleteBannerDocument,
    "\n    mutation deleteAlertBanner {\n      deleteAlertBanner\n    }\n  ": types.DeleteAlertBannerDocument,
    "\n    mutation updateGlobalBanner(\n      $title: String\n      $content: String!\n      $isDismissable: Boolean!\n    ) {\n      updateAlertBanner(\n        title: $title\n        content: $content\n        isDismissable: $isDismissable\n      ) {\n        id\n        content {\n          title\n          content\n          isDismissable\n        }\n      }\n    }\n  ": types.UpdateGlobalBannerDocument,
    "\n    mutation updateBanner(\n      $title: String!\n      $body: String!\n      $buttonText: String!\n      $buttonLink: String!\n      $logo: Upload!\n    ) {\n      updateBanner(\n        title: $title\n        body: $body\n        buttonText: $buttonText\n        buttonLink: $buttonLink\n        logo: $logo\n      ) {\n        id\n        content {\n          title\n          body\n          buttonText\n          buttonLink\n          logo\n        }\n      }\n    }\n  ": types.UpdateBannerDocument,
    "\n  query FindCourseById($id: ID!) {\n    findCourseById(id: $id) {\n      id\n      courseTitle\n      courseDescription\n      courseDuration\n      courseImage\n      dateUpdated\n      courseUrl\n      vendorName\n      vendorCourseId\n      vendorId\n      source\n    }\n  }\n": types.FindCourseByIdDocument,
    "\n    query AggregateTrainingPlanVersions(\n      $planType: String!\n      $planSourceId: String!\n    ) {\n      aggregateTrainingPlanVersions(\n        planType: $planType\n        planSourceId: $planSourceId\n      ) {\n        versions\n        versionEnabled\n      }\n    }\n  ": types.AggregateTrainingPlanVersionsDocument,
    "\n    query AggregateTranscriptCourses(\n      $missionPartnerId: String\n      $vendorId: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: Int\n      $pageNumber: Int\n    ) {\n      aggregateTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        count\n        data {\n          courseId\n          courseTitle\n          vendorName\n          total\n          started\n          stopped\n          pendingReview\n          markedCompleted\n          completed\n        }\n      }\n    }\n  ": types.AggregateTranscriptCoursesDocument,
    "\n    query AggregateTranscriptItemsForTrainingPlan(\n      $missionPartnerId: String\n      $groupId: String\n      $planType: String!\n      $planSourceId: String!\n      $planVersion: String\n    ) {\n      aggregateTranscriptItemsForTrainingPlan(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planType: $planType\n        planSourceId: $planSourceId\n        planVersion: $planVersion\n      ) {\n        itemId\n        itemTitle\n        vendorName\n        total\n        started\n        stopped\n        pendingReview\n        markedCompleted\n        completed\n      }\n    }\n  ": types.AggregateTranscriptItemsForTrainingPlanDocument,
    "\n    mutation CreateAdminManagedCourse($course: CourseInput!) {\n      createAdminManagedCourse(course: $course) {\n        id\n        vendorId\n        vendorCourseId\n        vendorName\n        courseDescription\n        courseDuration\n        courseTitle\n        courseUrl\n      }\n    }\n  ": types.CreateAdminManagedCourseDocument,
    "\n    query findCoursesBySource($source: String!) {\n      findCoursesBySource(source: $source) {\n        data {\n          id\n          courseTitle\n          courseDescription\n          vendorName\n          vendorCourseId\n        }\n        total\n      }\n    }\n  ": types.FindCoursesBySourceDocument,
    "\n    query FindTranscriptCourses(\n      $missionPartnerId: String\n      $groupId: String\n      $courseId: String\n      $planType: String\n      $planSourceId: String\n      $status: String\n      $userSearch: String\n      $courseTitleSearch: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: Int\n      $pageNumber: Int\n      $branch: String\n    ) {\n      findTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        courseId: $courseId\n        planType: $planType\n        planSourceId: $planSourceId\n        status: $status\n        userSearch: $userSearch\n        courseTitleSearch: $courseTitleSearch\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        branch: $branch\n      ) {\n        count\n        data {\n          userId\n          courseId\n          status\n          startedAt\n          stoppedAt\n          pendingReviewAt\n          markedCompletedAt\n          completedAt\n          course {\n            id\n            courseTitle\n            vendorId\n            vendorCourseId\n          }\n          user {\n            id\n            email\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n  ": types.FindTranscriptCoursesDocument,
    "\n    query findTranscriptCoursesByUserId($userId: ID!) {\n      findTranscriptCoursesByUserId(userId: $userId) {\n        data {\n          id\n          courseTitle\n          courseDescription\n          courseDuration\n          courseImage\n          dateUpdated\n          courseUrl\n          startedAt\n          markedCompletedAt\n          completedAt\n          vendorName\n          status\n        }\n        total\n      }\n    }\n  ": types.FindTranscriptCoursesByUserIdDocument,
    "\n    query getMetricsByGroupIdCourseId($groupId: String!, $courseId: String!) {\n      getMetricsByGroupIdCourseId(groupId: $groupId, courseId: $courseId) {\n        startedAt\n        completedAt\n        status\n        user {\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  ": types.GetMetricsByGroupIdCourseIdDocument,
    "\n    query GetVendorsForAggregateTranscriptCourses($missionPartnerId: String) {\n      getVendorsForAggregateTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n      ) {\n        vendorName\n        vendorId\n      }\n    }\n  ": types.GetVendorsForAggregateTranscriptCoursesDocument,
    "\n    mutation startIndividualCourseById($id: ID!) {\n      startIndividualCourseById(id: $id) {\n        id\n        courseTitle\n        courseDescription\n        courseDuration\n        courseImage\n        dateUpdated\n        courseUrl\n      }\n    }\n  ": types.StartIndividualCourseByIdDocument,
    "\n    mutation stopIndividualCourseById($id: ID!) {\n      stopIndividualCourseById(id: $id) {\n        id\n        courseTitle\n        courseDescription\n        courseDuration\n        courseImage\n        dateUpdated\n        courseUrl\n      }\n    }\n  ": types.StopIndividualCourseByIdDocument,
    "\n    mutation UpdateAdminManagedCourse($course: CourseInput!) {\n      updateAdminManagedCourse(course: $course) {\n        id\n        vendorId\n        vendorCourseId\n        vendorName\n        courseDescription\n        courseDuration\n        courseTitle\n        courseUrl\n      }\n    }\n  ": types.UpdateAdminManagedCourseDocument,
    "\n    mutation AssociateDomainToKsat($ksatId: ID!, $domainId: ID!) {\n      associateDomainToKsat(ksatId: $ksatId, domainId: $domainId)\n    }\n  ": types.AssociateDomainToKsatDocument,
    "\n    mutation AssociateJobRolesToKsat($ksatId: ID!, $jobRoleIds: [ID!]!) {\n      associateJobRolesToKsat(ksatId: $ksatId, jobRoleIds: $jobRoleIds)\n    }\n  ": types.AssociateJobRolesToKsatDocument,
    "\n    mutation AssociateLearningObjectivesToKsat(\n      $ksatId: ID!\n      $learningObjectiveIds: [ID!]!\n    ) {\n      associateLearningObjectivesToKsat(\n        ksatId: $ksatId\n        learningObjectiveIds: $learningObjectiveIds\n      )\n    }\n  ": types.AssociateLearningObjectivesToKsatDocument,
    "\n    mutation CreateDomain($input: CreateDomainInput!) {\n      createDomain(input: $input) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  ": types.CreateDomainDocument,
    "\n    query FindDomains(\n      $filter: DomainFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortByMostRelevant: SortByMostRelevant\n      $sortDirection: SortDirection\n      $sortBy: DomainSortBy\n    ) {\n      findDomains(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortByMostRelevant: $sortByMostRelevant\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          name\n          shortDescription\n          description\n        }\n        total\n      }\n    }\n  ": types.FindDomainsDocument,
    "\n    query FindDomainsLazy(\n      $filter: DomainFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortByMostRelevant: SortByMostRelevant\n      $sortDirection: SortDirection\n      $sortBy: DomainSortBy\n    ) {\n      findDomains(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortByMostRelevant: $sortByMostRelevant\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          name\n          shortDescription\n          description\n        }\n        total\n      }\n    }\n  ": types.FindDomainsLazyDocument,
    "\n    query GetDomain($getDomainId: ID!) {\n      getDomain(id: $getDomainId) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  ": types.GetDomainDocument,
    "\n    mutation UpdateDomain($updateDomainId: ID!, $input: UpdateDomainInput!) {\n      updateDomain(id: $updateDomainId, input: $input) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  ": types.UpdateDomainDocument,
    "\n    mutation CreateKsat($input: CreateKsatInput!) {\n      createKsat(input: $input) {\n        code\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n        id\n        ksatType\n      }\n    }\n  ": types.CreateKsatDocument,
    "\n    query FindKsats($filter: KsatFilter, $pageSize: Int, $pageNumber: Int, $sortDirection: SortDirection, $sortBy: KsatSortBy) {\n      findKsats(filter: $filter, pageSize: $pageSize, pageNumber: $pageNumber, sortDirection: $sortDirection, sortBy: $sortBy) {\n        total\n        data {\n          ksatType\n          id\n          domain {\n            description\n            id\n            name\n            shortDescription\n          }\n          code\n          description\n        }\n      }\n    }\n  ": types.FindKsatsDocument,
    "\n    query GetKsat($getKsatId: ID!) {\n      getKsat(id: $getKsatId) {\n        id\n        code\n        ksatType\n        description\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n      }\n    }\n  ": types.GetKsatDocument,
    "\n    mutation UpdateKsat($updateKsatId: ID!, $input: UpdateKsatInput!) {\n      updateKsat(id: $updateKsatId, input: $input) {\n        id\n        code\n        ksatType\n        description\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n      }\n    }\n  ": types.UpdateKsatDocument,
    "\n    mutation CreateLearningObjective($input: CreateLearningObjectiveInput!) {\n      createLearningObjective(input: $input) {\n        id\n        description\n      }\n    }\n  ": types.CreateLearningObjectiveDocument,
    "\n    query FindLearningObjectives(\n      $filter: LearningObjectiveFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortDirection: SortDirection\n      $sortBy: LearningObjectiveSortBy\n    ) {\n      findLearningObjectives(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          description\n        }\n        total\n      }\n    }\n  ": types.FindLearningObjectivesDocument,
    "\n    query GetLearningObjective($getLearningObjectiveId: ID!) {\n      getLearningObjective(id: $getLearningObjectiveId) {\n        id\n        description\n      }\n    }\n  ": types.GetLearningObjectiveDocument,
    "\n    mutation UpdateLearningObjective(\n      $updateLearningObjectiveId: ID!\n      $input: UpdateLearningObjectiveInput!\n    ) {\n      updateLearningObjective(id: $updateLearningObjectiveId, input: $input) {\n        id\n        description\n      }\n    }\n  ": types.UpdateLearningObjectiveDocument,
    "\n    mutation CreateJobRole($input: CreateJobRoleInput!) {\n      createJobRole(input: $input) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  ": types.CreateJobRoleDocument,
    "\n    query FindJobRoles(\n      $filter: JobRoleFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortDirection: SortDirection\n      $sortBy: JobRoleSortBy\n    ) {\n      findJobRoles(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          roleId\n          name\n          description\n        }\n        total\n      }\n    }\n  ": types.FindJobRolesDocument,
    "\n    query GetJobRole($getJobRoleId: ID!) {\n      getJobRole(id: $getJobRoleId) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  ": types.GetJobRoleDocument,
    "\n    mutation UpdateJobRole($updateJobRoleId: ID!, $input: UpdateJobRoleInput!) {\n      updateJobRole(id: $updateJobRoleId, input: $input) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  ": types.UpdateJobRoleDocument,
    "\n  query GetUserDownloads {\n    getUserDownloads {\n      id\n      userId\n      type\n      requestedAt\n      completedAt\n      title\n      parameters\n      status\n      error\n    }\n  }\n": types.GetUserDownloadsDocument,
    "\n    mutation DeleteDownload($id: ID!) {\n      deleteDownload(id: $id)\n    }\n  ": types.DeleteDownloadDocument,
    "\n    mutation CreateForceMultiplier(\n      $title: String!\n      $summary: String!\n      $missionPartnerId: String\n    ) {\n      createForceMultiplier(\n        title: $title\n        summary: $summary\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        missionPartnerId\n        title\n        status\n        version\n      }\n    }\n  ": types.CreateForceMultiplierDocument,
    "\n    mutation CreateNewForceMultiplierVersion($id: String!) {\n      createNewForceMultiplierVersion(id: $id) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  ": types.CreateNewForceMultiplierVersionDocument,
    "\n    mutation DeleteLibraryItem($input: DeleteLibraryItemInput!) {\n      deleteLibraryItem(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  ": types.DeleteLibraryItemDocument,
    "\n    query FetchForceMultiplierHeaderData($forceMultiplerId: ID!) {\n      findLatestForceMultiplierByIdAdmin(id: $forceMultiplerId) {\n        id\n        title\n        status\n        version\n      }\n    }\n  ": types.FetchForceMultiplierHeaderDataDocument,
    "\n    query FindLatestForceMultiplierById($forceMultiplerId: ID!) {\n      findLatestForceMultiplierById(id: $forceMultiplerId) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        totalDuration\n        unsequenced\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n          item {\n            __typename\n            ... on Course {\n              vendorCourseId\n              vendorName\n              courseTitle\n              courseUrl\n              courseDuration\n              source\n            }\n            ... on Assessment {\n              vendorAssessmentId\n              vendorName\n              assessmentTitle\n              assessmentUrl\n              durationInMinutes\n              source\n            }\n            ... on Survey {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n            ... on Lab {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n          }\n        }\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n        type\n        totalDuration\n      }\n    }\n  ": types.FindLatestForceMultiplierByIdDocument,
    "\n    query FindLatestForceMultiplierByIdAdmin($forceMultiplerId: ID!) {\n      findLatestForceMultiplierByIdAdmin(id: $forceMultiplerId) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        totalDuration\n        unsequenced\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n          item {\n            __typename\n            ... on Course {\n              vendorCourseId\n              vendorName\n              courseTitle\n              courseUrl\n              courseDuration\n              source\n            }\n            ... on Assessment {\n              vendorAssessmentId\n              vendorName\n              assessmentTitle\n              assessmentUrl\n              durationInMinutes\n              source\n            }\n            ... on Survey {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n            ... on Lab {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n          }\n        }\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n        type\n        totalDuration\n      }\n    }\n  ": types.FindLatestForceMultiplierByIdAdminDocument,
    "\n    mutation RemoveItemFromForceMultiplier(\n      $input: RemoveItemFromForceMultiplierInput!\n    ) {\n      removeItemFromForceMultiplier(input: $input) {\n        id\n        version\n        title\n        items {\n          id\n        }\n      }\n    }\n  ": types.RemoveItemFromForceMultiplierDocument,
    "\n    mutation UpdateForceMultiplier($input: ForceMultiplierInput!) {\n      updateForceMultiplier(input: $input) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        libraryItems {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  ": types.UpdateForceMultiplierDocument,
    "\n    mutation UpdateForceMultiplierContent(\n      $input: UpdateForceMultiplierContentInput!\n    ) {\n      updateForceMultiplierContent(input: $input) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  ": types.UpdateForceMultiplierContentDocument,
    "\n    mutation UpdateLibraryItems($input: UpdateLibraryItemsInput!) {\n      updateLibraryItems(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  ": types.UpdateLibraryItemsDocument,
    "\n    mutation UploadForceMultiplierImage($file: Upload!, $id: ID!) {\n      uploadForceMultiplierImage(file: $file, id: $id) {\n        url\n      }\n    }\n  ": types.UploadForceMultiplierImageDocument,
    "\n    mutation UploadLibraryItem($input: UploadLibraryItemInput!) {\n      uploadLibraryItem(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  ": types.UploadLibraryItemDocument,
    "\n    mutation AddCoursesToGroup(\n      $groupId: ID!\n      $courseIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addCoursesToGroup(\n        groupId: $groupId\n        courseIds: $courseIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  ": types.AddCoursesToGroupDocument,
    "\n    mutation AddTrainingPlansToGroup(\n      $groupId: ID!\n      $plans: [AddPlansInput!]!\n      $missionPartnerId: ID!\n    ) {\n      addTrainingPlansToGroup(\n        groupId: $groupId\n        plans: $plans\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  ": types.AddTrainingPlansToGroupDocument,
    "\n    mutation CreateGroup($name: String!, $missionPartnerId: String) {\n      createGroup(name: $name, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        groupMemberCount\n      }\n    }\n  ": types.CreateGroupDocument,
    "\n    mutation DeleteGroup($groupId: ID!) {\n      deleteGroup(groupId: $groupId)\n    }\n  ": types.DeleteGroupDocument,
    "\n    query findGroupById($groupId: ID!) {\n      findGroupById(groupId: $groupId) {\n        id\n        name\n        missionPartnerId\n        missionPartnerName\n        groupMemberCount\n        trainingPlans {\n          planSourceId\n          planType\n          planVersion\n          title\n          isLatestVersion\n        }\n        courses {\n          courseId\n          vendorName\n          courseTitle\n        }\n      }\n    }\n  ": types.FindGroupByIdDocument,
    "\n    query findGroupsByMissionPartnerId($missionPartnerId: ID!) {\n      findGroupsByMissionPartnerId(missionPartnerId: $missionPartnerId) {\n        id\n        name\n        groupMemberCount\n        missionPartnerName\n        missionPartnerId\n        trainingPlans {\n          planSourceId\n          planType\n          planVersion\n          title\n          isLatestVersion\n        }\n        courses {\n          courseId\n          vendorName\n          courseTitle\n        }\n        totalItems\n        CREATED_AT\n        SAVED_AT\n      }\n    }\n  ": types.FindGroupsByMissionPartnerIdDocument,
    "\n    query GetCourseProgress($groupId: ID!) {\n      getCourseProgress(groupId: $groupId) {\n        id\n        title\n        type\n        vendorName\n        notStarted\n        inProgress\n        pendingReview\n        completed\n      }\n    }\n  ": types.GetCourseProgressDocument,
    "\n    fragment coreTrainingPlanProgress on TrainingPlanProgress {\n      id\n      title\n      type\n      source\n      notStarted\n      inProgress\n      pendingReview\n      completed\n      __typename\n    }\n    query GetTrainingPlanProgress(\n      $groupId: ID!\n      $planSourceId: ID!\n      $planType: String!\n      $planVersion: String!\n    ) {\n      getTrainingPlanProgress(\n        groupId: $groupId\n        planSourceId: $planSourceId\n        planType: $planType\n        planVersion: $planVersion\n      ) {\n        ...coreTrainingPlanProgress\n        items {\n          id\n          title\n          type\n          source\n          notStarted\n          inProgress\n          pendingReview\n          completed\n          __typename\n        }\n      }\n    }\n  ": types.CoreTrainingPlanProgressFragmentDoc,
    "\n    mutation UpdateGroup(\n      $groupId: ID!\n      $name: String!\n      $missionPartnerId: String\n    ) {\n      updateGroup(\n        groupId: $groupId\n        name: $name\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        groupMemberCount\n        missionPartnerId\n      }\n    }\n  ": types.UpdateGroupDocument,
    "\n    mutation addHostedCourseProgressItemQuizComment(\n      $hostedCourseId: ID!\n      $lessonId: ID!\n      $userId: ID!\n      $questionId: ID!\n      $comment: String!\n    ) {\n      addHostedCourseProgressItemQuizComment(\n        hostedCourseId: $hostedCourseId\n        lessonId: $lessonId\n        userId: $userId\n        questionId: $questionId\n        comment: $comment\n      ) {\n        userId\n        hostedCourseId\n        items\n      }\n    }\n  ": types.AddHostedCourseProgressItemQuizCommentDocument,
    "\n    query FindHostedCourseProgressById($userId: ID!, $hostedCourseId: ID!) {\n      findHostedCourseProgressById(\n        userId: $userId\n        hostedCourseId: $hostedCourseId\n      ) {\n        completedAt\n        hostedCourseId\n        items\n        startedAt\n        status\n        userId\n      }\n    }\n  ": types.FindHostedCourseProgressByIdDocument,
    "\n    mutation UpdateHostedCourseProgressItemQuizAnswers(\n      $hostedCourseId: ID!\n      $lessonId: ID!\n      $userId: ID!\n      $answers: [JSONObject]!\n    ) {\n      updateHostedCourseProgressItemQuizAnswers(\n        hostedCourseId: $hostedCourseId\n        lessonId: $lessonId\n        userId: $userId\n        answers: $answers\n      ) {\n        completedAt\n        hostedCourseId\n        items\n        startedAt\n        status\n        userId\n      }\n    }\n  ": types.UpdateHostedCourseProgressItemQuizAnswersDocument,
    "\n    mutation AddHostedCourseItem($input: HostedCourseItemInput!) {\n      addHostedCourseItem(input: $input)\n    }\n  ": types.AddHostedCourseItemDocument,
    "\n    mutation CreateHostedCourse($hostedCourseInput: NewHostedCourseInput!) {\n      createHostedCourse(hostedCourseInput: $hostedCourseInput) {\n        id\n        name\n      }\n    }\n  ": types.CreateHostedCourseDocument,
    "\n    query FindHostedCourseById($id: ID!) {\n      findHostedCourseById(id: $id) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n        __typename\n      }\n    }\n  ": types.FindHostedCourseByIdDocument,
    "\n    query FindHostedCourseItem($id: ID!, $itemId: ID!) {\n      findHostedCourseItem(id: $id, itemId: $itemId) {\n        item\n        status\n      }\n    }\n  ": types.FindHostedCourseItemDocument,
    "\n    mutation PublishHostedCourse($id: ID!, $missionPartnerId: ID) {\n      publishHostedCourse(id: $id, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        createdAt\n        updatedAt\n        missionPartnerId\n        description\n        duration\n        items\n        status\n      }\n    }\n  ": types.PublishHostedCourseDocument,
    "\n    mutation UpdateHostedCourse($input: UpdatedHostedCourseInput!) {\n      updateHostedCourse(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n        missionPartnerId\n        description\n        duration\n        items\n        status\n      }\n    }\n  ": types.UpdateHostedCourseDocument,
    "\n    mutation UpdateHostedCourseItem($input: HostedCourseItemInput!) {\n      updateHostedCourseItem(input: $input)\n    }\n  ": types.UpdateHostedCourseItemDocument,
    "\n    mutation UploadHostedCourseImage($file: Upload!, $missionPartnerId: ID) {\n      uploadHostedCourseImage(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        url\n      }\n    }\n  ": types.UploadHostedCourseImageDocument,
    "\n    mutation UploadHostedVideo(\n      $input: HostedVideoInput!\n      $missionPartnerId: ID\n    ) {\n      uploadHostedVideo(input: $input, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n      }\n    }\n  ": types.UploadHostedVideoDocument,
    "\n    mutation UploadOfficeFile($input: OfficeFileInput!, $missionPartnerId: ID) {\n      uploadOfficeFile(input: $input, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n      }\n    }\n  ": types.UploadOfficeFileDocument,
    "\n    mutation addHostedExamProgressComment(\n      $hostedExamId: ID!\n      $userId: ID!\n      $questionId: ID!\n      $comment: String!\n    ) {\n      addHostedExamProgressComment(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        questionId: $questionId\n        comment: $comment\n      ) {\n        userId\n      }\n    }\n  ": types.AddHostedExamProgressCommentDocument,
    "\n    mutation createHostedExamProgress($hostedExamId: ID!) {\n      createHostedExamProgress(hostedExamId: $hostedExamId) {\n        score\n        answers\n        status\n        startedAt\n      }\n    }\n  ": types.CreateHostedExamProgressDocument,
    "\n    query findHostedExamProgressByExamIdUserId(\n      $hostedExamId: ID!\n      $userId: ID\n    ) {\n      findHostedExamProgressByExamIdUserId(\n        hostedExamId: $hostedExamId\n        userId: $userId\n      ) {\n        status\n        score\n        answers\n      }\n    }\n  ": types.FindHostedExamProgressByExamIdUserIdDocument,
    "\n    mutation updateHostedExamProgressAnswers(\n      $hostedExamId: ID!\n      $userId: ID\n      $answers: [JSONObject]!\n    ) {\n      updateHostedExamProgressAnswers(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        answers: $answers\n      ) {\n        score\n        answers\n        status\n        startedAt\n        completedAt\n      }\n    }\n  ": types.UpdateHostedExamProgressAnswersDocument,
    "\n    mutation updateHostedExamProgressStatus(\n      $hostedExamId: ID!\n      $userId: ID\n      $status: String!\n    ) {\n      updateHostedExamProgressStatus(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        status: $status\n      ) {\n        score\n        answers\n        status\n        startedAt\n        completedAt\n      }\n    }\n  ": types.UpdateHostedExamProgressStatusDocument,
    "\n    mutation addHostedExamQuestion(\n      $hostedExamId: ID!\n      $questionInput: JSONObject!\n    ) {\n      addHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionInput: $questionInput\n      )\n    }\n  ": types.AddHostedExamQuestionDocument,
    "\n    mutation addItemsToTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaId: ID!\n      $assignedTrainingInput: [AssignedTrainingInput]!\n    ) {\n      addItemsToTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaId: $trainingCriteriaId\n        assignedTrainingInput: $assignedTrainingInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          maxScore\n          minScore\n          ruleType\n          training {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            requiredLicenses {\n              vendorId\n              vendorName\n            }\n            vendors\n          }\n        }\n      }\n    }\n  ": types.AddItemsToTrainingCriteriaDocument,
    "\n    mutation addTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaInput: AddTrainingCriteriaInput!\n    ) {\n      addTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaInput: $trainingCriteriaInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  ": types.AddTrainingCriteriaDocument,
    "\n    mutation CreateHostedExam($hostedExamInput: NewHostedExamInput!) {\n      createHostedExam(hostedExamInput: $hostedExamInput) {\n        id\n        name\n      }\n    }\n  ": types.CreateHostedExamDocument,
    "\n    mutation deleteTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaId: ID!\n    ) {\n      deleteTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaId: $trainingCriteriaId\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  ": types.DeleteTrainingCriteriaDocument,
    "\n    query FindHostedExamById($hostedExamId: ID!) {\n      findHostedExamById(hostedExamId: $hostedExamId) {\n        id\n        name\n        description\n        durationInMinutes\n        missionPartnerId\n        createdAt\n        updatedAt\n        questions\n        status\n        maxAttempts\n        passingScore\n        trainingCriteria {\n          id\n          maxScore\n          minScore\n          ruleType\n          training {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            requiredLicenses {\n              vendorId\n              vendorName\n            }\n            vendors\n          }\n        }\n        __typename\n      }\n    }\n  ": types.FindHostedExamByIdDocument,
    "\n    mutation PublishHostedExam($hostedExamId: ID!) {\n      publishHostedExam(hostedExamId: $hostedExamId) {\n        id\n        name\n        createdAt\n        missionPartnerId\n        description\n        durationInMinutes\n        questions\n        maxAttempts\n        passingScore\n      }\n    }\n  ": types.PublishHostedExamDocument,
    "\n    mutation removeHostedExamQuestion($hostedExamId: ID!, $questionId: ID!) {\n      removeHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionId: $questionId\n      )\n    }\n  ": types.RemoveHostedExamQuestionDocument,
    "\n    mutation UpdateHostedExam($hostedExamInput: UpdatedHostedExamInput!) {\n      updateHostedExam(hostedExamInput: $hostedExamInput) {\n        id\n        name\n        createdAt\n        missionPartnerId\n        description\n        durationInMinutes\n        questions\n        maxAttempts\n        passingScore\n      }\n    }\n  ": types.UpdateHostedExamDocument,
    "\n    mutation updateHostedExamQuestion(\n      $hostedExamId: ID!\n      $questionInput: JSONObject!\n    ) {\n      updateHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionInput: $questionInput\n      )\n    }\n  ": types.UpdateHostedExamQuestionDocument,
    "\n    mutation updateTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaInput: TrainingCriteriaInput!\n    ) {\n      updateTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaInput: $trainingCriteriaInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  ": types.UpdateTrainingCriteriaDocument,
    "\n    mutation CreateHostedScorm($hostedScormInput: NewHostedScormInput!) {\n      createHostedScorm(input: $hostedScormInput) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  ": types.CreateHostedScormDocument,
    "\n    query FindHostedScormById($id: ID!) {\n      findHostedScormById(id: $id) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  ": types.FindHostedScormByIdDocument,
    "\n    mutation PublishHostedScorm($id: ID!, $missionPartnerId: ID) {\n      publishHostedScorm(id: $id, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        missionPartnerId\n        description\n        status\n        scormFilename\n        scormUrl\n      }\n    }\n  ": types.PublishHostedScormDocument,
    "\n    mutation UpdateHostedScorm($hostedScormInput: UpdatedHostedScormInput!) {\n      updateHostedScorm(input: $hostedScormInput) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  ": types.UpdateHostedScormDocument,
    "\n    mutation UploadHostedScormPackage(\n      $packageInput: HostedScormPackageInput!\n      $missionPartnerId: ID\n    ) {\n      uploadHostedScormPackage(\n        input: $packageInput\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  ": types.UploadHostedScormPackageDocument,
    "\n    mutation AddLabsToUser($userId: ID!, $labIds: [ID!]!) {\n      addLabsToUser(userId: $userId, labIds: $labIds)\n    }\n  ": types.AddLabsToUserDocument,
    "\n    mutation CreateLab($input: NewLabInput!) {\n      createLab(input: $input) {\n        id\n      }\n    }\n  ": types.CreateLabDocument,
    "\n    mutation DeleteLab($labId: ID!) {\n      deleteLab(labId: $labId)\n    }\n  ": types.DeleteLabDocument,
    "\n    query FindLabAndInfoById($labId: ID!) {\n      findLabById(labId: $labId) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n      }\n\n      fetchRelevantLabInformation(labId: $labId) {\n        coreConcepts {\n          href\n          id\n          itemType\n          source\n          title\n        }\n        relevantLearningPaths {\n          id\n          itemType\n          schoolId\n          title\n          version\n        }\n      }\n    }\n  ": types.FindLabAndInfoByIdDocument,
    "\n    query FindLabById($labId: ID!) {\n      findLabById(labId: $labId) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  ": types.FindLabByIdDocument,
    "\n    query FindTranscriptLabsByUserId($userId: ID!) {\n      findTranscriptLabsByUserId(userId: $userId) {\n        lab {\n          id\n          name\n          description\n          previewImageUrl\n          launchConfig {\n            type\n            path\n          }\n          durationInMinutes\n          type\n          status\n          createdAt\n          updatedAt\n        }\n        progress {\n          userId\n          labId\n          status\n          startedAt\n          markedCompletedAt\n        }\n      }\n    }\n  ": types.FindTranscriptLabsByUserIdDocument,
    "\n    mutation UpdateLab($input: UpdatedLabInput!) {\n      updateLab(input: $input) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  ": types.UpdateLabDocument,
    "\n    mutation UploadPreviewImage($labId: ID!, $file: Upload!) {\n      uploadPreviewImage(labId: $labId, file: $file) {\n        id\n        previewImageUrl\n      }\n    }\n  ": types.UploadPreviewImageDocument,
    "\n    mutation UploadTextInstructionImage($labId: ID!, $file: Upload!) {\n      uploadTextInstructionImage(labId: $labId, file: $file) {\n        url\n      }\n    }\n  ": types.UploadTextInstructionImageDocument,
    "\n    mutation UploadVideoInstruction(\n      $labId: ID!\n      $labInstructionId: ID!\n      $file: Upload!\n    ) {\n      uploadVideoInstruction(\n        labId: $labId\n        labInstructionId: $labInstructionId\n        file: $file\n      ) {\n        id\n      }\n    }\n  ": types.UploadVideoInstructionDocument,
    "\n    query FindLearningPathById($id: ID!) {\n      findLearningPathById(id: $id) {\n        id\n        title\n        schoolId\n        content {\n          description\n          summary\n          valuePropositions {\n            title\n            summary\n          }\n          about {\n            title\n            description\n            image\n          }\n          learningPathSummary {\n            eyebrowTitle\n            title\n            summary\n            valueText\n            image\n            caption {\n              captionText\n              name\n              title\n            }\n          }\n          testimonial {\n            title\n            description\n            image\n            caption {\n              captionText\n              name\n              title\n            }\n          }\n          opportunities {\n            title\n            locations {\n              prefix\n              organization\n              location\n              summary\n            }\n          }\n          skillTree {\n            title\n            description\n            image\n          }\n          callToAction {\n            title\n          }\n        }\n      }\n    }\n  ": types.FindLearningPathByIdDocument,
    "\n    mutation approveLicenseRequest($id: ID!) {\n      approveLicenseRequest(id: $id) {\n        id\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        missionPartnerId\n        missionPartnerName\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  ": types.ApproveLicenseRequestDocument,
    "\n    mutation declineLicenseRequest($id: ID!) {\n      declineLicenseRequest(id: $id) {\n        id\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        missionPartnerId\n        missionPartnerName\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  ": types.DeclineLicenseRequestDocument,
    "\n    mutation ExportMissionPartnerLicenseRequests(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorName: String\n      $branch: String\n    ) {\n      exportMissionPartnerLicenseRequests(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorName: $vendorName\n        branch: $branch\n      )\n    }\n  ": types.ExportMissionPartnerLicenseRequestsDocument,
    "\n    query findLicenseRequestById($id: ID!) {\n      findLicenseRequestById(id: $id) {\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  ": types.FindLicenseRequestByIdDocument,
    "\n    query FindOpenLicenseRequests($missionPartnerId: ID!) {\n      findOpenLicenseRequests(missionPartnerId: $missionPartnerId) {\n        records {\n          missionPartnerId\n          missionPartnerName\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          userOrganization\n          id\n          status\n          requestedAt\n          approvedAt\n          declinedAt\n        }\n        total\n      }\n    }\n  ": types.FindOpenLicenseRequestsDocument,
    "\n    query FindOpenLicenseRequestsFilter(\n      $missionPartnerId: ID!\n      $sortDirection: String\n      $sortField: String\n      $search: String\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n      $branch: String\n      $vendorName: String\n    ) {\n      findOpenLicenseRequests(\n        missionPartnerId: $missionPartnerId\n        sortDirection: $sortDirection\n        sortField: $sortField\n        search: $search\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n        branch: $branch\n        vendorName: $vendorName\n      ) {\n        records {\n          missionPartnerId\n          missionPartnerName\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          userOrganization\n          id\n          status\n          requestedAt\n          approvedAt\n          declinedAt\n        }\n        total\n      }\n    }\n  ": types.FindOpenLicenseRequestsFilterDocument,
    "\n    query GetBranchesForOpenLicenseRequests($missionPartnerId: ID!) {\n      getBranchesForOpenLicenseRequests(missionPartnerId: $missionPartnerId)\n    }\n  ": types.GetBranchesForOpenLicenseRequestsDocument,
    "\n    query GetVendorsForOpenLicenseRequest($missionPartnerId: ID!) {\n      getVendorsForOpenLicenseRequests(missionPartnerId: $missionPartnerId)\n    }\n  ": types.GetVendorsForOpenLicenseRequestDocument,
    "\n    mutation assignLicense($input: AssignLicenseInput!) {\n      assignLicense(input: $input) {\n        id\n        status\n        error\n      }\n    }\n  ": types.AssignLicenseDocument,
    "\n    query CountAssignedLicensesForMissionPartner($missionPartnerId: ID!) {\n      countAssignedLicensesForMissionPartner(\n        missionPartnerId: $missionPartnerId\n      ) {\n        vendorId\n        count\n      }\n    }\n  ": types.CountAssignedLicensesForMissionPartnerDocument,
    "\n    mutation ExportLicenses {\n      exportLicenses\n    }\n  ": types.ExportLicensesDocument,
    "\n    mutation ExportMissionPartnerLicensesForVendor(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorId: ID!\n      $vendorName: String!\n    ) {\n      exportMissionPartnerLicensesForVendor(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorId: $vendorId\n        vendorName: $vendorName\n      )\n    }\n  ": types.ExportMissionPartnerLicensesForVendorDocument,
    "\n    query FindLicensesByUserId($userId: ID!, $missionPartnerId: ID!) {\n      licenses: findLicensesByUserId(userId: $userId) {\n        vendorId\n        vendorName\n        userId\n        missionPartnerId\n        missionPartnerName\n        assignedAt\n      }\n      licenseStatusCounts: findLicenseStatusCounts(\n        missionPartnerId: $missionPartnerId\n      ) {\n        active\n        inactive\n        available\n        provisioned\n        vendorId\n        vendorName\n      }\n    }\n  ": types.FindLicensesByUserIdDocument,
    "\n    query FindLicenseStatusCounts($missionPartnerId: ID!) {\n      findLicenseStatusCounts(missionPartnerId: $missionPartnerId) {\n        active\n        inactive\n        available\n        provisioned\n        vendorId\n        vendorName\n      }\n    }\n  ": types.FindLicenseStatusCountsDocument,
    "\n    query FindLicensesByMissionPartnerAndVendor(\n      $missionPartnerId: ID!\n      $vendorId: ID!\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      findLicensesByMissionPartnerAndVendor(\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          missionPartnerId\n          missionPartnerName\n          assignedAt\n          lastUsedAt\n        }\n        total\n      }\n    }\n  ": types.FindLicensesByMissionPartnerAndVendorDocument,
    "\n    query getLicensesByVendorId(\n      $vendorId: ID!\n      $missionPartnerName: String\n      $branch: String\n      $search: String\n      $sortBy: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      getLicensesByVendorId(\n        vendorId: $vendorId\n        missionPartnerName: $missionPartnerName\n        branch: $branch\n        search: $search\n        sortBy: $sortBy\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          missionPartnerId\n          missionPartnerName\n          assignedAt\n          lastUsedAt\n          user {\n            branch\n            trainingGroup\n            metadata\n          }\n        }\n        total\n      }\n    }\n  ": types.GetLicensesByVendorIdDocument,
    "\n    mutation removeLicenses($input: RemoveLicensesInput!) {\n      removeLicenses(input: $input)\n    }\n  ": types.RemoveLicensesDocument,
    "\n    mutation ApproveMissionPartnerRequest(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      approveMissionPartnerRequest(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  ": types.ApproveMissionPartnerRequestDocument,
    "\n    mutation DeclineMissionPartnerRequest(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      declineMissionPartnerRequest(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  ": types.DeclineMissionPartnerRequestDocument,
    "\n    query FindMissionPartnerRequestById($missionPartnerId: ID!, $userId: ID!) {\n      findMissionPartnerRequestById(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  ": types.FindMissionPartnerRequestByIdDocument,
    "\n    query FindOpenForMissionPartner($missionPartnerId: ID!) {\n      findOpenForMissionPartner(missionPartnerId: $missionPartnerId) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  ": types.FindOpenForMissionPartnerDocument,
    "\n  query FindLearnersBySearch(\n    $missionPartnerId: ID!\n    $searchText: String\n    $onboardingComplete: Boolean\n    $sortKey: String\n    $sortDirection: SortDirection\n    $pageNumber: SafeInt\n    $pageSize: SafeInt\n  ) {\n    findLearnersBySearch(\n      missionPartnerId: $missionPartnerId\n      searchText: $searchText\n      onboardingComplete: $onboardingComplete\n      sortKey: $sortKey\n      sortDirection: $sortDirection\n      pageNumber: $pageNumber\n      pageSize: $pageSize\n    ) {\n      records {\n        id\n        email\n        firstName\n        lastName\n        onboardingCompletedAt\n        keycloakUserCreatedAt\n        userType\n        lastLoginAt\n      }\n      total\n    }\n  }\n": types.FindLearnersBySearchDocument,
    "\n    mutation AddCollectionItems(\n      $ID: ID!\n      $items: [CollectionItemInput!]!\n      $missionPartnerId: ID!\n    ) {\n      addCollectionItems(\n        id: $ID\n        items: $items\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  ": types.AddCollectionItemsDocument,
    "\n    mutation AddFeaturedTrainingItems($input: UpdateMissionPartnerInput!) {\n      addFeaturedTrainingItems(input: $input) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          description\n          vendors\n          dateAdded\n          required\n        }\n      }\n    }\n  ": types.AddFeaturedTrainingItemsDocument,
    "\n    query AggregateTranscriptTrainingPlans(\n      $missionPartnerId: String!\n      $planType: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      aggregateTranscriptTrainingPlans(\n        missionPartnerId: $missionPartnerId\n        planType: $planType\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          planType\n          planSourceId\n          planTitle\n          total\n          assigned\n          started\n          stopped\n          completed\n        }\n        total\n      }\n    }\n  ": types.AggregateTranscriptTrainingPlansDocument,
    "\n    query AggregateTranscriptTrainingPlansForGroup(\n      $missionPartnerId: String!\n      $groupId: String!\n    ) {\n      aggregateTranscriptTrainingPlansForGroup(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        planType\n        planSourceId\n        planTitle\n        total\n        assigned\n        started\n        stopped\n        completed\n      }\n    }\n  ": types.AggregateTranscriptTrainingPlansForGroupDocument,
    "\n    mutation CreateCollection(\n      $name: String!\n      $description: String!\n      $missionPartnerId: ID!\n    ) {\n      createCollection(\n        name: $name\n        description: $description\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          name\n          description\n        }\n      }\n    }\n  ": types.CreateCollectionDocument,
    "\n    mutation CreateExportByTypeAndMissionPartnerId(\n      $downloadType: String!\n      $missionPartnerId: String!\n    ) {\n      createExportByTypeAndMissionPartnerId(\n        downloadType: $downloadType\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        userId\n        type\n        requestedAt\n        completedAt\n        title\n        parameters\n        status\n        error\n      }\n    }\n  ": types.CreateExportByTypeAndMissionPartnerIdDocument,
    "\n    mutation CreateMissionPartner($input: CreateMissionPartnerInput!) {\n      createMissionPartner(input: $input) {\n        id\n        name\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n      }\n    }\n  ": types.CreateMissionPartnerDocument,
    "\n    mutation DisableExportsByTypesForMissionPartner(\n      $downloadTypes: [String!]!\n      $missionPartnerId: String!\n    ) {\n      disableExportsByTypesForMissionPartner(\n        downloadTypes: $downloadTypes\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        enabledReports {\n          id\n          name\n          description\n        }\n      }\n    }\n  ": types.DisableExportsByTypesForMissionPartnerDocument,
    "\n    mutation EnableExportsByTypesForMissionPartner(\n      $downloadTypes: [String!]!\n      $missionPartnerId: String!\n    ) {\n      enableExportsByTypesForMissionPartner(\n        downloadTypes: $downloadTypes\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        enabledReports {\n          id\n          name\n          description\n        }\n      }\n    }\n  ": types.EnableExportsByTypesForMissionPartnerDocument,
    "\n    query ExportCourseLevelMetricsForTrainingPlan(\n      $missionPartnerId: ID!\n      $groupId: ID\n      $planSourceId: ID!\n      $planVersion: String\n      $title: String\n    ) {\n      exportCourseLevelMetricsForTrainingPlan(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planSourceId: $planSourceId\n        planVersion: $planVersion\n        title: $title\n      ) {\n        id\n      }\n    }\n  ": types.ExportCourseLevelMetricsForTrainingPlanDocument,
    "\n    query ExportIndividualLearnerActivity(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      exportIndividualLearnerActivity(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        id\n        userId\n        type\n        requestedAt\n        completedAt\n        title\n        parameters\n        status\n        error\n      }\n    }\n  ": types.ExportIndividualLearnerActivityDocument,
    "\n    query ExportLearners($missionPartnerId: ID!, $missionPartnerName: String) {\n      exportLearners(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n      ) {\n        id\n      }\n    }\n  ": types.ExportLearnersDocument,
    "\n    query ExportQuizExams(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $quizOrExamId: String!\n      $quizOrExamName: String!\n    ) {\n      exportQuizExams(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        quizOrExamId: $quizOrExamId\n        quizOrExamName: $quizOrExamName\n      ) {\n        id\n      }\n    }\n  ": types.ExportQuizExamsDocument,
    "\n    query ExportSurveys(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $surveyId: String!\n      $surveyName: String!\n    ) {\n      exportSurveys(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        surveyId: $surveyId\n        surveyName: $surveyName\n      ) {\n        id\n      }\n    }\n  ": types.ExportSurveysDocument,
    "\n    query ExportTrainingPlanCoursesForMissionPartner(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorName: String\n      $status: String\n    ) {\n      exportTrainingPlanCoursesForMissionPartner(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorName: $vendorName\n        status: $status\n      ) {\n        id\n      }\n    }\n  ": types.ExportTrainingPlanCoursesForMissionPartnerDocument,
    "\n    query ExportTrainingPlanTranscriptsForGroup(\n      $missionPartnerId: ID!\n      $groupId: ID!\n      $groupName: String\n    ) {\n      exportTrainingPlanTranscriptsForGroup(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        groupName: $groupName\n      ) {\n        id\n      }\n    }\n  ": types.ExportTrainingPlanTranscriptsForGroupDocument,
    "\n    query ExportTrainingPlanTranscriptsForMissionPartner(\n      $missionPartnerId: ID!\n      $missionPartnerName: String\n    ) {\n      exportTrainingPlanTranscriptsForMissionPartner(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n      ) {\n        id\n      }\n    }\n  ": types.ExportTrainingPlanTranscriptsForMissionPartnerDocument,
    "\n    query FindAllMissionPartnersAdminPortal {\n      findAllMissionPartnersAdminPortal {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        exams {\n          id\n          name\n          durationInMinutes\n          createdAt\n          updatedAt\n          status\n        }\n        courses {\n          id\n          name\n          duration\n          createdAt\n          updatedAt\n          status\n        }\n        scorms {\n          id\n          name\n          duration\n          status\n          createdAt\n          updatedAt\n        }\n        surveys {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        enabledReports {\n          id\n          name\n        }\n      }\n    }\n  ": types.FindAllMissionPartnersAdminPortalDocument,
    "\n    query FindAllMissionPartnersMinDetails {\n      findAllMissionPartnersMinDetails {\n        id\n        name\n        slug\n        description\n        affiliateId\n        logoUrl\n        accessCode\n        customTrainingEnabled\n        trialEnabled\n        trialEndDate\n        sectionType\n        isMarketplaceEnabled\n      }\n    }\n  ": types.FindAllMissionPartnersMinDetailsDocument,
    "\n    query FindCategorizedTimeSpentLearning(\n      $missionPartnerId: ID!\n      $categoryPercentileBreakpoints: [Int]\n      $roundToHour: Boolean\n    ) {\n      findCategorizedTimeSpentLearning(\n        missionPartnerId: $missionPartnerId\n        categoryPercentileBreakpoints: $categoryPercentileBreakpoints\n        roundToHour: $roundToHour\n      ) {\n        categoryBreakpoints\n        usersPerCategory\n      }\n    }\n  ": types.FindCategorizedTimeSpentLearningDocument,
    "\n    query FindFeaturedTrainingIds($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planSourceId\n        }\n      }\n    }\n  ": types.FindFeaturedTrainingIdsDocument,
    "\n    query FindLearnersTotal($missionPartnerId: ID!) {\n      findLearnersBySearch(missionPartnerId: $missionPartnerId) {\n        total\n      }\n    }\n  ": types.FindLearnersTotalDocument,
    "\n    query FindMissionPartnerById($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        name\n        description\n        accessCode\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        customTrainingEnabled\n        isMarketplaceEnabled\n        enabledReports {\n          description\n          id\n          name\n        }\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n          autoAssignmentEnabled\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          description\n          vendors\n          dateAdded\n          required\n          assigned\n          started\n          completed\n          stopped\n        }\n        exams {\n          id\n          name\n          durationInMinutes\n          createdAt\n          updatedAt\n          status\n        }\n        courses {\n          id\n          name\n          duration\n          createdAt\n          updatedAt\n          status\n        }\n        scorms {\n          id\n          name\n          duration\n          status\n          createdAt\n          updatedAt\n        }\n        surveys {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        labs {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        forceMultipliers {\n          id\n          title\n          status\n          version\n          enrolledLearners\n          totalDuration\n          changeLog {\n            createdAt\n          }\n          _createdAt\n          _updatedAt\n        }\n        collections {\n          id\n          name\n          description\n          items {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n            dateAdded\n          }\n        }\n        trialEnabled\n        trialStartDate\n        trialEndDate\n      }\n    }\n  ": types.FindMissionPartnerByIdDocument,
    "\n    query findMissionPartnerMembersByUserId($userId: ID!) {\n      findMissionPartnerMembersByUserId(userId: $userId) {\n        missionPartnerId\n        missionPartnerName\n        createdAt\n      }\n    }\n  ": types.FindMissionPartnerMembersByUserIdDocument,
    "\n    query FindMissionPartnerMinDetails($id: ID!) {\n      findMissionPartnerMinDetails(id: $id) {\n        id\n        name\n        slug\n        description\n        affiliateId\n        logoUrl\n        accessCode\n        customTrainingEnabled\n        trialEnabled\n        trialStartDate\n        trialEndDate\n        isMarketplaceEnabled\n      }\n    }\n  ": types.FindMissionPartnerMinDetailsDocument,
    "\n    query FindQuizAndExamsBySearch(\n      $missionPartnerId: ID!\n      $search: String\n      $sortKey: String\n      $sortDirection: SortDirection\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findQuizAndExamsBySearch(\n        missionPartnerId: $missionPartnerId\n        search: $search\n        sortKey: $sortKey\n        sortDirection: $sortDirection\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          completed\n          itemId\n          itemName\n          itemType\n          missionPartnerId\n          started\n          total\n        }\n        total\n      }\n    }\n  ": types.FindQuizAndExamsBySearchDocument,
    "\n    query FindSurveysBySearch(\n      $missionPartnerId: ID!\n      $search: String\n      $sortKey: String\n      $sortDirection: SortDirection\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findSurveysBySearch(\n        missionPartnerId: $missionPartnerId\n        search: $search\n        sortKey: $sortKey\n        sortDirection: $sortDirection\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          missionPartnerId\n          hostedSurveyId\n          hostedSurveyName\n          total\n          started\n          completed\n        }\n        total\n      }\n    }\n  ": types.FindSurveysBySearchDocument,
    "\n    query FindUserMissionPartnerMemberships {\n      findUserMissionPartnerMemberships {\n        userId\n        missionPartnerId\n        email\n        firstName\n        lastName\n        missionPartnerName\n        logoUrl\n        affiliateId\n        description\n        createdAt\n        trialEnabled\n        trialStartDate\n        trialEndDate\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          dateAdded\n          required\n        }\n      }\n    }\n  ": types.FindUserMissionPartnerMembershipsDocument,
    "\n    query GetCoursesQuarterlyByMissionPartner(\n      $missionPartnerId: ID!\n      $maxNumberofQuarters: SafeInt\n    ) {\n      getCoursesQuarterlyByMissionPartner(\n        missionPartnerId: $missionPartnerId\n        maxNumberofQuarters: $maxNumberofQuarters\n      ) {\n        quarter\n        started {\n          numberOfUsers\n          percentageOfUsers\n        }\n        stopped {\n          numberOfUsers\n          percentageOfUsers\n        }\n        completed {\n          numberOfUsers\n          percentageOfUsers\n        }\n        total\n      }\n    }\n  ": types.GetCoursesQuarterlyByMissionPartnerDocument,
    "\n    query GetMissionPartnerById($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        name\n      }\n    }\n  ": types.GetMissionPartnerByIdDocument,
    "\n    query GetPlansQuarterlyByMissionPartner(\n      $missionPartnerId: ID!\n      $maxNumberofQuarters: SafeInt\n    ) {\n      getPlansQuarterlyByMissionPartner(\n        missionPartnerId: $missionPartnerId\n        maxNumberofQuarters: $maxNumberofQuarters\n      ) {\n        quarter\n        assigned {\n          numberOfUsers\n          percentageOfUsers\n        }\n        started {\n          numberOfUsers\n          percentageOfUsers\n        }\n        stopped {\n          numberOfUsers\n          percentageOfUsers\n        }\n        completed {\n          numberOfUsers\n          percentageOfUsers\n        }\n        total\n      }\n    }\n  ": types.GetPlansQuarterlyByMissionPartnerDocument,
    "\n    query GetPublicMissionPartnerExports($missionPartnerId: ID!) {\n      getPublicMissionPartnerExports(missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n      }\n    }\n  ": types.GetPublicMissionPartnerExportsDocument,
    "\n    mutation RemoveCollection($Id: ID!, $missionPartnerId: ID!) {\n      removeCollection(id: $Id, missionPartnerId: $missionPartnerId) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  ": types.RemoveCollectionDocument,
    "\n    mutation RemoveCollectionItems(\n      $ID: ID!\n      $items: [RemoveCollectionItemInput!]!\n      $missionPartnerId: ID!\n    ) {\n      removeCollectionItems(\n        id: $ID\n        items: $items\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  ": types.RemoveCollectionItemsDocument,
    "\n    mutation RemoveFeaturedTrainingItems(\n      $missionPartnerId: ID!\n      $input: [RemoveFeaturedTrainingItemsInput]!\n    ) {\n      removeFeaturedTrainingItems(\n        missionPartnerId: $missionPartnerId\n        input: $input\n      ) {\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n        }\n      }\n    }\n  ": types.RemoveFeaturedTrainingItemsDocument,
    "\n    query SendReminderToNonOnboarded($missionPartnerId: ID!) {\n      sendReminderToNonOnboarded(missionPartnerId: $missionPartnerId) {\n        successfulEmailsSent\n        emailsNotSent\n      }\n    }\n  ": types.SendReminderToNonOnboardedDocument,
    "\n    mutation ToggleMissionPartnerTrial(\n      $missionPartnerId: ID!\n      $enable: Boolean!\n      $startDate: DateTime\n      $endDate: DateTime\n    ) {\n      toggleMissionPartnerTrial(\n        missionPartnerId: $missionPartnerId\n        enable: $enable\n        startDate: $startDate\n        endDate: $endDate\n      ) {\n        trialEnabled\n        trialStartDate\n        trialEndDate\n      }\n    }\n  ": types.ToggleMissionPartnerTrialDocument,
    "\n  mutation ToggleRequiredFeaturedTraining(\n    $missionPartnerId: ID!\n    $courseId: ID\n    $assessmentId: ID\n    $labId: ID\n    $planType: String\n    $planSourceId: String\n    $planVersion: String\n  ) {\n    toggleRequiredFeaturedTraining(\n      missionPartnerId: $missionPartnerId\n      courseId: $courseId\n      assessmentId: $assessmentId\n      labId: $labId\n      planType: $planType\n      planSourceId: $planSourceId\n      planVersion: $planVersion\n    ) {\n      id\n    }\n  }\n": types.ToggleRequiredFeaturedTrainingDocument,
    "\n    mutation UpdateCollectionItems(\n      $Id: ID!\n      $name: String\n      $description: String\n      $missionPartnerId: ID!\n    ) {\n      updateCollection(\n        id: $Id\n        name: $name\n        description: $description\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n        }\n      }\n    }\n  ": types.UpdateCollectionItemsDocument,
    "\n    mutation UpdateCustomTrainingEnabled(\n      $input: UpdateCustomTrainingEnabledInput!\n    ) {\n      updateCustomTrainingEnabled(input: $input) {\n        id\n        name\n        customTrainingEnabled\n      }\n    }\n  ": types.UpdateCustomTrainingEnabledDocument,
    "\n    mutation UpdateIsMarketplaceEnabled(\n      $input: UpdateIsMarketplaceEnabledInput!\n    ) {\n      updateIsMarketplaceEnabled(input: $input) {\n        id\n        name\n        isMarketplaceEnabled\n      }\n    }\n  ": types.UpdateIsMarketplaceEnabledDocument,
    "\n    mutation UpdateMissionPartner($input: UpdateMissionPartnerInput!) {\n      updateMissionPartner(input: $input) {\n        id\n        name\n        description\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          dateAdded\n          required\n        }\n      }\n    }\n  ": types.UpdateMissionPartnerDocument,
    "\n    mutation UploadMissionPartnerLogo($file: Upload, $missionPartnerId: ID!) {\n      uploadMissionPartnerLogo(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        url\n      }\n    }\n  ": types.UploadMissionPartnerLogoDocument,
    "\n    mutation CreateRole($input: CreateRoleInput!) {\n      createRole(input: $input) {\n        userId\n        missionPartnerId\n        name\n      }\n    }\n  ": types.CreateRoleDocument,
    "\n    mutation DeleteRoles(\n      $userIds: [ID!]\n      $missionPartnerId: ID!\n      $name: RoleName!\n    ) {\n      deleteRoles(\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n        name: $name\n      )\n    }\n  ": types.DeleteRolesDocument,
    "\n    query FindRolesByMissionPartnerId($missionPartnerId: ID!) {\n      findRolesByMissionPartnerId(missionPartnerId: $missionPartnerId) {\n        userId\n        userName\n        userEmail\n        userDate\n        name\n      }\n    }\n  ": types.FindRolesByMissionPartnerIdDocument,
    "\n    query getUserForRoles {\n      getUser {\n        roles {\n          name\n          missionPartnerId\n        }\n      }\n    }\n  ": types.GetUserForRolesDocument,
    "\n    query GetServiceHealth {\n      getServiceHealth {\n        services {\n          name\n          status\n        }\n      }\n    }\n  ": types.GetServiceHealthDocument,
    "\n    mutation DisableSetting($id: ID!) {\n      disableSetting(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  ": types.DisableSettingDocument,
    "\n    mutation EnableSetting($id: ID!) {\n      enableSetting(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  ": types.EnableSettingDocument,
    "\n    query FindAllSettings {\n      findAllSettings {\n        id\n        name\n        enabled\n      }\n    }\n  ": types.FindAllSettingsDocument,
    "\n    query FindSettingById($id: ID!) {\n      findSettingById(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  ": types.FindSettingByIdDocument,
    "\n    query findSkillById($id: ID!) {\n      findSkillById(id: $id) {\n        id\n        title\n        learningPaths {\n          id\n          title\n          schoolId\n          content {\n            summary\n          }\n        }\n        content {\n          summary\n          description\n          valuePropositions {\n            title\n            summary\n          }\n          about {\n            title\n            description\n            image\n          }\n          skillTree {\n            title\n            description\n            image\n          }\n          callToAction {\n            title\n          }\n        }\n        vendors\n        totalItems\n        totalDuration\n        enrolledLearners\n      }\n    }\n  ": types.FindSkillByIdDocument,
    "\n    mutation CreateSurvey($surveyInput: NewSurveyInput!) {\n      createSurvey(input: $surveyInput) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  ": types.CreateSurveyDocument,
    "\n    query FindSurveyById($id: ID!) {\n      findSurveyById(id: $id) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  ": types.FindSurveyByIdDocument,
    "\n    mutation PublishSurvey($id: ID!) {\n      publishSurvey(id: $id) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  ": types.PublishSurveyDocument,
    "\n    mutation UpdateSurvey($input: UpdatedSurveyInput!) {\n      updateSurvey(input: $input) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  ": types.UpdateSurveyDocument,
    "\n    query CountAllCourses {\n      countAllCourses {\n        total\n      }\n    }\n  ": types.CountAllCoursesDocument,
    "\n    query GetTrainingPlanMetrics($dayRange: SafeInt) {\n      getTrainingPlanMetrics(dayRange: $dayRange) {\n        totalPlans\n        plansInProgress\n        plansCompleted\n      }\n    }\n  ": types.GetTrainingPlanMetricsDocument,
    "\n    query getTranscriptCourseMetrics($branch: String!, $dayRange: SafeInt) {\n      getTranscriptCourseMetrics(branch: $branch, dayRange: $dayRange) {\n        totalCourses\n        coursesInProgress\n        coursesCompleted\n        coursesStopped\n        coursesPendingReview\n        totalHoursCompleted\n      }\n    }\n  ": types.GetTranscriptCourseMetricsDocument,
    "\n    query getTrainingPlanMetricsAll {\n      getTrainingPlanMetrics {\n        totalPlans\n        plansInProgress\n        plansCompleted\n        plansStopped\n        plansAssigned\n      }\n    }\n  ": types.GetTrainingPlanMetricsAllDocument,
    "\n    query getTranscriptCourseMetricsExtra(\n      $branch: String!\n      $trainingGroup: String\n      $missionPartnerId: String\n      $fieldCommand: String\n      $spaceDelta: String\n      $squadron: String\n      $organization: String\n    ) {\n      getTranscriptCourseMetrics(\n        branch: $branch\n        trainingGroup: $trainingGroup\n        missionPartnerId: $missionPartnerId\n        fieldCommand: $fieldCommand\n        spaceDelta: $spaceDelta\n        squadron: $squadron\n        organization: $organization\n      ) {\n        totalCourses\n        coursesInProgress\n        coursesCompleted\n        coursesStopped\n        coursesPendingReview\n        totalHoursCompleted\n      }\n    }\n  ": types.GetTranscriptCourseMetricsExtraDocument,
    "\n  query getTrainingPlansByUserId($userId: ID!) {\n    getTrainingPlansByUserId(userId: $userId) {\n      id\n      userId\n      planType\n      planSourceId\n      title\n      startedAt\n      completedAt\n      activities {\n        activityType\n        masteryLevel\n        course {\n          id\n          vendorId\n          vendorCourseId\n          courseTitle\n          courseUrl\n          courseDescription\n          courseDuration\n        }\n        startedAt\n        markedCompletedAt\n        completedAt\n        specialization {\n          id\n          title\n          instructions\n          options {\n            title\n            text\n            value\n          }\n        }\n        value\n      }\n      stats {\n        group\n        total\n        completed\n        completedPercentage\n        duration\n        completedAt\n      }\n      nextActivity {\n        activityType\n        masteryLevel\n        course {\n          id\n          vendorId\n          vendorCourseId\n          courseTitle\n          courseUrl\n          courseDescription\n          courseDuration\n        }\n        startedAt\n        markedCompletedAt\n        completedAt\n        specialization {\n          id\n          title\n          instructions\n          options {\n            title\n            text\n            value\n          }\n        }\n        value\n      }\n    }\n  }\n": types.GetTrainingPlansByUserIdDocument,
    "\n    query FindTranscriptTrainingPlans(\n      $missionPartnerId: String\n      $groupId: String\n      $planType: String\n      $planSourceId: String\n      $status: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      findTranscriptTrainingPlans(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planType: $planType\n        planSourceId: $planSourceId\n        status: $status\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          userId\n          trainingPlanId\n          status\n          assignedAt\n          startedAt\n          stoppedAt\n          completedAt\n          trainingPlan {\n            planType\n            planSourceId\n            title\n          }\n          user {\n            id\n            firstName\n            lastName\n            email\n          }\n        }\n        total\n      }\n    }\n  ": types.FindTranscriptTrainingPlansDocument,
    "\n    query getAllTrainingPlans {\n      getAllTrainingPlans {\n        id\n        userId\n        planType\n        planSourceId\n        title\n        startedAt\n        completedAt\n        activities {\n          activityType\n          masteryLevel\n          course {\n            id\n            vendorId\n            vendorCourseId\n            courseTitle\n            courseUrl\n            courseDescription\n            courseDuration\n          }\n          startedAt\n          markedCompletedAt\n          completedAt\n          specialization {\n            id\n            title\n            instructions\n            options {\n              title\n              text\n              value\n            }\n          }\n          value\n        }\n        stats {\n          group\n          total\n          completed\n          completedPercentage\n          duration\n          completedAt\n        }\n        nextActivity {\n          activityType\n          masteryLevel\n          course {\n            id\n            vendorId\n            vendorCourseId\n            courseTitle\n            courseUrl\n            courseDescription\n            courseDuration\n          }\n          startedAt\n          markedCompletedAt\n          completedAt\n          specialization {\n            id\n            title\n            instructions\n            options {\n              title\n              text\n              value\n            }\n          }\n          value\n        }\n      }\n    }\n  ": types.GetAllTrainingPlansDocument,
    "\n    query LearnerTrainingPlan($userId: ID!) {\n      getTrainingPlansByUserId(userId: $userId) {\n        id\n        userId\n        planType\n        planSourceId\n        title\n        assignedAt\n        startedAt\n        completedAt\n        stoppedAt\n      }\n    }\n  ": types.LearnerTrainingPlanDocument,
    "\n    query GetTopCourses($missionPartnerId: String, $limit: SafeInt) {\n      getTopCourses(missionPartnerId: $missionPartnerId, limit: $limit) {\n        count\n        id\n        title\n      }\n    }\n  ": types.GetTopCoursesDocument,
    "\n    query GetTopPlans($missionPartnerId: String, $limit: SafeInt) {\n      getTopPlans(missionPartnerId: $missionPartnerId, limit: $limit) {\n        title\n        planType\n        planSourceId\n        count\n      }\n    }\n  ": types.GetTopPlansDocument,
    "\n  query GetUserUploads {\n    getUserUploads {\n      id\n      userId\n      type\n      requestedAt\n      completedAt\n      title\n      parameters\n      status\n      error\n    }\n  }\n": types.GetUserUploadsDocument,
    "\n    mutation DeleteUpload($id: ID!) {\n      deleteUpload(id: $id)\n    }\n  ": types.DeleteUploadDocument,
    "\n    mutation AddAssessmentsToUser(\n      $userId: ID!\n      $assessmentIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addAssessmentsToUser(\n        userId: $userId\n        assessmentIds: $assessmentIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  ": types.AddAssessmentsToUserDocument,
    "\n    mutation AddCoursesToUser(\n      $userId: ID!\n      $courseIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addCoursesToUser(\n        userId: $userId\n        courseIds: $courseIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  ": types.AddCoursesToUserDocument,
    "\n    mutation addGroupMembership($input: AddGroupMembershipInput!) {\n      addGroupMembership(input: $input) {\n        id\n        firstName\n        lastName\n        email\n        groupMemberships {\n          groupName\n        }\n      }\n    }\n  ": types.AddGroupMembershipDocument,
    "\n    mutation AddLicenseToUsers(\n      $file: Upload!\n      $missionPartnerId: ID!\n      $vendorId: ID!\n    ) {\n      addLicenseToUsers(\n        file: $file\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  ": types.AddLicenseToUsersDocument,
    "\n    mutation UpdateRecentMissionPartner($missionPartnerId: ID!) {\n      updateRecentMissionPartner(missionPartnerId: $missionPartnerId)\n    }\n  ": types.UpdateRecentMissionPartnerDocument,
    "\n    query CountAllUsers(\n      $branch: String\n      $trainingGroup: String\n      $fieldCommand: String\n      $spaceDelta: String\n      $squadron: String\n      $organization: String\n    ) {\n      countAllUsers(\n        branch: $branch\n        trainingGroup: $trainingGroup\n        fieldCommand: $fieldCommand\n        spaceDelta: $spaceDelta\n        squadron: $squadron\n        organization: $organization\n      )\n    }\n  ": types.CountAllUsersDocument,
    "\n    query CountCacEnabledUsers($branch: String!) {\n      countCacEnabledUsers(branch: $branch)\n    }\n  ": types.CountCacEnabledUsersDocument,
    "\n    query CountNewUsers($branch: String!, $dayRange: SafeInt) {\n      countNewUsers(branch: $branch, dayRange: $dayRange)\n    }\n  ": types.CountNewUsersDocument,
    "\n    mutation ExportUsers($branch: String) {\n      exportUsers(branch: $branch)\n    }\n  ": types.ExportUsersDocument,
    "\n    query FindAwardedBadges($userId: ID) {\n      findAwardedBadges(userId: $userId) {\n        badgeId\n        title\n        description\n        recipient\n        imageUrl\n        jsonUrl\n        issuedAt\n        expiresAt\n      }\n    }\n  ": types.FindAwardedBadgesDocument,
    "\n    query findLearnerCohorts($userId: ID!, $missionPartnerId: ID!) {\n      getUserCohorts(userId: $userId, missionPartnerId: $missionPartnerId) {\n        group {\n          id\n          name\n          createdAt\n        }\n        count\n        missionPartner {\n          id\n          name\n        }\n      }\n    }\n  ": types.FindLearnerCohortsDocument,
    "\n    query FindUsersByGroupId($groupId: String!) {\n      findUsersByGroupId(groupId: $groupId) {\n        id\n        email\n        firstName\n        lastName\n      }\n    }\n  ": types.FindUsersByGroupIdDocument,
    "\n    query FindUsersBySearchText(\n      $searchText: String!\n      $branch: String\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findUsersBySearchText(\n        searchText: $searchText\n        branch: $branch\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          id\n          firstName\n          lastName\n          email\n          photoUrl\n          branch\n          userType\n          grade\n          occupationalCode\n          metadata\n          currentCareer\n          onboardingCompletedAt\n          licenseOnboardingCompletedAt\n          showThirdPartySiteWarning\n          badgeNotifications\n        }\n        total\n      }\n    }\n  ": types.FindUsersBySearchTextDocument,
    "\n    query GetUser {\n      getUser {\n        id\n        firstName\n        lastName\n        phoneNumber\n        email\n        photoUrl\n        userType\n        branch\n        grade\n        occupationalCode\n        metadata\n        trainingGroup\n        currentCareer\n        onboardingCompletedAt\n        licenseOnboardingCompletedAt\n        showThirdPartySiteWarning\n        badgeNotifications\n      }\n    }\n  ": types.GetUserDocument,
    "\n    query GetRecentMissionPartners {\n      getUser {\n        recentMissionPartners {\n          missionPartnerId\n          missionPartnerName\n          visitedAt\n        }\n      }\n    }\n  ": types.GetRecentMissionPartnersDocument,
    "\n    mutation ImportBulkUsers(\n      $bulkUploadFile: Upload!\n      $missionPartnerId: ID\n      $groupId: ID\n    ) {\n      importBulkUsers(\n        file: $bulkUploadFile\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  ": types.ImportBulkUsersDocument,
    "\n    mutation ImportSingleUser(\n      $firstName: String!\n      $lastName: String!\n      $email: String!\n      $missionPartnerId: ID\n      $groupId: ID\n    ) {\n      importSingleUser(\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        id\n      }\n    }\n  ": types.ImportSingleUserDocument,
    "\n    mutation removeGroupMemberships(\n      $groupId: ID!\n      $userIds: [ID!]!\n      $missionPartnerId: ID!\n    ) {\n      removeGroupMemberships(\n        groupId: $groupId\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  ": types.RemoveGroupMembershipsDocument,
    "\n    mutation removeMissionPartnerMemberships(\n      $userIds: [ID!]!\n      $missionPartnerId: ID!\n    ) {\n      removeMissionPartnerMemberships(\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  ": types.RemoveMissionPartnerMembershipsDocument,
    "\n    mutation ToggleAllowContractorAccess($userId: ID!, $allow: Boolean) {\n      toggleAllowContractorAccess(userId: $userId, allow: $allow) {\n        id\n        canAccessFullDu\n      }\n    }\n  ": types.ToggleAllowContractorAccessDocument,
    "\n    mutation AddTrainingPlansToUser(\n      $userId: ID!\n      $plans: [AddPlansInput]!\n      $missionPartnerId: ID!\n    ) {\n      addTrainingPlansToUser(\n        userId: $userId\n        plans: $plans\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        userId\n        planType\n        planSourceId\n      }\n    }\n  ": types.AddTrainingPlansToUserDocument,
    "\n    query CountActiveUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countActiveUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  ": types.CountActiveUsersByMissionPartnerIdDocument,
    "\n    query CountOnboardedUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countOnboardedUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  ": types.CountOnboardedUsersByMissionPartnerIdDocument,
    "\n    query CountUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  ": types.CountUsersByMissionPartnerIdDocument,
    "\n    query FindFieldCommands {\n      findFieldCommands {\n        title\n      }\n    }\n  ": types.FindFieldCommandsDocument,
    "\n    query findOrganizations {\n      findOrganizations {\n        title\n      }\n    }\n  ": types.FindOrganizationsDocument,
    "\n    query FindSpaceDeltas {\n      findSpaceDeltas {\n        title\n      }\n    }\n  ": types.FindSpaceDeltasDocument,
    "\n    query findSquadrons {\n      findSquadrons {\n        title\n      }\n    }\n  ": types.FindSquadronsDocument,
    "\n    query findUserById($userId: ID!) {\n      findUserById(id: $userId) {\n        id\n        firstName\n        lastName\n        email\n        userType\n        branch\n        grade\n        metadata\n        testRecord\n        canAccessFullDu\n        occupationalCode\n        groupMemberships {\n          groupName\n          userId\n          groupId\n        }\n        photoUrl\n        metadata\n        lastLoginAt\n        keycloakUserCreatedAt\n        totalTimeTrained\n        skills\n      }\n    }\n  ": types.FindUserByIdDocument,
    "\n    query GetUserMissionPartnerTrialStatus {\n      getUserMissionPartnerTrialStatus {\n        hasExpiredTrial\n        missionPartner {\n          id\n          name\n          trialStartDate\n          trialEndDate\n          trialEnabled\n        }\n      }\n    }\n  ": types.GetUserMissionPartnerTrialStatusDocument,
    "\n    mutation removeUsersFromMissionPartner(\n      $file: Upload!\n      $missionPartnerId: ID!\n    ) {\n      removeUsersFromMissionPartner(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  ": types.RemoveUsersFromMissionPartnerDocument,
    "\n    mutation revokeVendorLicensesForUsers(\n      $file: Upload!\n      $missionPartnerId: ID!\n      $vendorId: ID!\n    ) {\n      revokeVendorLicensesForUsers(\n        file: $file\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  ": types.RevokeVendorLicensesForUsersDocument,
    "\n    query countAllVendors {\n      countAllVendors\n    }\n  ": types.CountAllVendorsDocument,
    "\n    query countUniqueItemsAndVendorsBySource($source: String!) {\n      countUniqueItemsAndVendorsBySource(source: $source) {\n        items\n        vendors\n      }\n    }\n  ": types.CountUniqueItemsAndVendorsBySourceDocument,
    "\n    mutation CreateVendor($input: CreateVendorInput!) {\n      createVendor(input: $input) {\n        id\n        name\n        isLicensed\n      }\n    }\n  ": types.CreateVendorDocument,
    "\n    query FindAllVendors {\n      findAllVendors {\n        id\n        name\n        provisioned\n        assigned\n        isLicensed\n      }\n    }\n  ": types.FindAllVendorsDocument,
    "\n    query FindLicensedVendors {\n      findLicensedVendors {\n        id\n        name\n        provisioned\n        assigned\n        isLicensed\n      }\n    }\n  ": types.FindLicensedVendorsDocument,
    "\n    query findVendorById($id: ID!) {\n      findVendorById(id: $id) {\n        id\n        name\n        provisioned\n        assigned\n      }\n    }\n  ": types.FindVendorByIdDocument,
    "\n    mutation UpdateVendor($input: UpdateVendorInput!) {\n      updateVendor(input: $input) {\n        id\n        name\n      }\n    }\n  ": types.UpdateVendorDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindAllAffiliates {\n      findAllAffiliates {\n        id\n        name\n      }\n    }\n  "): (typeof documents)["\n    query FindAllAffiliates {\n      findAllAffiliates {\n        id\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateManualAssessment($assessment: AssessmentInput!) {\n      createManualAssessment(assessment: $assessment) {\n        id\n        vendorId\n        vendorAssessmentId\n        vendorName\n        assessmentTitle\n        assessmentDescription\n        assessmentUrl\n        assessmentImage\n        source\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateManualAssessment($assessment: AssessmentInput!) {\n      createManualAssessment(assessment: $assessment) {\n        id\n        vendorId\n        vendorAssessmentId\n        vendorName\n        assessmentTitle\n        assessmentDescription\n        assessmentUrl\n        assessmentImage\n        source\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindAssessmentsBySource($source: String!) {\n      findAssessmentsBySource(source: $source) {\n        id\n        assessmentTitle\n        assessmentDescription\n        assessmentImage\n        dateUpdated\n        vendorName\n      }\n    }\n  "): (typeof documents)["\n    query FindAssessmentsBySource($source: String!) {\n      findAssessmentsBySource(source: $source) {\n        id\n        assessmentTitle\n        assessmentDescription\n        assessmentImage\n        dateUpdated\n        vendorName\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findLearnerAssessments($userId: ID!, $missionPartnerId: ID) {\n      findAssessmentsByUserId(\n        userId: $userId\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        assessmentTitle\n        vendorName\n        vendorAssessmentId\n        vendorId\n        startedAt\n        markedCompletedAt\n        status\n      }\n    }\n  "): (typeof documents)["\n    query findLearnerAssessments($userId: ID!, $missionPartnerId: ID) {\n      findAssessmentsByUserId(\n        userId: $userId\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        assessmentTitle\n        vendorName\n        vendorAssessmentId\n        vendorId\n        startedAt\n        markedCompletedAt\n        status\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAssessmentById($id: ID!) {\n      getAssessmentById(id: $id) {\n        id\n        assessmentTitle\n        assessmentDescription\n        assessmentImage\n        assessmentUrl\n        durationInMinutes\n        dateUpdated\n        vendorName\n        vendorAssessmentId\n        vendorId\n      }\n    }\n  "): (typeof documents)["\n    query GetAssessmentById($id: ID!) {\n      getAssessmentById(id: $id) {\n        id\n        assessmentTitle\n        assessmentDescription\n        assessmentImage\n        assessmentUrl\n        durationInMinutes\n        dateUpdated\n        vendorName\n        vendorAssessmentId\n        vendorId\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateAssessment($assessment: AssessmentInput!) {\n      updateAssessment(assessment: $assessment) {\n        id\n        vendorId\n        vendorAssessmentId\n        vendorName\n        assessmentTitle\n        assessmentDescription\n        assessmentUrl\n        assessmentImage\n        source\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateAssessment($assessment: AssessmentInput!) {\n      updateAssessment(assessment: $assessment) {\n        id\n        vendorId\n        vendorAssessmentId\n        vendorName\n        assessmentTitle\n        assessmentDescription\n        assessmentUrl\n        assessmentImage\n        source\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ExportBadges(\n      $ownerId: String\n      $missionPartnerId: String\n      $badgeId: String\n    ) {\n      exportBadges(\n        ownerId: $ownerId\n        missionPartnerId: $missionPartnerId\n        badgeId: $badgeId\n      )\n    }\n  "): (typeof documents)["\n    mutation ExportBadges(\n      $ownerId: String\n      $missionPartnerId: String\n      $badgeId: String\n    ) {\n      exportBadges(\n        ownerId: $ownerId\n        missionPartnerId: $missionPartnerId\n        badgeId: $badgeId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAllAwardedBadgesByMissionPartnerMembership(\n      $missionPartnerId: ID!\n    ) {\n      getAllAwardedBadgesByMissionPartnerMembership(\n        missionPartnerId: $missionPartnerId\n      ) {\n        id: badgeId\n        imageUrl: badgeImage\n        title: badgeTitle\n        missionPartnerId\n        missionPartnerCount: missionPartnerMembersAwarded\n      }\n    }\n  "): (typeof documents)["\n    query GetAllAwardedBadgesByMissionPartnerMembership(\n      $missionPartnerId: ID!\n    ) {\n      getAllAwardedBadgesByMissionPartnerMembership(\n        missionPartnerId: $missionPartnerId\n      ) {\n        id: badgeId\n        imageUrl: badgeImage\n        title: badgeTitle\n        missionPartnerId\n        missionPartnerCount: missionPartnerMembersAwarded\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetMissionPartnerOwnedBadges($missionPartnerId: ID!) {\n      getMissionPartnerOwnedBadges(missionPartnerId: $missionPartnerId) {\n        id: badgeId\n        imageUrl: badgeImage\n        title: badgeTitle\n        missionPartnerId\n        count: totalAwarded\n        missionPartnerCount: missionPartnerMembersAwarded\n      }\n    }\n  "): (typeof documents)["\n    query GetMissionPartnerOwnedBadges($missionPartnerId: ID!) {\n      getMissionPartnerOwnedBadges(missionPartnerId: $missionPartnerId) {\n        id: badgeId\n        imageUrl: badgeImage\n        title: badgeTitle\n        missionPartnerId\n        count: totalAwarded\n        missionPartnerCount: missionPartnerMembersAwarded\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindCatalogResults(\n      $search: String!\n      $searchAfter: [String]\n      $page: Int\n      $pageSize: Int\n      $type: String\n      $vendorId: String\n      $planType: String\n      $excludeCustomContent: Boolean\n      $missionPartnerId: String\n    ) {\n      findCatalogResults(\n        search: $search\n        searchAfter: $searchAfter\n        page: $page\n        pageSize: $pageSize\n        type: $type\n        vendorId: $vendorId\n        planType: $planType\n        excludeCustomContent: $excludeCustomContent\n        missionPartnerId: $missionPartnerId\n      ) {\n        hits {\n          __typename\n          ... on Course {\n            id\n            vendorId\n            vendorCourseId\n            vendorName\n            courseDescription\n            courseDuration\n            courseTitle\n            courseUrl\n            status\n            source\n            averageRating\n            totalReviews\n          }\n          ... on Assessment {\n            id\n            vendorId\n            vendorAssessmentId\n            vendorName\n            assessmentTitle\n            assessmentDescription\n            assessmentUrl\n            assessmentImage\n            durationInMinutes\n            source\n          }\n          ... on LearningPath {\n            id\n            title\n            schoolId\n            content {\n              description\n              summary\n            }\n            version\n            vendors\n            totalItems\n            totalDuration\n            enrolledLearners\n            averageRating\n            totalReviews\n          }\n          ... on ForceMultiplier {\n            id\n            version\n            title\n            fmStatus: status\n            learningPathUri\n            totalDuration\n            unsequenced\n            content {\n              description\n              summary\n            }\n            type\n            totalDuration\n            vendors\n            averageRating\n            totalReviews\n          }\n          ... on Skill {\n            id\n            title\n            content {\n              summary\n              description\n            }\n            vendors\n            version\n            totalItems\n            totalDuration\n            enrolledLearners\n          }\n          ... on Survey {\n            id\n            name\n            description\n            durationInMinutes\n            missionPartnerId\n            status\n          }\n          ... on Lab {\n            id\n            name\n            description\n            durationInMinutes\n            missionPartnerId\n            missionPartner {\n              name\n            }\n            status\n            instructions {\n              id\n              title\n              type\n            }\n            averageRating\n            totalReviews\n          }\n        }\n        searchAfter\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindCatalogResults(\n      $search: String!\n      $searchAfter: [String]\n      $page: Int\n      $pageSize: Int\n      $type: String\n      $vendorId: String\n      $planType: String\n      $excludeCustomContent: Boolean\n      $missionPartnerId: String\n    ) {\n      findCatalogResults(\n        search: $search\n        searchAfter: $searchAfter\n        page: $page\n        pageSize: $pageSize\n        type: $type\n        vendorId: $vendorId\n        planType: $planType\n        excludeCustomContent: $excludeCustomContent\n        missionPartnerId: $missionPartnerId\n      ) {\n        hits {\n          __typename\n          ... on Course {\n            id\n            vendorId\n            vendorCourseId\n            vendorName\n            courseDescription\n            courseDuration\n            courseTitle\n            courseUrl\n            status\n            source\n            averageRating\n            totalReviews\n          }\n          ... on Assessment {\n            id\n            vendorId\n            vendorAssessmentId\n            vendorName\n            assessmentTitle\n            assessmentDescription\n            assessmentUrl\n            assessmentImage\n            durationInMinutes\n            source\n          }\n          ... on LearningPath {\n            id\n            title\n            schoolId\n            content {\n              description\n              summary\n            }\n            version\n            vendors\n            totalItems\n            totalDuration\n            enrolledLearners\n            averageRating\n            totalReviews\n          }\n          ... on ForceMultiplier {\n            id\n            version\n            title\n            fmStatus: status\n            learningPathUri\n            totalDuration\n            unsequenced\n            content {\n              description\n              summary\n            }\n            type\n            totalDuration\n            vendors\n            averageRating\n            totalReviews\n          }\n          ... on Skill {\n            id\n            title\n            content {\n              summary\n              description\n            }\n            vendors\n            version\n            totalItems\n            totalDuration\n            enrolledLearners\n          }\n          ... on Survey {\n            id\n            name\n            description\n            durationInMinutes\n            missionPartnerId\n            status\n          }\n          ... on Lab {\n            id\n            name\n            description\n            durationInMinutes\n            missionPartnerId\n            missionPartner {\n              name\n            }\n            status\n            instructions {\n              id\n              title\n              type\n            }\n            averageRating\n            totalReviews\n          }\n        }\n        searchAfter\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindContentById($id: ID!) {\n      findContentById(id: $id) {\n        id\n        content\n      }\n    }\n  "): (typeof documents)["\n    query FindContentById($id: ID!) {\n      findContentById(id: $id) {\n        id\n        content\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteBanner {\n      deleteBanner\n    }\n  "): (typeof documents)["\n    mutation deleteBanner {\n      deleteBanner\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteAlertBanner {\n      deleteAlertBanner\n    }\n  "): (typeof documents)["\n    mutation deleteAlertBanner {\n      deleteAlertBanner\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateGlobalBanner(\n      $title: String\n      $content: String!\n      $isDismissable: Boolean!\n    ) {\n      updateAlertBanner(\n        title: $title\n        content: $content\n        isDismissable: $isDismissable\n      ) {\n        id\n        content {\n          title\n          content\n          isDismissable\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation updateGlobalBanner(\n      $title: String\n      $content: String!\n      $isDismissable: Boolean!\n    ) {\n      updateAlertBanner(\n        title: $title\n        content: $content\n        isDismissable: $isDismissable\n      ) {\n        id\n        content {\n          title\n          content\n          isDismissable\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBanner(\n      $title: String!\n      $body: String!\n      $buttonText: String!\n      $buttonLink: String!\n      $logo: Upload!\n    ) {\n      updateBanner(\n        title: $title\n        body: $body\n        buttonText: $buttonText\n        buttonLink: $buttonLink\n        logo: $logo\n      ) {\n        id\n        content {\n          title\n          body\n          buttonText\n          buttonLink\n          logo\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation updateBanner(\n      $title: String!\n      $body: String!\n      $buttonText: String!\n      $buttonLink: String!\n      $logo: Upload!\n    ) {\n      updateBanner(\n        title: $title\n        body: $body\n        buttonText: $buttonText\n        buttonLink: $buttonLink\n        logo: $logo\n      ) {\n        id\n        content {\n          title\n          body\n          buttonText\n          buttonLink\n          logo\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindCourseById($id: ID!) {\n    findCourseById(id: $id) {\n      id\n      courseTitle\n      courseDescription\n      courseDuration\n      courseImage\n      dateUpdated\n      courseUrl\n      vendorName\n      vendorCourseId\n      vendorId\n      source\n    }\n  }\n"): (typeof documents)["\n  query FindCourseById($id: ID!) {\n    findCourseById(id: $id) {\n      id\n      courseTitle\n      courseDescription\n      courseDuration\n      courseImage\n      dateUpdated\n      courseUrl\n      vendorName\n      vendorCourseId\n      vendorId\n      source\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query AggregateTrainingPlanVersions(\n      $planType: String!\n      $planSourceId: String!\n    ) {\n      aggregateTrainingPlanVersions(\n        planType: $planType\n        planSourceId: $planSourceId\n      ) {\n        versions\n        versionEnabled\n      }\n    }\n  "): (typeof documents)["\n    query AggregateTrainingPlanVersions(\n      $planType: String!\n      $planSourceId: String!\n    ) {\n      aggregateTrainingPlanVersions(\n        planType: $planType\n        planSourceId: $planSourceId\n      ) {\n        versions\n        versionEnabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query AggregateTranscriptCourses(\n      $missionPartnerId: String\n      $vendorId: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: Int\n      $pageNumber: Int\n    ) {\n      aggregateTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        count\n        data {\n          courseId\n          courseTitle\n          vendorName\n          total\n          started\n          stopped\n          pendingReview\n          markedCompleted\n          completed\n        }\n      }\n    }\n  "): (typeof documents)["\n    query AggregateTranscriptCourses(\n      $missionPartnerId: String\n      $vendorId: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: Int\n      $pageNumber: Int\n    ) {\n      aggregateTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        count\n        data {\n          courseId\n          courseTitle\n          vendorName\n          total\n          started\n          stopped\n          pendingReview\n          markedCompleted\n          completed\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query AggregateTranscriptItemsForTrainingPlan(\n      $missionPartnerId: String\n      $groupId: String\n      $planType: String!\n      $planSourceId: String!\n      $planVersion: String\n    ) {\n      aggregateTranscriptItemsForTrainingPlan(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planType: $planType\n        planSourceId: $planSourceId\n        planVersion: $planVersion\n      ) {\n        itemId\n        itemTitle\n        vendorName\n        total\n        started\n        stopped\n        pendingReview\n        markedCompleted\n        completed\n      }\n    }\n  "): (typeof documents)["\n    query AggregateTranscriptItemsForTrainingPlan(\n      $missionPartnerId: String\n      $groupId: String\n      $planType: String!\n      $planSourceId: String!\n      $planVersion: String\n    ) {\n      aggregateTranscriptItemsForTrainingPlan(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planType: $planType\n        planSourceId: $planSourceId\n        planVersion: $planVersion\n      ) {\n        itemId\n        itemTitle\n        vendorName\n        total\n        started\n        stopped\n        pendingReview\n        markedCompleted\n        completed\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateAdminManagedCourse($course: CourseInput!) {\n      createAdminManagedCourse(course: $course) {\n        id\n        vendorId\n        vendorCourseId\n        vendorName\n        courseDescription\n        courseDuration\n        courseTitle\n        courseUrl\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateAdminManagedCourse($course: CourseInput!) {\n      createAdminManagedCourse(course: $course) {\n        id\n        vendorId\n        vendorCourseId\n        vendorName\n        courseDescription\n        courseDuration\n        courseTitle\n        courseUrl\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findCoursesBySource($source: String!) {\n      findCoursesBySource(source: $source) {\n        data {\n          id\n          courseTitle\n          courseDescription\n          vendorName\n          vendorCourseId\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query findCoursesBySource($source: String!) {\n      findCoursesBySource(source: $source) {\n        data {\n          id\n          courseTitle\n          courseDescription\n          vendorName\n          vendorCourseId\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindTranscriptCourses(\n      $missionPartnerId: String\n      $groupId: String\n      $courseId: String\n      $planType: String\n      $planSourceId: String\n      $status: String\n      $userSearch: String\n      $courseTitleSearch: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: Int\n      $pageNumber: Int\n      $branch: String\n    ) {\n      findTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        courseId: $courseId\n        planType: $planType\n        planSourceId: $planSourceId\n        status: $status\n        userSearch: $userSearch\n        courseTitleSearch: $courseTitleSearch\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        branch: $branch\n      ) {\n        count\n        data {\n          userId\n          courseId\n          status\n          startedAt\n          stoppedAt\n          pendingReviewAt\n          markedCompletedAt\n          completedAt\n          course {\n            id\n            courseTitle\n            vendorId\n            vendorCourseId\n          }\n          user {\n            id\n            email\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindTranscriptCourses(\n      $missionPartnerId: String\n      $groupId: String\n      $courseId: String\n      $planType: String\n      $planSourceId: String\n      $status: String\n      $userSearch: String\n      $courseTitleSearch: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: Int\n      $pageNumber: Int\n      $branch: String\n    ) {\n      findTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        courseId: $courseId\n        planType: $planType\n        planSourceId: $planSourceId\n        status: $status\n        userSearch: $userSearch\n        courseTitleSearch: $courseTitleSearch\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        branch: $branch\n      ) {\n        count\n        data {\n          userId\n          courseId\n          status\n          startedAt\n          stoppedAt\n          pendingReviewAt\n          markedCompletedAt\n          completedAt\n          course {\n            id\n            courseTitle\n            vendorId\n            vendorCourseId\n          }\n          user {\n            id\n            email\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findTranscriptCoursesByUserId($userId: ID!) {\n      findTranscriptCoursesByUserId(userId: $userId) {\n        data {\n          id\n          courseTitle\n          courseDescription\n          courseDuration\n          courseImage\n          dateUpdated\n          courseUrl\n          startedAt\n          markedCompletedAt\n          completedAt\n          vendorName\n          status\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query findTranscriptCoursesByUserId($userId: ID!) {\n      findTranscriptCoursesByUserId(userId: $userId) {\n        data {\n          id\n          courseTitle\n          courseDescription\n          courseDuration\n          courseImage\n          dateUpdated\n          courseUrl\n          startedAt\n          markedCompletedAt\n          completedAt\n          vendorName\n          status\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMetricsByGroupIdCourseId($groupId: String!, $courseId: String!) {\n      getMetricsByGroupIdCourseId(groupId: $groupId, courseId: $courseId) {\n        startedAt\n        completedAt\n        status\n        user {\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getMetricsByGroupIdCourseId($groupId: String!, $courseId: String!) {\n      getMetricsByGroupIdCourseId(groupId: $groupId, courseId: $courseId) {\n        startedAt\n        completedAt\n        status\n        user {\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetVendorsForAggregateTranscriptCourses($missionPartnerId: String) {\n      getVendorsForAggregateTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n      ) {\n        vendorName\n        vendorId\n      }\n    }\n  "): (typeof documents)["\n    query GetVendorsForAggregateTranscriptCourses($missionPartnerId: String) {\n      getVendorsForAggregateTranscriptCourses(\n        missionPartnerId: $missionPartnerId\n      ) {\n        vendorName\n        vendorId\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation startIndividualCourseById($id: ID!) {\n      startIndividualCourseById(id: $id) {\n        id\n        courseTitle\n        courseDescription\n        courseDuration\n        courseImage\n        dateUpdated\n        courseUrl\n      }\n    }\n  "): (typeof documents)["\n    mutation startIndividualCourseById($id: ID!) {\n      startIndividualCourseById(id: $id) {\n        id\n        courseTitle\n        courseDescription\n        courseDuration\n        courseImage\n        dateUpdated\n        courseUrl\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation stopIndividualCourseById($id: ID!) {\n      stopIndividualCourseById(id: $id) {\n        id\n        courseTitle\n        courseDescription\n        courseDuration\n        courseImage\n        dateUpdated\n        courseUrl\n      }\n    }\n  "): (typeof documents)["\n    mutation stopIndividualCourseById($id: ID!) {\n      stopIndividualCourseById(id: $id) {\n        id\n        courseTitle\n        courseDescription\n        courseDuration\n        courseImage\n        dateUpdated\n        courseUrl\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateAdminManagedCourse($course: CourseInput!) {\n      updateAdminManagedCourse(course: $course) {\n        id\n        vendorId\n        vendorCourseId\n        vendorName\n        courseDescription\n        courseDuration\n        courseTitle\n        courseUrl\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateAdminManagedCourse($course: CourseInput!) {\n      updateAdminManagedCourse(course: $course) {\n        id\n        vendorId\n        vendorCourseId\n        vendorName\n        courseDescription\n        courseDuration\n        courseTitle\n        courseUrl\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AssociateDomainToKsat($ksatId: ID!, $domainId: ID!) {\n      associateDomainToKsat(ksatId: $ksatId, domainId: $domainId)\n    }\n  "): (typeof documents)["\n    mutation AssociateDomainToKsat($ksatId: ID!, $domainId: ID!) {\n      associateDomainToKsat(ksatId: $ksatId, domainId: $domainId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AssociateJobRolesToKsat($ksatId: ID!, $jobRoleIds: [ID!]!) {\n      associateJobRolesToKsat(ksatId: $ksatId, jobRoleIds: $jobRoleIds)\n    }\n  "): (typeof documents)["\n    mutation AssociateJobRolesToKsat($ksatId: ID!, $jobRoleIds: [ID!]!) {\n      associateJobRolesToKsat(ksatId: $ksatId, jobRoleIds: $jobRoleIds)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AssociateLearningObjectivesToKsat(\n      $ksatId: ID!\n      $learningObjectiveIds: [ID!]!\n    ) {\n      associateLearningObjectivesToKsat(\n        ksatId: $ksatId\n        learningObjectiveIds: $learningObjectiveIds\n      )\n    }\n  "): (typeof documents)["\n    mutation AssociateLearningObjectivesToKsat(\n      $ksatId: ID!\n      $learningObjectiveIds: [ID!]!\n    ) {\n      associateLearningObjectivesToKsat(\n        ksatId: $ksatId\n        learningObjectiveIds: $learningObjectiveIds\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateDomain($input: CreateDomainInput!) {\n      createDomain(input: $input) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateDomain($input: CreateDomainInput!) {\n      createDomain(input: $input) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindDomains(\n      $filter: DomainFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortByMostRelevant: SortByMostRelevant\n      $sortDirection: SortDirection\n      $sortBy: DomainSortBy\n    ) {\n      findDomains(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortByMostRelevant: $sortByMostRelevant\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          name\n          shortDescription\n          description\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindDomains(\n      $filter: DomainFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortByMostRelevant: SortByMostRelevant\n      $sortDirection: SortDirection\n      $sortBy: DomainSortBy\n    ) {\n      findDomains(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortByMostRelevant: $sortByMostRelevant\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          name\n          shortDescription\n          description\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindDomainsLazy(\n      $filter: DomainFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortByMostRelevant: SortByMostRelevant\n      $sortDirection: SortDirection\n      $sortBy: DomainSortBy\n    ) {\n      findDomains(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortByMostRelevant: $sortByMostRelevant\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          name\n          shortDescription\n          description\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindDomainsLazy(\n      $filter: DomainFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortByMostRelevant: SortByMostRelevant\n      $sortDirection: SortDirection\n      $sortBy: DomainSortBy\n    ) {\n      findDomains(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortByMostRelevant: $sortByMostRelevant\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          name\n          shortDescription\n          description\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetDomain($getDomainId: ID!) {\n      getDomain(id: $getDomainId) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  "): (typeof documents)["\n    query GetDomain($getDomainId: ID!) {\n      getDomain(id: $getDomainId) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateDomain($updateDomainId: ID!, $input: UpdateDomainInput!) {\n      updateDomain(id: $updateDomainId, input: $input) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateDomain($updateDomainId: ID!, $input: UpdateDomainInput!) {\n      updateDomain(id: $updateDomainId, input: $input) {\n        id\n        name\n        shortDescription\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateKsat($input: CreateKsatInput!) {\n      createKsat(input: $input) {\n        code\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n        id\n        ksatType\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateKsat($input: CreateKsatInput!) {\n      createKsat(input: $input) {\n        code\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n        id\n        ksatType\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindKsats($filter: KsatFilter, $pageSize: Int, $pageNumber: Int, $sortDirection: SortDirection, $sortBy: KsatSortBy) {\n      findKsats(filter: $filter, pageSize: $pageSize, pageNumber: $pageNumber, sortDirection: $sortDirection, sortBy: $sortBy) {\n        total\n        data {\n          ksatType\n          id\n          domain {\n            description\n            id\n            name\n            shortDescription\n          }\n          code\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindKsats($filter: KsatFilter, $pageSize: Int, $pageNumber: Int, $sortDirection: SortDirection, $sortBy: KsatSortBy) {\n      findKsats(filter: $filter, pageSize: $pageSize, pageNumber: $pageNumber, sortDirection: $sortDirection, sortBy: $sortBy) {\n        total\n        data {\n          ksatType\n          id\n          domain {\n            description\n            id\n            name\n            shortDescription\n          }\n          code\n          description\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetKsat($getKsatId: ID!) {\n      getKsat(id: $getKsatId) {\n        id\n        code\n        ksatType\n        description\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetKsat($getKsatId: ID!) {\n      getKsat(id: $getKsatId) {\n        id\n        code\n        ksatType\n        description\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateKsat($updateKsatId: ID!, $input: UpdateKsatInput!) {\n      updateKsat(id: $updateKsatId, input: $input) {\n        id\n        code\n        ksatType\n        description\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateKsat($updateKsatId: ID!, $input: UpdateKsatInput!) {\n      updateKsat(id: $updateKsatId, input: $input) {\n        id\n        code\n        ksatType\n        description\n        domain {\n          id\n          name\n          shortDescription\n          description\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateLearningObjective($input: CreateLearningObjectiveInput!) {\n      createLearningObjective(input: $input) {\n        id\n        description\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateLearningObjective($input: CreateLearningObjectiveInput!) {\n      createLearningObjective(input: $input) {\n        id\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLearningObjectives(\n      $filter: LearningObjectiveFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortDirection: SortDirection\n      $sortBy: LearningObjectiveSortBy\n    ) {\n      findLearningObjectives(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          description\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindLearningObjectives(\n      $filter: LearningObjectiveFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortDirection: SortDirection\n      $sortBy: LearningObjectiveSortBy\n    ) {\n      findLearningObjectives(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          description\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetLearningObjective($getLearningObjectiveId: ID!) {\n      getLearningObjective(id: $getLearningObjectiveId) {\n        id\n        description\n      }\n    }\n  "): (typeof documents)["\n    query GetLearningObjective($getLearningObjectiveId: ID!) {\n      getLearningObjective(id: $getLearningObjectiveId) {\n        id\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateLearningObjective(\n      $updateLearningObjectiveId: ID!\n      $input: UpdateLearningObjectiveInput!\n    ) {\n      updateLearningObjective(id: $updateLearningObjectiveId, input: $input) {\n        id\n        description\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateLearningObjective(\n      $updateLearningObjectiveId: ID!\n      $input: UpdateLearningObjectiveInput!\n    ) {\n      updateLearningObjective(id: $updateLearningObjectiveId, input: $input) {\n        id\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateJobRole($input: CreateJobRoleInput!) {\n      createJobRole(input: $input) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateJobRole($input: CreateJobRoleInput!) {\n      createJobRole(input: $input) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindJobRoles(\n      $filter: JobRoleFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortDirection: SortDirection\n      $sortBy: JobRoleSortBy\n    ) {\n      findJobRoles(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          roleId\n          name\n          description\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindJobRoles(\n      $filter: JobRoleFilter\n      $pageSize: Int\n      $pageNumber: Int\n      $sortDirection: SortDirection\n      $sortBy: JobRoleSortBy\n    ) {\n      findJobRoles(\n        filter: $filter\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n        sortDirection: $sortDirection\n        sortBy: $sortBy\n      ) {\n        data {\n          id\n          roleId\n          name\n          description\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetJobRole($getJobRoleId: ID!) {\n      getJobRole(id: $getJobRoleId) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  "): (typeof documents)["\n    query GetJobRole($getJobRoleId: ID!) {\n      getJobRole(id: $getJobRoleId) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateJobRole($updateJobRoleId: ID!, $input: UpdateJobRoleInput!) {\n      updateJobRole(id: $updateJobRoleId, input: $input) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateJobRole($updateJobRoleId: ID!, $input: UpdateJobRoleInput!) {\n      updateJobRole(id: $updateJobRoleId, input: $input) {\n        id\n        roleId\n        name\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserDownloads {\n    getUserDownloads {\n      id\n      userId\n      type\n      requestedAt\n      completedAt\n      title\n      parameters\n      status\n      error\n    }\n  }\n"): (typeof documents)["\n  query GetUserDownloads {\n    getUserDownloads {\n      id\n      userId\n      type\n      requestedAt\n      completedAt\n      title\n      parameters\n      status\n      error\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteDownload($id: ID!) {\n      deleteDownload(id: $id)\n    }\n  "): (typeof documents)["\n    mutation DeleteDownload($id: ID!) {\n      deleteDownload(id: $id)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateForceMultiplier(\n      $title: String!\n      $summary: String!\n      $missionPartnerId: String\n    ) {\n      createForceMultiplier(\n        title: $title\n        summary: $summary\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        missionPartnerId\n        title\n        status\n        version\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateForceMultiplier(\n      $title: String!\n      $summary: String!\n      $missionPartnerId: String\n    ) {\n      createForceMultiplier(\n        title: $title\n        summary: $summary\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        missionPartnerId\n        title\n        status\n        version\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateNewForceMultiplierVersion($id: String!) {\n      createNewForceMultiplierVersion(id: $id) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateNewForceMultiplierVersion($id: String!) {\n      createNewForceMultiplierVersion(id: $id) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteLibraryItem($input: DeleteLibraryItemInput!) {\n      deleteLibraryItem(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteLibraryItem($input: DeleteLibraryItemInput!) {\n      deleteLibraryItem(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FetchForceMultiplierHeaderData($forceMultiplerId: ID!) {\n      findLatestForceMultiplierByIdAdmin(id: $forceMultiplerId) {\n        id\n        title\n        status\n        version\n      }\n    }\n  "): (typeof documents)["\n    query FetchForceMultiplierHeaderData($forceMultiplerId: ID!) {\n      findLatestForceMultiplierByIdAdmin(id: $forceMultiplerId) {\n        id\n        title\n        status\n        version\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLatestForceMultiplierById($forceMultiplerId: ID!) {\n      findLatestForceMultiplierById(id: $forceMultiplerId) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        totalDuration\n        unsequenced\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n          item {\n            __typename\n            ... on Course {\n              vendorCourseId\n              vendorName\n              courseTitle\n              courseUrl\n              courseDuration\n              source\n            }\n            ... on Assessment {\n              vendorAssessmentId\n              vendorName\n              assessmentTitle\n              assessmentUrl\n              durationInMinutes\n              source\n            }\n            ... on Survey {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n            ... on Lab {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n          }\n        }\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n        type\n        totalDuration\n      }\n    }\n  "): (typeof documents)["\n    query FindLatestForceMultiplierById($forceMultiplerId: ID!) {\n      findLatestForceMultiplierById(id: $forceMultiplerId) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        totalDuration\n        unsequenced\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n          item {\n            __typename\n            ... on Course {\n              vendorCourseId\n              vendorName\n              courseTitle\n              courseUrl\n              courseDuration\n              source\n            }\n            ... on Assessment {\n              vendorAssessmentId\n              vendorName\n              assessmentTitle\n              assessmentUrl\n              durationInMinutes\n              source\n            }\n            ... on Survey {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n            ... on Lab {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n          }\n        }\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n        type\n        totalDuration\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLatestForceMultiplierByIdAdmin($forceMultiplerId: ID!) {\n      findLatestForceMultiplierByIdAdmin(id: $forceMultiplerId) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        totalDuration\n        unsequenced\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n          item {\n            __typename\n            ... on Course {\n              vendorCourseId\n              vendorName\n              courseTitle\n              courseUrl\n              courseDuration\n              source\n            }\n            ... on Assessment {\n              vendorAssessmentId\n              vendorName\n              assessmentTitle\n              assessmentUrl\n              durationInMinutes\n              source\n            }\n            ... on Survey {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n            ... on Lab {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n          }\n        }\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n        type\n        totalDuration\n      }\n    }\n  "): (typeof documents)["\n    query FindLatestForceMultiplierByIdAdmin($forceMultiplerId: ID!) {\n      findLatestForceMultiplierByIdAdmin(id: $forceMultiplerId) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        totalDuration\n        unsequenced\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n          item {\n            __typename\n            ... on Course {\n              vendorCourseId\n              vendorName\n              courseTitle\n              courseUrl\n              courseDuration\n              source\n            }\n            ... on Assessment {\n              vendorAssessmentId\n              vendorName\n              assessmentTitle\n              assessmentUrl\n              durationInMinutes\n              source\n            }\n            ... on Survey {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n            ... on Lab {\n              id\n              name\n              durationInMinutes\n              missionPartner {\n                id\n                name\n              }\n            }\n          }\n        }\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n        type\n        totalDuration\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RemoveItemFromForceMultiplier(\n      $input: RemoveItemFromForceMultiplierInput!\n    ) {\n      removeItemFromForceMultiplier(input: $input) {\n        id\n        version\n        title\n        items {\n          id\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation RemoveItemFromForceMultiplier(\n      $input: RemoveItemFromForceMultiplierInput!\n    ) {\n      removeItemFromForceMultiplier(input: $input) {\n        id\n        version\n        title\n        items {\n          id\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateForceMultiplier($input: ForceMultiplierInput!) {\n      updateForceMultiplier(input: $input) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        libraryItems {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateForceMultiplier($input: ForceMultiplierInput!) {\n      updateForceMultiplier(input: $input) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        modules {\n          id\n          title\n          items {\n            itemId\n          }\n        }\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        libraryItems {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateForceMultiplierContent(\n      $input: UpdateForceMultiplierContentInput!\n    ) {\n      updateForceMultiplierContent(input: $input) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateForceMultiplierContent(\n      $input: UpdateForceMultiplierContentInput!\n    ) {\n      updateForceMultiplierContent(input: $input) {\n        id\n        version\n        title\n        status\n        learningPathUri\n        missionPartnerId\n        content {\n          description\n          summary\n          about {\n            title\n            description\n            image\n            imageAltText\n          }\n        }\n        items {\n          id\n        }\n        conditions {\n          all {\n            value\n            operator\n            fact\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateLibraryItems($input: UpdateLibraryItemsInput!) {\n      updateLibraryItems(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateLibraryItems($input: UpdateLibraryItemsInput!) {\n      updateLibraryItems(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadForceMultiplierImage($file: Upload!, $id: ID!) {\n      uploadForceMultiplierImage(file: $file, id: $id) {\n        url\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadForceMultiplierImage($file: Upload!, $id: ID!) {\n      uploadForceMultiplierImage(file: $file, id: $id) {\n        url\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadLibraryItem($input: UploadLibraryItemInput!) {\n      uploadLibraryItem(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadLibraryItem($input: UploadLibraryItemInput!) {\n      uploadLibraryItem(input: $input) {\n        id\n        libraryItems {\n          id\n          type\n          name\n          url\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddCoursesToGroup(\n      $groupId: ID!\n      $courseIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addCoursesToGroup(\n        groupId: $groupId\n        courseIds: $courseIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "): (typeof documents)["\n    mutation AddCoursesToGroup(\n      $groupId: ID!\n      $courseIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addCoursesToGroup(\n        groupId: $groupId\n        courseIds: $courseIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddTrainingPlansToGroup(\n      $groupId: ID!\n      $plans: [AddPlansInput!]!\n      $missionPartnerId: ID!\n    ) {\n      addTrainingPlansToGroup(\n        groupId: $groupId\n        plans: $plans\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "): (typeof documents)["\n    mutation AddTrainingPlansToGroup(\n      $groupId: ID!\n      $plans: [AddPlansInput!]!\n      $missionPartnerId: ID!\n    ) {\n      addTrainingPlansToGroup(\n        groupId: $groupId\n        plans: $plans\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateGroup($name: String!, $missionPartnerId: String) {\n      createGroup(name: $name, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        groupMemberCount\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateGroup($name: String!, $missionPartnerId: String) {\n      createGroup(name: $name, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        groupMemberCount\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteGroup($groupId: ID!) {\n      deleteGroup(groupId: $groupId)\n    }\n  "): (typeof documents)["\n    mutation DeleteGroup($groupId: ID!) {\n      deleteGroup(groupId: $groupId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findGroupById($groupId: ID!) {\n      findGroupById(groupId: $groupId) {\n        id\n        name\n        missionPartnerId\n        missionPartnerName\n        groupMemberCount\n        trainingPlans {\n          planSourceId\n          planType\n          planVersion\n          title\n          isLatestVersion\n        }\n        courses {\n          courseId\n          vendorName\n          courseTitle\n        }\n      }\n    }\n  "): (typeof documents)["\n    query findGroupById($groupId: ID!) {\n      findGroupById(groupId: $groupId) {\n        id\n        name\n        missionPartnerId\n        missionPartnerName\n        groupMemberCount\n        trainingPlans {\n          planSourceId\n          planType\n          planVersion\n          title\n          isLatestVersion\n        }\n        courses {\n          courseId\n          vendorName\n          courseTitle\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findGroupsByMissionPartnerId($missionPartnerId: ID!) {\n      findGroupsByMissionPartnerId(missionPartnerId: $missionPartnerId) {\n        id\n        name\n        groupMemberCount\n        missionPartnerName\n        missionPartnerId\n        trainingPlans {\n          planSourceId\n          planType\n          planVersion\n          title\n          isLatestVersion\n        }\n        courses {\n          courseId\n          vendorName\n          courseTitle\n        }\n        totalItems\n        CREATED_AT\n        SAVED_AT\n      }\n    }\n  "): (typeof documents)["\n    query findGroupsByMissionPartnerId($missionPartnerId: ID!) {\n      findGroupsByMissionPartnerId(missionPartnerId: $missionPartnerId) {\n        id\n        name\n        groupMemberCount\n        missionPartnerName\n        missionPartnerId\n        trainingPlans {\n          planSourceId\n          planType\n          planVersion\n          title\n          isLatestVersion\n        }\n        courses {\n          courseId\n          vendorName\n          courseTitle\n        }\n        totalItems\n        CREATED_AT\n        SAVED_AT\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetCourseProgress($groupId: ID!) {\n      getCourseProgress(groupId: $groupId) {\n        id\n        title\n        type\n        vendorName\n        notStarted\n        inProgress\n        pendingReview\n        completed\n      }\n    }\n  "): (typeof documents)["\n    query GetCourseProgress($groupId: ID!) {\n      getCourseProgress(groupId: $groupId) {\n        id\n        title\n        type\n        vendorName\n        notStarted\n        inProgress\n        pendingReview\n        completed\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment coreTrainingPlanProgress on TrainingPlanProgress {\n      id\n      title\n      type\n      source\n      notStarted\n      inProgress\n      pendingReview\n      completed\n      __typename\n    }\n    query GetTrainingPlanProgress(\n      $groupId: ID!\n      $planSourceId: ID!\n      $planType: String!\n      $planVersion: String!\n    ) {\n      getTrainingPlanProgress(\n        groupId: $groupId\n        planSourceId: $planSourceId\n        planType: $planType\n        planVersion: $planVersion\n      ) {\n        ...coreTrainingPlanProgress\n        items {\n          id\n          title\n          type\n          source\n          notStarted\n          inProgress\n          pendingReview\n          completed\n          __typename\n        }\n      }\n    }\n  "): (typeof documents)["\n    fragment coreTrainingPlanProgress on TrainingPlanProgress {\n      id\n      title\n      type\n      source\n      notStarted\n      inProgress\n      pendingReview\n      completed\n      __typename\n    }\n    query GetTrainingPlanProgress(\n      $groupId: ID!\n      $planSourceId: ID!\n      $planType: String!\n      $planVersion: String!\n    ) {\n      getTrainingPlanProgress(\n        groupId: $groupId\n        planSourceId: $planSourceId\n        planType: $planType\n        planVersion: $planVersion\n      ) {\n        ...coreTrainingPlanProgress\n        items {\n          id\n          title\n          type\n          source\n          notStarted\n          inProgress\n          pendingReview\n          completed\n          __typename\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateGroup(\n      $groupId: ID!\n      $name: String!\n      $missionPartnerId: String\n    ) {\n      updateGroup(\n        groupId: $groupId\n        name: $name\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        groupMemberCount\n        missionPartnerId\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateGroup(\n      $groupId: ID!\n      $name: String!\n      $missionPartnerId: String\n    ) {\n      updateGroup(\n        groupId: $groupId\n        name: $name\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        groupMemberCount\n        missionPartnerId\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addHostedCourseProgressItemQuizComment(\n      $hostedCourseId: ID!\n      $lessonId: ID!\n      $userId: ID!\n      $questionId: ID!\n      $comment: String!\n    ) {\n      addHostedCourseProgressItemQuizComment(\n        hostedCourseId: $hostedCourseId\n        lessonId: $lessonId\n        userId: $userId\n        questionId: $questionId\n        comment: $comment\n      ) {\n        userId\n        hostedCourseId\n        items\n      }\n    }\n  "): (typeof documents)["\n    mutation addHostedCourseProgressItemQuizComment(\n      $hostedCourseId: ID!\n      $lessonId: ID!\n      $userId: ID!\n      $questionId: ID!\n      $comment: String!\n    ) {\n      addHostedCourseProgressItemQuizComment(\n        hostedCourseId: $hostedCourseId\n        lessonId: $lessonId\n        userId: $userId\n        questionId: $questionId\n        comment: $comment\n      ) {\n        userId\n        hostedCourseId\n        items\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindHostedCourseProgressById($userId: ID!, $hostedCourseId: ID!) {\n      findHostedCourseProgressById(\n        userId: $userId\n        hostedCourseId: $hostedCourseId\n      ) {\n        completedAt\n        hostedCourseId\n        items\n        startedAt\n        status\n        userId\n      }\n    }\n  "): (typeof documents)["\n    query FindHostedCourseProgressById($userId: ID!, $hostedCourseId: ID!) {\n      findHostedCourseProgressById(\n        userId: $userId\n        hostedCourseId: $hostedCourseId\n      ) {\n        completedAt\n        hostedCourseId\n        items\n        startedAt\n        status\n        userId\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateHostedCourseProgressItemQuizAnswers(\n      $hostedCourseId: ID!\n      $lessonId: ID!\n      $userId: ID!\n      $answers: [JSONObject]!\n    ) {\n      updateHostedCourseProgressItemQuizAnswers(\n        hostedCourseId: $hostedCourseId\n        lessonId: $lessonId\n        userId: $userId\n        answers: $answers\n      ) {\n        completedAt\n        hostedCourseId\n        items\n        startedAt\n        status\n        userId\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateHostedCourseProgressItemQuizAnswers(\n      $hostedCourseId: ID!\n      $lessonId: ID!\n      $userId: ID!\n      $answers: [JSONObject]!\n    ) {\n      updateHostedCourseProgressItemQuizAnswers(\n        hostedCourseId: $hostedCourseId\n        lessonId: $lessonId\n        userId: $userId\n        answers: $answers\n      ) {\n        completedAt\n        hostedCourseId\n        items\n        startedAt\n        status\n        userId\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddHostedCourseItem($input: HostedCourseItemInput!) {\n      addHostedCourseItem(input: $input)\n    }\n  "): (typeof documents)["\n    mutation AddHostedCourseItem($input: HostedCourseItemInput!) {\n      addHostedCourseItem(input: $input)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateHostedCourse($hostedCourseInput: NewHostedCourseInput!) {\n      createHostedCourse(hostedCourseInput: $hostedCourseInput) {\n        id\n        name\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateHostedCourse($hostedCourseInput: NewHostedCourseInput!) {\n      createHostedCourse(hostedCourseInput: $hostedCourseInput) {\n        id\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindHostedCourseById($id: ID!) {\n      findHostedCourseById(id: $id) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n        __typename\n      }\n    }\n  "): (typeof documents)["\n    query FindHostedCourseById($id: ID!) {\n      findHostedCourseById(id: $id) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n        __typename\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindHostedCourseItem($id: ID!, $itemId: ID!) {\n      findHostedCourseItem(id: $id, itemId: $itemId) {\n        item\n        status\n      }\n    }\n  "): (typeof documents)["\n    query FindHostedCourseItem($id: ID!, $itemId: ID!) {\n      findHostedCourseItem(id: $id, itemId: $itemId) {\n        item\n        status\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PublishHostedCourse($id: ID!, $missionPartnerId: ID) {\n      publishHostedCourse(id: $id, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        createdAt\n        updatedAt\n        missionPartnerId\n        description\n        duration\n        items\n        status\n      }\n    }\n  "): (typeof documents)["\n    mutation PublishHostedCourse($id: ID!, $missionPartnerId: ID) {\n      publishHostedCourse(id: $id, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        createdAt\n        updatedAt\n        missionPartnerId\n        description\n        duration\n        items\n        status\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateHostedCourse($input: UpdatedHostedCourseInput!) {\n      updateHostedCourse(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n        missionPartnerId\n        description\n        duration\n        items\n        status\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateHostedCourse($input: UpdatedHostedCourseInput!) {\n      updateHostedCourse(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n        missionPartnerId\n        description\n        duration\n        items\n        status\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateHostedCourseItem($input: HostedCourseItemInput!) {\n      updateHostedCourseItem(input: $input)\n    }\n  "): (typeof documents)["\n    mutation UpdateHostedCourseItem($input: HostedCourseItemInput!) {\n      updateHostedCourseItem(input: $input)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadHostedCourseImage($file: Upload!, $missionPartnerId: ID) {\n      uploadHostedCourseImage(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        url\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadHostedCourseImage($file: Upload!, $missionPartnerId: ID) {\n      uploadHostedCourseImage(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        url\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadHostedVideo(\n      $input: HostedVideoInput!\n      $missionPartnerId: ID\n    ) {\n      uploadHostedVideo(input: $input, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadHostedVideo(\n      $input: HostedVideoInput!\n      $missionPartnerId: ID\n    ) {\n      uploadHostedVideo(input: $input, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadOfficeFile($input: OfficeFileInput!, $missionPartnerId: ID) {\n      uploadOfficeFile(input: $input, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadOfficeFile($input: OfficeFileInput!, $missionPartnerId: ID) {\n      uploadOfficeFile(input: $input, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n        duration\n        missionPartnerId\n        createdAt\n        updatedAt\n        items\n        status\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addHostedExamProgressComment(\n      $hostedExamId: ID!\n      $userId: ID!\n      $questionId: ID!\n      $comment: String!\n    ) {\n      addHostedExamProgressComment(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        questionId: $questionId\n        comment: $comment\n      ) {\n        userId\n      }\n    }\n  "): (typeof documents)["\n    mutation addHostedExamProgressComment(\n      $hostedExamId: ID!\n      $userId: ID!\n      $questionId: ID!\n      $comment: String!\n    ) {\n      addHostedExamProgressComment(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        questionId: $questionId\n        comment: $comment\n      ) {\n        userId\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createHostedExamProgress($hostedExamId: ID!) {\n      createHostedExamProgress(hostedExamId: $hostedExamId) {\n        score\n        answers\n        status\n        startedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation createHostedExamProgress($hostedExamId: ID!) {\n      createHostedExamProgress(hostedExamId: $hostedExamId) {\n        score\n        answers\n        status\n        startedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findHostedExamProgressByExamIdUserId(\n      $hostedExamId: ID!\n      $userId: ID\n    ) {\n      findHostedExamProgressByExamIdUserId(\n        hostedExamId: $hostedExamId\n        userId: $userId\n      ) {\n        status\n        score\n        answers\n      }\n    }\n  "): (typeof documents)["\n    query findHostedExamProgressByExamIdUserId(\n      $hostedExamId: ID!\n      $userId: ID\n    ) {\n      findHostedExamProgressByExamIdUserId(\n        hostedExamId: $hostedExamId\n        userId: $userId\n      ) {\n        status\n        score\n        answers\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateHostedExamProgressAnswers(\n      $hostedExamId: ID!\n      $userId: ID\n      $answers: [JSONObject]!\n    ) {\n      updateHostedExamProgressAnswers(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        answers: $answers\n      ) {\n        score\n        answers\n        status\n        startedAt\n        completedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation updateHostedExamProgressAnswers(\n      $hostedExamId: ID!\n      $userId: ID\n      $answers: [JSONObject]!\n    ) {\n      updateHostedExamProgressAnswers(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        answers: $answers\n      ) {\n        score\n        answers\n        status\n        startedAt\n        completedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateHostedExamProgressStatus(\n      $hostedExamId: ID!\n      $userId: ID\n      $status: String!\n    ) {\n      updateHostedExamProgressStatus(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        status: $status\n      ) {\n        score\n        answers\n        status\n        startedAt\n        completedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation updateHostedExamProgressStatus(\n      $hostedExamId: ID!\n      $userId: ID\n      $status: String!\n    ) {\n      updateHostedExamProgressStatus(\n        hostedExamId: $hostedExamId\n        userId: $userId\n        status: $status\n      ) {\n        score\n        answers\n        status\n        startedAt\n        completedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addHostedExamQuestion(\n      $hostedExamId: ID!\n      $questionInput: JSONObject!\n    ) {\n      addHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionInput: $questionInput\n      )\n    }\n  "): (typeof documents)["\n    mutation addHostedExamQuestion(\n      $hostedExamId: ID!\n      $questionInput: JSONObject!\n    ) {\n      addHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionInput: $questionInput\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addItemsToTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaId: ID!\n      $assignedTrainingInput: [AssignedTrainingInput]!\n    ) {\n      addItemsToTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaId: $trainingCriteriaId\n        assignedTrainingInput: $assignedTrainingInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          maxScore\n          minScore\n          ruleType\n          training {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            requiredLicenses {\n              vendorId\n              vendorName\n            }\n            vendors\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation addItemsToTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaId: ID!\n      $assignedTrainingInput: [AssignedTrainingInput]!\n    ) {\n      addItemsToTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaId: $trainingCriteriaId\n        assignedTrainingInput: $assignedTrainingInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          maxScore\n          minScore\n          ruleType\n          training {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            requiredLicenses {\n              vendorId\n              vendorName\n            }\n            vendors\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaInput: AddTrainingCriteriaInput!\n    ) {\n      addTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaInput: $trainingCriteriaInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation addTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaInput: AddTrainingCriteriaInput!\n    ) {\n      addTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaInput: $trainingCriteriaInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateHostedExam($hostedExamInput: NewHostedExamInput!) {\n      createHostedExam(hostedExamInput: $hostedExamInput) {\n        id\n        name\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateHostedExam($hostedExamInput: NewHostedExamInput!) {\n      createHostedExam(hostedExamInput: $hostedExamInput) {\n        id\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaId: ID!\n    ) {\n      deleteTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaId: $trainingCriteriaId\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation deleteTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaId: ID!\n    ) {\n      deleteTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaId: $trainingCriteriaId\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindHostedExamById($hostedExamId: ID!) {\n      findHostedExamById(hostedExamId: $hostedExamId) {\n        id\n        name\n        description\n        durationInMinutes\n        missionPartnerId\n        createdAt\n        updatedAt\n        questions\n        status\n        maxAttempts\n        passingScore\n        trainingCriteria {\n          id\n          maxScore\n          minScore\n          ruleType\n          training {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            requiredLicenses {\n              vendorId\n              vendorName\n            }\n            vendors\n          }\n        }\n        __typename\n      }\n    }\n  "): (typeof documents)["\n    query FindHostedExamById($hostedExamId: ID!) {\n      findHostedExamById(hostedExamId: $hostedExamId) {\n        id\n        name\n        description\n        durationInMinutes\n        missionPartnerId\n        createdAt\n        updatedAt\n        questions\n        status\n        maxAttempts\n        passingScore\n        trainingCriteria {\n          id\n          maxScore\n          minScore\n          ruleType\n          training {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            requiredLicenses {\n              vendorId\n              vendorName\n            }\n            vendors\n          }\n        }\n        __typename\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PublishHostedExam($hostedExamId: ID!) {\n      publishHostedExam(hostedExamId: $hostedExamId) {\n        id\n        name\n        createdAt\n        missionPartnerId\n        description\n        durationInMinutes\n        questions\n        maxAttempts\n        passingScore\n      }\n    }\n  "): (typeof documents)["\n    mutation PublishHostedExam($hostedExamId: ID!) {\n      publishHostedExam(hostedExamId: $hostedExamId) {\n        id\n        name\n        createdAt\n        missionPartnerId\n        description\n        durationInMinutes\n        questions\n        maxAttempts\n        passingScore\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeHostedExamQuestion($hostedExamId: ID!, $questionId: ID!) {\n      removeHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionId: $questionId\n      )\n    }\n  "): (typeof documents)["\n    mutation removeHostedExamQuestion($hostedExamId: ID!, $questionId: ID!) {\n      removeHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionId: $questionId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateHostedExam($hostedExamInput: UpdatedHostedExamInput!) {\n      updateHostedExam(hostedExamInput: $hostedExamInput) {\n        id\n        name\n        createdAt\n        missionPartnerId\n        description\n        durationInMinutes\n        questions\n        maxAttempts\n        passingScore\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateHostedExam($hostedExamInput: UpdatedHostedExamInput!) {\n      updateHostedExam(hostedExamInput: $hostedExamInput) {\n        id\n        name\n        createdAt\n        missionPartnerId\n        description\n        durationInMinutes\n        questions\n        maxAttempts\n        passingScore\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateHostedExamQuestion(\n      $hostedExamId: ID!\n      $questionInput: JSONObject!\n    ) {\n      updateHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionInput: $questionInput\n      )\n    }\n  "): (typeof documents)["\n    mutation updateHostedExamQuestion(\n      $hostedExamId: ID!\n      $questionInput: JSONObject!\n    ) {\n      updateHostedExamQuestion(\n        hostedExamId: $hostedExamId\n        questionInput: $questionInput\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaInput: TrainingCriteriaInput!\n    ) {\n      updateTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaInput: $trainingCriteriaInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation updateTrainingCriteria(\n      $hostedExamId: ID!\n      $trainingCriteriaInput: TrainingCriteriaInput!\n    ) {\n      updateTrainingCriteria(\n        hostedExamId: $hostedExamId\n        trainingCriteriaInput: $trainingCriteriaInput\n      ) {\n        id\n        missionPartnerId\n        trainingCriteria {\n          id\n          minScore\n          maxScore\n          ruleType\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateHostedScorm($hostedScormInput: NewHostedScormInput!) {\n      createHostedScorm(input: $hostedScormInput) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateHostedScorm($hostedScormInput: NewHostedScormInput!) {\n      createHostedScorm(input: $hostedScormInput) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindHostedScormById($id: ID!) {\n      findHostedScormById(id: $id) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  "): (typeof documents)["\n    query FindHostedScormById($id: ID!) {\n      findHostedScormById(id: $id) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PublishHostedScorm($id: ID!, $missionPartnerId: ID) {\n      publishHostedScorm(id: $id, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        missionPartnerId\n        description\n        status\n        scormFilename\n        scormUrl\n      }\n    }\n  "): (typeof documents)["\n    mutation PublishHostedScorm($id: ID!, $missionPartnerId: ID) {\n      publishHostedScorm(id: $id, missionPartnerId: $missionPartnerId) {\n        id\n        name\n        missionPartnerId\n        description\n        status\n        scormFilename\n        scormUrl\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateHostedScorm($hostedScormInput: UpdatedHostedScormInput!) {\n      updateHostedScorm(input: $hostedScormInput) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateHostedScorm($hostedScormInput: UpdatedHostedScormInput!) {\n      updateHostedScorm(input: $hostedScormInput) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadHostedScormPackage(\n      $packageInput: HostedScormPackageInput!\n      $missionPartnerId: ID\n    ) {\n      uploadHostedScormPackage(\n        input: $packageInput\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadHostedScormPackage(\n      $packageInput: HostedScormPackageInput!\n      $missionPartnerId: ID\n    ) {\n      uploadHostedScormPackage(\n        input: $packageInput\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        missionPartnerId\n        name\n        description\n        duration\n        status\n        scormFilename\n        scormUrl\n        createdAt\n        updatedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddLabsToUser($userId: ID!, $labIds: [ID!]!) {\n      addLabsToUser(userId: $userId, labIds: $labIds)\n    }\n  "): (typeof documents)["\n    mutation AddLabsToUser($userId: ID!, $labIds: [ID!]!) {\n      addLabsToUser(userId: $userId, labIds: $labIds)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateLab($input: NewLabInput!) {\n      createLab(input: $input) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateLab($input: NewLabInput!) {\n      createLab(input: $input) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteLab($labId: ID!) {\n      deleteLab(labId: $labId)\n    }\n  "): (typeof documents)["\n    mutation DeleteLab($labId: ID!) {\n      deleteLab(labId: $labId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLabAndInfoById($labId: ID!) {\n      findLabById(labId: $labId) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n      }\n\n      fetchRelevantLabInformation(labId: $labId) {\n        coreConcepts {\n          href\n          id\n          itemType\n          source\n          title\n        }\n        relevantLearningPaths {\n          id\n          itemType\n          schoolId\n          title\n          version\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindLabAndInfoById($labId: ID!) {\n      findLabById(labId: $labId) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n      }\n\n      fetchRelevantLabInformation(labId: $labId) {\n        coreConcepts {\n          href\n          id\n          itemType\n          source\n          title\n        }\n        relevantLearningPaths {\n          id\n          itemType\n          schoolId\n          title\n          version\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLabById($labId: ID!) {\n      findLabById(labId: $labId) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  "): (typeof documents)["\n    query FindLabById($labId: ID!) {\n      findLabById(labId: $labId) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindTranscriptLabsByUserId($userId: ID!) {\n      findTranscriptLabsByUserId(userId: $userId) {\n        lab {\n          id\n          name\n          description\n          previewImageUrl\n          launchConfig {\n            type\n            path\n          }\n          durationInMinutes\n          type\n          status\n          createdAt\n          updatedAt\n        }\n        progress {\n          userId\n          labId\n          status\n          startedAt\n          markedCompletedAt\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindTranscriptLabsByUserId($userId: ID!) {\n      findTranscriptLabsByUserId(userId: $userId) {\n        lab {\n          id\n          name\n          description\n          previewImageUrl\n          launchConfig {\n            type\n            path\n          }\n          durationInMinutes\n          type\n          status\n          createdAt\n          updatedAt\n        }\n        progress {\n          userId\n          labId\n          status\n          startedAt\n          markedCompletedAt\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateLab($input: UpdatedLabInput!) {\n      updateLab(input: $input) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateLab($input: UpdatedLabInput!) {\n      updateLab(input: $input) {\n        id\n        missionPartnerId\n        missionPartner {\n          id\n          name\n        }\n        status\n        name\n        description\n        durationInMinutes\n        previewImageUrl\n        content {\n          id\n          title\n          description\n        }\n        coreConceptItems {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        relevantLearningPaths {\n          itemId\n          itemType\n          itemTitle\n          itemVersion\n        }\n        instructions {\n          id\n          type\n          title\n          content\n          videoFilename\n          videoUrl\n        }\n        launchConfig {\n          type\n          path\n        }\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadPreviewImage($labId: ID!, $file: Upload!) {\n      uploadPreviewImage(labId: $labId, file: $file) {\n        id\n        previewImageUrl\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadPreviewImage($labId: ID!, $file: Upload!) {\n      uploadPreviewImage(labId: $labId, file: $file) {\n        id\n        previewImageUrl\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadTextInstructionImage($labId: ID!, $file: Upload!) {\n      uploadTextInstructionImage(labId: $labId, file: $file) {\n        url\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadTextInstructionImage($labId: ID!, $file: Upload!) {\n      uploadTextInstructionImage(labId: $labId, file: $file) {\n        url\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadVideoInstruction(\n      $labId: ID!\n      $labInstructionId: ID!\n      $file: Upload!\n    ) {\n      uploadVideoInstruction(\n        labId: $labId\n        labInstructionId: $labInstructionId\n        file: $file\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadVideoInstruction(\n      $labId: ID!\n      $labInstructionId: ID!\n      $file: Upload!\n    ) {\n      uploadVideoInstruction(\n        labId: $labId\n        labInstructionId: $labInstructionId\n        file: $file\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLearningPathById($id: ID!) {\n      findLearningPathById(id: $id) {\n        id\n        title\n        schoolId\n        content {\n          description\n          summary\n          valuePropositions {\n            title\n            summary\n          }\n          about {\n            title\n            description\n            image\n          }\n          learningPathSummary {\n            eyebrowTitle\n            title\n            summary\n            valueText\n            image\n            caption {\n              captionText\n              name\n              title\n            }\n          }\n          testimonial {\n            title\n            description\n            image\n            caption {\n              captionText\n              name\n              title\n            }\n          }\n          opportunities {\n            title\n            locations {\n              prefix\n              organization\n              location\n              summary\n            }\n          }\n          skillTree {\n            title\n            description\n            image\n          }\n          callToAction {\n            title\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindLearningPathById($id: ID!) {\n      findLearningPathById(id: $id) {\n        id\n        title\n        schoolId\n        content {\n          description\n          summary\n          valuePropositions {\n            title\n            summary\n          }\n          about {\n            title\n            description\n            image\n          }\n          learningPathSummary {\n            eyebrowTitle\n            title\n            summary\n            valueText\n            image\n            caption {\n              captionText\n              name\n              title\n            }\n          }\n          testimonial {\n            title\n            description\n            image\n            caption {\n              captionText\n              name\n              title\n            }\n          }\n          opportunities {\n            title\n            locations {\n              prefix\n              organization\n              location\n              summary\n            }\n          }\n          skillTree {\n            title\n            description\n            image\n          }\n          callToAction {\n            title\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation approveLicenseRequest($id: ID!) {\n      approveLicenseRequest(id: $id) {\n        id\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        missionPartnerId\n        missionPartnerName\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation approveLicenseRequest($id: ID!) {\n      approveLicenseRequest(id: $id) {\n        id\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        missionPartnerId\n        missionPartnerName\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation declineLicenseRequest($id: ID!) {\n      declineLicenseRequest(id: $id) {\n        id\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        missionPartnerId\n        missionPartnerName\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation declineLicenseRequest($id: ID!) {\n      declineLicenseRequest(id: $id) {\n        id\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        missionPartnerId\n        missionPartnerName\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ExportMissionPartnerLicenseRequests(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorName: String\n      $branch: String\n    ) {\n      exportMissionPartnerLicenseRequests(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorName: $vendorName\n        branch: $branch\n      )\n    }\n  "): (typeof documents)["\n    mutation ExportMissionPartnerLicenseRequests(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorName: String\n      $branch: String\n    ) {\n      exportMissionPartnerLicenseRequests(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorName: $vendorName\n        branch: $branch\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findLicenseRequestById($id: ID!) {\n      findLicenseRequestById(id: $id) {\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "): (typeof documents)["\n    query findLicenseRequestById($id: ID!) {\n      findLicenseRequestById(id: $id) {\n        vendorId\n        vendorName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        userOrganization\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindOpenLicenseRequests($missionPartnerId: ID!) {\n      findOpenLicenseRequests(missionPartnerId: $missionPartnerId) {\n        records {\n          missionPartnerId\n          missionPartnerName\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          userOrganization\n          id\n          status\n          requestedAt\n          approvedAt\n          declinedAt\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindOpenLicenseRequests($missionPartnerId: ID!) {\n      findOpenLicenseRequests(missionPartnerId: $missionPartnerId) {\n        records {\n          missionPartnerId\n          missionPartnerName\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          userOrganization\n          id\n          status\n          requestedAt\n          approvedAt\n          declinedAt\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindOpenLicenseRequestsFilter(\n      $missionPartnerId: ID!\n      $sortDirection: String\n      $sortField: String\n      $search: String\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n      $branch: String\n      $vendorName: String\n    ) {\n      findOpenLicenseRequests(\n        missionPartnerId: $missionPartnerId\n        sortDirection: $sortDirection\n        sortField: $sortField\n        search: $search\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n        branch: $branch\n        vendorName: $vendorName\n      ) {\n        records {\n          missionPartnerId\n          missionPartnerName\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          userOrganization\n          id\n          status\n          requestedAt\n          approvedAt\n          declinedAt\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindOpenLicenseRequestsFilter(\n      $missionPartnerId: ID!\n      $sortDirection: String\n      $sortField: String\n      $search: String\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n      $branch: String\n      $vendorName: String\n    ) {\n      findOpenLicenseRequests(\n        missionPartnerId: $missionPartnerId\n        sortDirection: $sortDirection\n        sortField: $sortField\n        search: $search\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n        branch: $branch\n        vendorName: $vendorName\n      ) {\n        records {\n          missionPartnerId\n          missionPartnerName\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          userOrganization\n          id\n          status\n          requestedAt\n          approvedAt\n          declinedAt\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBranchesForOpenLicenseRequests($missionPartnerId: ID!) {\n      getBranchesForOpenLicenseRequests(missionPartnerId: $missionPartnerId)\n    }\n  "): (typeof documents)["\n    query GetBranchesForOpenLicenseRequests($missionPartnerId: ID!) {\n      getBranchesForOpenLicenseRequests(missionPartnerId: $missionPartnerId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetVendorsForOpenLicenseRequest($missionPartnerId: ID!) {\n      getVendorsForOpenLicenseRequests(missionPartnerId: $missionPartnerId)\n    }\n  "): (typeof documents)["\n    query GetVendorsForOpenLicenseRequest($missionPartnerId: ID!) {\n      getVendorsForOpenLicenseRequests(missionPartnerId: $missionPartnerId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation assignLicense($input: AssignLicenseInput!) {\n      assignLicense(input: $input) {\n        id\n        status\n        error\n      }\n    }\n  "): (typeof documents)["\n    mutation assignLicense($input: AssignLicenseInput!) {\n      assignLicense(input: $input) {\n        id\n        status\n        error\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountAssignedLicensesForMissionPartner($missionPartnerId: ID!) {\n      countAssignedLicensesForMissionPartner(\n        missionPartnerId: $missionPartnerId\n      ) {\n        vendorId\n        count\n      }\n    }\n  "): (typeof documents)["\n    query CountAssignedLicensesForMissionPartner($missionPartnerId: ID!) {\n      countAssignedLicensesForMissionPartner(\n        missionPartnerId: $missionPartnerId\n      ) {\n        vendorId\n        count\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ExportLicenses {\n      exportLicenses\n    }\n  "): (typeof documents)["\n    mutation ExportLicenses {\n      exportLicenses\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ExportMissionPartnerLicensesForVendor(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorId: ID!\n      $vendorName: String!\n    ) {\n      exportMissionPartnerLicensesForVendor(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorId: $vendorId\n        vendorName: $vendorName\n      )\n    }\n  "): (typeof documents)["\n    mutation ExportMissionPartnerLicensesForVendor(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorId: ID!\n      $vendorName: String!\n    ) {\n      exportMissionPartnerLicensesForVendor(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorId: $vendorId\n        vendorName: $vendorName\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLicensesByUserId($userId: ID!, $missionPartnerId: ID!) {\n      licenses: findLicensesByUserId(userId: $userId) {\n        vendorId\n        vendorName\n        userId\n        missionPartnerId\n        missionPartnerName\n        assignedAt\n      }\n      licenseStatusCounts: findLicenseStatusCounts(\n        missionPartnerId: $missionPartnerId\n      ) {\n        active\n        inactive\n        available\n        provisioned\n        vendorId\n        vendorName\n      }\n    }\n  "): (typeof documents)["\n    query FindLicensesByUserId($userId: ID!, $missionPartnerId: ID!) {\n      licenses: findLicensesByUserId(userId: $userId) {\n        vendorId\n        vendorName\n        userId\n        missionPartnerId\n        missionPartnerName\n        assignedAt\n      }\n      licenseStatusCounts: findLicenseStatusCounts(\n        missionPartnerId: $missionPartnerId\n      ) {\n        active\n        inactive\n        available\n        provisioned\n        vendorId\n        vendorName\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLicenseStatusCounts($missionPartnerId: ID!) {\n      findLicenseStatusCounts(missionPartnerId: $missionPartnerId) {\n        active\n        inactive\n        available\n        provisioned\n        vendorId\n        vendorName\n      }\n    }\n  "): (typeof documents)["\n    query FindLicenseStatusCounts($missionPartnerId: ID!) {\n      findLicenseStatusCounts(missionPartnerId: $missionPartnerId) {\n        active\n        inactive\n        available\n        provisioned\n        vendorId\n        vendorName\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLicensesByMissionPartnerAndVendor(\n      $missionPartnerId: ID!\n      $vendorId: ID!\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      findLicensesByMissionPartnerAndVendor(\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          missionPartnerId\n          missionPartnerName\n          assignedAt\n          lastUsedAt\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindLicensesByMissionPartnerAndVendor(\n      $missionPartnerId: ID!\n      $vendorId: ID!\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      findLicensesByMissionPartnerAndVendor(\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          missionPartnerId\n          missionPartnerName\n          assignedAt\n          lastUsedAt\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getLicensesByVendorId(\n      $vendorId: ID!\n      $missionPartnerName: String\n      $branch: String\n      $search: String\n      $sortBy: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      getLicensesByVendorId(\n        vendorId: $vendorId\n        missionPartnerName: $missionPartnerName\n        branch: $branch\n        search: $search\n        sortBy: $sortBy\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          missionPartnerId\n          missionPartnerName\n          assignedAt\n          lastUsedAt\n          user {\n            branch\n            trainingGroup\n            metadata\n          }\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query getLicensesByVendorId(\n      $vendorId: ID!\n      $missionPartnerName: String\n      $branch: String\n      $search: String\n      $sortBy: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      getLicensesByVendorId(\n        vendorId: $vendorId\n        missionPartnerName: $missionPartnerName\n        branch: $branch\n        search: $search\n        sortBy: $sortBy\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          vendorId\n          vendorName\n          userId\n          userFirstName\n          userLastName\n          userEmail\n          missionPartnerId\n          missionPartnerName\n          assignedAt\n          lastUsedAt\n          user {\n            branch\n            trainingGroup\n            metadata\n          }\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeLicenses($input: RemoveLicensesInput!) {\n      removeLicenses(input: $input)\n    }\n  "): (typeof documents)["\n    mutation removeLicenses($input: RemoveLicensesInput!) {\n      removeLicenses(input: $input)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ApproveMissionPartnerRequest(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      approveMissionPartnerRequest(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation ApproveMissionPartnerRequest(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      approveMissionPartnerRequest(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeclineMissionPartnerRequest(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      declineMissionPartnerRequest(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation DeclineMissionPartnerRequest(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      declineMissionPartnerRequest(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindMissionPartnerRequestById($missionPartnerId: ID!, $userId: ID!) {\n      findMissionPartnerRequestById(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "): (typeof documents)["\n    query FindMissionPartnerRequestById($missionPartnerId: ID!, $userId: ID!) {\n      findMissionPartnerRequestById(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindOpenForMissionPartner($missionPartnerId: ID!) {\n      findOpenForMissionPartner(missionPartnerId: $missionPartnerId) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "): (typeof documents)["\n    query FindOpenForMissionPartner($missionPartnerId: ID!) {\n      findOpenForMissionPartner(missionPartnerId: $missionPartnerId) {\n        missionPartnerId\n        missionPartnerName\n        userId\n        userFirstName\n        userLastName\n        userEmail\n        status\n        requestedAt\n        approvedAt\n        declinedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindLearnersBySearch(\n    $missionPartnerId: ID!\n    $searchText: String\n    $onboardingComplete: Boolean\n    $sortKey: String\n    $sortDirection: SortDirection\n    $pageNumber: SafeInt\n    $pageSize: SafeInt\n  ) {\n    findLearnersBySearch(\n      missionPartnerId: $missionPartnerId\n      searchText: $searchText\n      onboardingComplete: $onboardingComplete\n      sortKey: $sortKey\n      sortDirection: $sortDirection\n      pageNumber: $pageNumber\n      pageSize: $pageSize\n    ) {\n      records {\n        id\n        email\n        firstName\n        lastName\n        onboardingCompletedAt\n        keycloakUserCreatedAt\n        userType\n        lastLoginAt\n      }\n      total\n    }\n  }\n"): (typeof documents)["\n  query FindLearnersBySearch(\n    $missionPartnerId: ID!\n    $searchText: String\n    $onboardingComplete: Boolean\n    $sortKey: String\n    $sortDirection: SortDirection\n    $pageNumber: SafeInt\n    $pageSize: SafeInt\n  ) {\n    findLearnersBySearch(\n      missionPartnerId: $missionPartnerId\n      searchText: $searchText\n      onboardingComplete: $onboardingComplete\n      sortKey: $sortKey\n      sortDirection: $sortDirection\n      pageNumber: $pageNumber\n      pageSize: $pageSize\n    ) {\n      records {\n        id\n        email\n        firstName\n        lastName\n        onboardingCompletedAt\n        keycloakUserCreatedAt\n        userType\n        lastLoginAt\n      }\n      total\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddCollectionItems(\n      $ID: ID!\n      $items: [CollectionItemInput!]!\n      $missionPartnerId: ID!\n    ) {\n      addCollectionItems(\n        id: $ID\n        items: $items\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation AddCollectionItems(\n      $ID: ID!\n      $items: [CollectionItemInput!]!\n      $missionPartnerId: ID!\n    ) {\n      addCollectionItems(\n        id: $ID\n        items: $items\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddFeaturedTrainingItems($input: UpdateMissionPartnerInput!) {\n      addFeaturedTrainingItems(input: $input) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          description\n          vendors\n          dateAdded\n          required\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation AddFeaturedTrainingItems($input: UpdateMissionPartnerInput!) {\n      addFeaturedTrainingItems(input: $input) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          description\n          vendors\n          dateAdded\n          required\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query AggregateTranscriptTrainingPlans(\n      $missionPartnerId: String!\n      $planType: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      aggregateTranscriptTrainingPlans(\n        missionPartnerId: $missionPartnerId\n        planType: $planType\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          planType\n          planSourceId\n          planTitle\n          total\n          assigned\n          started\n          stopped\n          completed\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query AggregateTranscriptTrainingPlans(\n      $missionPartnerId: String!\n      $planType: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      aggregateTranscriptTrainingPlans(\n        missionPartnerId: $missionPartnerId\n        planType: $planType\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          planType\n          planSourceId\n          planTitle\n          total\n          assigned\n          started\n          stopped\n          completed\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query AggregateTranscriptTrainingPlansForGroup(\n      $missionPartnerId: String!\n      $groupId: String!\n    ) {\n      aggregateTranscriptTrainingPlansForGroup(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        planType\n        planSourceId\n        planTitle\n        total\n        assigned\n        started\n        stopped\n        completed\n      }\n    }\n  "): (typeof documents)["\n    query AggregateTranscriptTrainingPlansForGroup(\n      $missionPartnerId: String!\n      $groupId: String!\n    ) {\n      aggregateTranscriptTrainingPlansForGroup(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        planType\n        planSourceId\n        planTitle\n        total\n        assigned\n        started\n        stopped\n        completed\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateCollection(\n      $name: String!\n      $description: String!\n      $missionPartnerId: ID!\n    ) {\n      createCollection(\n        name: $name\n        description: $description\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          name\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateCollection(\n      $name: String!\n      $description: String!\n      $missionPartnerId: ID!\n    ) {\n      createCollection(\n        name: $name\n        description: $description\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          name\n          description\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateExportByTypeAndMissionPartnerId(\n      $downloadType: String!\n      $missionPartnerId: String!\n    ) {\n      createExportByTypeAndMissionPartnerId(\n        downloadType: $downloadType\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        userId\n        type\n        requestedAt\n        completedAt\n        title\n        parameters\n        status\n        error\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateExportByTypeAndMissionPartnerId(\n      $downloadType: String!\n      $missionPartnerId: String!\n    ) {\n      createExportByTypeAndMissionPartnerId(\n        downloadType: $downloadType\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        userId\n        type\n        requestedAt\n        completedAt\n        title\n        parameters\n        status\n        error\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateMissionPartner($input: CreateMissionPartnerInput!) {\n      createMissionPartner(input: $input) {\n        id\n        name\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateMissionPartner($input: CreateMissionPartnerInput!) {\n      createMissionPartner(input: $input) {\n        id\n        name\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DisableExportsByTypesForMissionPartner(\n      $downloadTypes: [String!]!\n      $missionPartnerId: String!\n    ) {\n      disableExportsByTypesForMissionPartner(\n        downloadTypes: $downloadTypes\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        enabledReports {\n          id\n          name\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation DisableExportsByTypesForMissionPartner(\n      $downloadTypes: [String!]!\n      $missionPartnerId: String!\n    ) {\n      disableExportsByTypesForMissionPartner(\n        downloadTypes: $downloadTypes\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        enabledReports {\n          id\n          name\n          description\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation EnableExportsByTypesForMissionPartner(\n      $downloadTypes: [String!]!\n      $missionPartnerId: String!\n    ) {\n      enableExportsByTypesForMissionPartner(\n        downloadTypes: $downloadTypes\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        enabledReports {\n          id\n          name\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation EnableExportsByTypesForMissionPartner(\n      $downloadTypes: [String!]!\n      $missionPartnerId: String!\n    ) {\n      enableExportsByTypesForMissionPartner(\n        downloadTypes: $downloadTypes\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        enabledReports {\n          id\n          name\n          description\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportCourseLevelMetricsForTrainingPlan(\n      $missionPartnerId: ID!\n      $groupId: ID\n      $planSourceId: ID!\n      $planVersion: String\n      $title: String\n    ) {\n      exportCourseLevelMetricsForTrainingPlan(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planSourceId: $planSourceId\n        planVersion: $planVersion\n        title: $title\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query ExportCourseLevelMetricsForTrainingPlan(\n      $missionPartnerId: ID!\n      $groupId: ID\n      $planSourceId: ID!\n      $planVersion: String\n      $title: String\n    ) {\n      exportCourseLevelMetricsForTrainingPlan(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planSourceId: $planSourceId\n        planVersion: $planVersion\n        title: $title\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportIndividualLearnerActivity(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      exportIndividualLearnerActivity(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        id\n        userId\n        type\n        requestedAt\n        completedAt\n        title\n        parameters\n        status\n        error\n      }\n    }\n  "): (typeof documents)["\n    query ExportIndividualLearnerActivity(\n      $missionPartnerId: ID!\n      $userId: ID!\n    ) {\n      exportIndividualLearnerActivity(\n        missionPartnerId: $missionPartnerId\n        userId: $userId\n      ) {\n        id\n        userId\n        type\n        requestedAt\n        completedAt\n        title\n        parameters\n        status\n        error\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportLearners($missionPartnerId: ID!, $missionPartnerName: String) {\n      exportLearners(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query ExportLearners($missionPartnerId: ID!, $missionPartnerName: String) {\n      exportLearners(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportQuizExams(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $quizOrExamId: String!\n      $quizOrExamName: String!\n    ) {\n      exportQuizExams(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        quizOrExamId: $quizOrExamId\n        quizOrExamName: $quizOrExamName\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query ExportQuizExams(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $quizOrExamId: String!\n      $quizOrExamName: String!\n    ) {\n      exportQuizExams(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        quizOrExamId: $quizOrExamId\n        quizOrExamName: $quizOrExamName\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportSurveys(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $surveyId: String!\n      $surveyName: String!\n    ) {\n      exportSurveys(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        surveyId: $surveyId\n        surveyName: $surveyName\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query ExportSurveys(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $surveyId: String!\n      $surveyName: String!\n    ) {\n      exportSurveys(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        surveyId: $surveyId\n        surveyName: $surveyName\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportTrainingPlanCoursesForMissionPartner(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorName: String\n      $status: String\n    ) {\n      exportTrainingPlanCoursesForMissionPartner(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorName: $vendorName\n        status: $status\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query ExportTrainingPlanCoursesForMissionPartner(\n      $missionPartnerId: ID!\n      $missionPartnerName: String!\n      $vendorName: String\n      $status: String\n    ) {\n      exportTrainingPlanCoursesForMissionPartner(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n        vendorName: $vendorName\n        status: $status\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportTrainingPlanTranscriptsForGroup(\n      $missionPartnerId: ID!\n      $groupId: ID!\n      $groupName: String\n    ) {\n      exportTrainingPlanTranscriptsForGroup(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        groupName: $groupName\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query ExportTrainingPlanTranscriptsForGroup(\n      $missionPartnerId: ID!\n      $groupId: ID!\n      $groupName: String\n    ) {\n      exportTrainingPlanTranscriptsForGroup(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        groupName: $groupName\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ExportTrainingPlanTranscriptsForMissionPartner(\n      $missionPartnerId: ID!\n      $missionPartnerName: String\n    ) {\n      exportTrainingPlanTranscriptsForMissionPartner(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    query ExportTrainingPlanTranscriptsForMissionPartner(\n      $missionPartnerId: ID!\n      $missionPartnerName: String\n    ) {\n      exportTrainingPlanTranscriptsForMissionPartner(\n        missionPartnerId: $missionPartnerId\n        missionPartnerName: $missionPartnerName\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindAllMissionPartnersAdminPortal {\n      findAllMissionPartnersAdminPortal {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        exams {\n          id\n          name\n          durationInMinutes\n          createdAt\n          updatedAt\n          status\n        }\n        courses {\n          id\n          name\n          duration\n          createdAt\n          updatedAt\n          status\n        }\n        scorms {\n          id\n          name\n          duration\n          status\n          createdAt\n          updatedAt\n        }\n        surveys {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        enabledReports {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindAllMissionPartnersAdminPortal {\n      findAllMissionPartnersAdminPortal {\n        id\n        name\n        affiliateId\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        exams {\n          id\n          name\n          durationInMinutes\n          createdAt\n          updatedAt\n          status\n        }\n        courses {\n          id\n          name\n          duration\n          createdAt\n          updatedAt\n          status\n        }\n        scorms {\n          id\n          name\n          duration\n          status\n          createdAt\n          updatedAt\n        }\n        surveys {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        enabledReports {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindAllMissionPartnersMinDetails {\n      findAllMissionPartnersMinDetails {\n        id\n        name\n        slug\n        description\n        affiliateId\n        logoUrl\n        accessCode\n        customTrainingEnabled\n        trialEnabled\n        trialEndDate\n        sectionType\n        isMarketplaceEnabled\n      }\n    }\n  "): (typeof documents)["\n    query FindAllMissionPartnersMinDetails {\n      findAllMissionPartnersMinDetails {\n        id\n        name\n        slug\n        description\n        affiliateId\n        logoUrl\n        accessCode\n        customTrainingEnabled\n        trialEnabled\n        trialEndDate\n        sectionType\n        isMarketplaceEnabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindCategorizedTimeSpentLearning(\n      $missionPartnerId: ID!\n      $categoryPercentileBreakpoints: [Int]\n      $roundToHour: Boolean\n    ) {\n      findCategorizedTimeSpentLearning(\n        missionPartnerId: $missionPartnerId\n        categoryPercentileBreakpoints: $categoryPercentileBreakpoints\n        roundToHour: $roundToHour\n      ) {\n        categoryBreakpoints\n        usersPerCategory\n      }\n    }\n  "): (typeof documents)["\n    query FindCategorizedTimeSpentLearning(\n      $missionPartnerId: ID!\n      $categoryPercentileBreakpoints: [Int]\n      $roundToHour: Boolean\n    ) {\n      findCategorizedTimeSpentLearning(\n        missionPartnerId: $missionPartnerId\n        categoryPercentileBreakpoints: $categoryPercentileBreakpoints\n        roundToHour: $roundToHour\n      ) {\n        categoryBreakpoints\n        usersPerCategory\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindFeaturedTrainingIds($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planSourceId\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindFeaturedTrainingIds($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planSourceId\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLearnersTotal($missionPartnerId: ID!) {\n      findLearnersBySearch(missionPartnerId: $missionPartnerId) {\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindLearnersTotal($missionPartnerId: ID!) {\n      findLearnersBySearch(missionPartnerId: $missionPartnerId) {\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindMissionPartnerById($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        name\n        description\n        accessCode\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        customTrainingEnabled\n        isMarketplaceEnabled\n        enabledReports {\n          description\n          id\n          name\n        }\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n          autoAssignmentEnabled\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          description\n          vendors\n          dateAdded\n          required\n          assigned\n          started\n          completed\n          stopped\n        }\n        exams {\n          id\n          name\n          durationInMinutes\n          createdAt\n          updatedAt\n          status\n        }\n        courses {\n          id\n          name\n          duration\n          createdAt\n          updatedAt\n          status\n        }\n        scorms {\n          id\n          name\n          duration\n          status\n          createdAt\n          updatedAt\n        }\n        surveys {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        labs {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        forceMultipliers {\n          id\n          title\n          status\n          version\n          enrolledLearners\n          totalDuration\n          changeLog {\n            createdAt\n          }\n          _createdAt\n          _updatedAt\n        }\n        collections {\n          id\n          name\n          description\n          items {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n            dateAdded\n          }\n        }\n        trialEnabled\n        trialStartDate\n        trialEndDate\n      }\n    }\n  "): (typeof documents)["\n    query FindMissionPartnerById($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        name\n        description\n        accessCode\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        customTrainingEnabled\n        isMarketplaceEnabled\n        enabledReports {\n          description\n          id\n          name\n        }\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n          autoAssignmentEnabled\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          description\n          vendors\n          dateAdded\n          required\n          assigned\n          started\n          completed\n          stopped\n        }\n        exams {\n          id\n          name\n          durationInMinutes\n          createdAt\n          updatedAt\n          status\n        }\n        courses {\n          id\n          name\n          duration\n          createdAt\n          updatedAt\n          status\n        }\n        scorms {\n          id\n          name\n          duration\n          status\n          createdAt\n          updatedAt\n        }\n        surveys {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        labs {\n          id\n          name\n          durationInMinutes\n          status\n          createdAt\n          updatedAt\n        }\n        forceMultipliers {\n          id\n          title\n          status\n          version\n          enrolledLearners\n          totalDuration\n          changeLog {\n            createdAt\n          }\n          _createdAt\n          _updatedAt\n        }\n        collections {\n          id\n          name\n          description\n          items {\n            type\n            courseId\n            assessmentId\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n            dateAdded\n          }\n        }\n        trialEnabled\n        trialStartDate\n        trialEndDate\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findMissionPartnerMembersByUserId($userId: ID!) {\n      findMissionPartnerMembersByUserId(userId: $userId) {\n        missionPartnerId\n        missionPartnerName\n        createdAt\n      }\n    }\n  "): (typeof documents)["\n    query findMissionPartnerMembersByUserId($userId: ID!) {\n      findMissionPartnerMembersByUserId(userId: $userId) {\n        missionPartnerId\n        missionPartnerName\n        createdAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindMissionPartnerMinDetails($id: ID!) {\n      findMissionPartnerMinDetails(id: $id) {\n        id\n        name\n        slug\n        description\n        affiliateId\n        logoUrl\n        accessCode\n        customTrainingEnabled\n        trialEnabled\n        trialStartDate\n        trialEndDate\n        isMarketplaceEnabled\n      }\n    }\n  "): (typeof documents)["\n    query FindMissionPartnerMinDetails($id: ID!) {\n      findMissionPartnerMinDetails(id: $id) {\n        id\n        name\n        slug\n        description\n        affiliateId\n        logoUrl\n        accessCode\n        customTrainingEnabled\n        trialEnabled\n        trialStartDate\n        trialEndDate\n        isMarketplaceEnabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindQuizAndExamsBySearch(\n      $missionPartnerId: ID!\n      $search: String\n      $sortKey: String\n      $sortDirection: SortDirection\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findQuizAndExamsBySearch(\n        missionPartnerId: $missionPartnerId\n        search: $search\n        sortKey: $sortKey\n        sortDirection: $sortDirection\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          completed\n          itemId\n          itemName\n          itemType\n          missionPartnerId\n          started\n          total\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindQuizAndExamsBySearch(\n      $missionPartnerId: ID!\n      $search: String\n      $sortKey: String\n      $sortDirection: SortDirection\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findQuizAndExamsBySearch(\n        missionPartnerId: $missionPartnerId\n        search: $search\n        sortKey: $sortKey\n        sortDirection: $sortDirection\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          completed\n          itemId\n          itemName\n          itemType\n          missionPartnerId\n          started\n          total\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindSurveysBySearch(\n      $missionPartnerId: ID!\n      $search: String\n      $sortKey: String\n      $sortDirection: SortDirection\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findSurveysBySearch(\n        missionPartnerId: $missionPartnerId\n        search: $search\n        sortKey: $sortKey\n        sortDirection: $sortDirection\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          missionPartnerId\n          hostedSurveyId\n          hostedSurveyName\n          total\n          started\n          completed\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindSurveysBySearch(\n      $missionPartnerId: ID!\n      $search: String\n      $sortKey: String\n      $sortDirection: SortDirection\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findSurveysBySearch(\n        missionPartnerId: $missionPartnerId\n        search: $search\n        sortKey: $sortKey\n        sortDirection: $sortDirection\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          missionPartnerId\n          hostedSurveyId\n          hostedSurveyName\n          total\n          started\n          completed\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindUserMissionPartnerMemberships {\n      findUserMissionPartnerMemberships {\n        userId\n        missionPartnerId\n        email\n        firstName\n        lastName\n        missionPartnerName\n        logoUrl\n        affiliateId\n        description\n        createdAt\n        trialEnabled\n        trialStartDate\n        trialEndDate\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          dateAdded\n          required\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FindUserMissionPartnerMemberships {\n      findUserMissionPartnerMemberships {\n        userId\n        missionPartnerId\n        email\n        firstName\n        lastName\n        missionPartnerName\n        logoUrl\n        affiliateId\n        description\n        createdAt\n        trialEnabled\n        trialStartDate\n        trialEndDate\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          dateAdded\n          required\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetCoursesQuarterlyByMissionPartner(\n      $missionPartnerId: ID!\n      $maxNumberofQuarters: SafeInt\n    ) {\n      getCoursesQuarterlyByMissionPartner(\n        missionPartnerId: $missionPartnerId\n        maxNumberofQuarters: $maxNumberofQuarters\n      ) {\n        quarter\n        started {\n          numberOfUsers\n          percentageOfUsers\n        }\n        stopped {\n          numberOfUsers\n          percentageOfUsers\n        }\n        completed {\n          numberOfUsers\n          percentageOfUsers\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query GetCoursesQuarterlyByMissionPartner(\n      $missionPartnerId: ID!\n      $maxNumberofQuarters: SafeInt\n    ) {\n      getCoursesQuarterlyByMissionPartner(\n        missionPartnerId: $missionPartnerId\n        maxNumberofQuarters: $maxNumberofQuarters\n      ) {\n        quarter\n        started {\n          numberOfUsers\n          percentageOfUsers\n        }\n        stopped {\n          numberOfUsers\n          percentageOfUsers\n        }\n        completed {\n          numberOfUsers\n          percentageOfUsers\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetMissionPartnerById($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        name\n      }\n    }\n  "): (typeof documents)["\n    query GetMissionPartnerById($id: ID!) {\n      findMissionPartnerById(id: $id) {\n        id\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetPlansQuarterlyByMissionPartner(\n      $missionPartnerId: ID!\n      $maxNumberofQuarters: SafeInt\n    ) {\n      getPlansQuarterlyByMissionPartner(\n        missionPartnerId: $missionPartnerId\n        maxNumberofQuarters: $maxNumberofQuarters\n      ) {\n        quarter\n        assigned {\n          numberOfUsers\n          percentageOfUsers\n        }\n        started {\n          numberOfUsers\n          percentageOfUsers\n        }\n        stopped {\n          numberOfUsers\n          percentageOfUsers\n        }\n        completed {\n          numberOfUsers\n          percentageOfUsers\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query GetPlansQuarterlyByMissionPartner(\n      $missionPartnerId: ID!\n      $maxNumberofQuarters: SafeInt\n    ) {\n      getPlansQuarterlyByMissionPartner(\n        missionPartnerId: $missionPartnerId\n        maxNumberofQuarters: $maxNumberofQuarters\n      ) {\n        quarter\n        assigned {\n          numberOfUsers\n          percentageOfUsers\n        }\n        started {\n          numberOfUsers\n          percentageOfUsers\n        }\n        stopped {\n          numberOfUsers\n          percentageOfUsers\n        }\n        completed {\n          numberOfUsers\n          percentageOfUsers\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetPublicMissionPartnerExports($missionPartnerId: ID!) {\n      getPublicMissionPartnerExports(missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n      }\n    }\n  "): (typeof documents)["\n    query GetPublicMissionPartnerExports($missionPartnerId: ID!) {\n      getPublicMissionPartnerExports(missionPartnerId: $missionPartnerId) {\n        id\n        name\n        description\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RemoveCollection($Id: ID!, $missionPartnerId: ID!) {\n      removeCollection(id: $Id, missionPartnerId: $missionPartnerId) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation RemoveCollection($Id: ID!, $missionPartnerId: ID!) {\n      removeCollection(id: $Id, missionPartnerId: $missionPartnerId) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RemoveCollectionItems(\n      $ID: ID!\n      $items: [RemoveCollectionItemInput!]!\n      $missionPartnerId: ID!\n    ) {\n      removeCollectionItems(\n        id: $ID\n        items: $items\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation RemoveCollectionItems(\n      $ID: ID!\n      $items: [RemoveCollectionItemInput!]!\n      $missionPartnerId: ID!\n    ) {\n      removeCollectionItems(\n        id: $ID\n        items: $items\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n          items {\n            assessmentId\n            courseId\n            dateAdded\n            type\n            planType\n            planSourceId\n            planVersion\n            title\n            description\n            vendors\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation RemoveFeaturedTrainingItems(\n      $missionPartnerId: ID!\n      $input: [RemoveFeaturedTrainingItemsInput]!\n    ) {\n      removeFeaturedTrainingItems(\n        missionPartnerId: $missionPartnerId\n        input: $input\n      ) {\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation RemoveFeaturedTrainingItems(\n      $missionPartnerId: ID!\n      $input: [RemoveFeaturedTrainingItemsInput]!\n    ) {\n      removeFeaturedTrainingItems(\n        missionPartnerId: $missionPartnerId\n        input: $input\n      ) {\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SendReminderToNonOnboarded($missionPartnerId: ID!) {\n      sendReminderToNonOnboarded(missionPartnerId: $missionPartnerId) {\n        successfulEmailsSent\n        emailsNotSent\n      }\n    }\n  "): (typeof documents)["\n    query SendReminderToNonOnboarded($missionPartnerId: ID!) {\n      sendReminderToNonOnboarded(missionPartnerId: $missionPartnerId) {\n        successfulEmailsSent\n        emailsNotSent\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ToggleMissionPartnerTrial(\n      $missionPartnerId: ID!\n      $enable: Boolean!\n      $startDate: DateTime\n      $endDate: DateTime\n    ) {\n      toggleMissionPartnerTrial(\n        missionPartnerId: $missionPartnerId\n        enable: $enable\n        startDate: $startDate\n        endDate: $endDate\n      ) {\n        trialEnabled\n        trialStartDate\n        trialEndDate\n      }\n    }\n  "): (typeof documents)["\n    mutation ToggleMissionPartnerTrial(\n      $missionPartnerId: ID!\n      $enable: Boolean!\n      $startDate: DateTime\n      $endDate: DateTime\n    ) {\n      toggleMissionPartnerTrial(\n        missionPartnerId: $missionPartnerId\n        enable: $enable\n        startDate: $startDate\n        endDate: $endDate\n      ) {\n        trialEnabled\n        trialStartDate\n        trialEndDate\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ToggleRequiredFeaturedTraining(\n    $missionPartnerId: ID!\n    $courseId: ID\n    $assessmentId: ID\n    $labId: ID\n    $planType: String\n    $planSourceId: String\n    $planVersion: String\n  ) {\n    toggleRequiredFeaturedTraining(\n      missionPartnerId: $missionPartnerId\n      courseId: $courseId\n      assessmentId: $assessmentId\n      labId: $labId\n      planType: $planType\n      planSourceId: $planSourceId\n      planVersion: $planVersion\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation ToggleRequiredFeaturedTraining(\n    $missionPartnerId: ID!\n    $courseId: ID\n    $assessmentId: ID\n    $labId: ID\n    $planType: String\n    $planSourceId: String\n    $planVersion: String\n  ) {\n    toggleRequiredFeaturedTraining(\n      missionPartnerId: $missionPartnerId\n      courseId: $courseId\n      assessmentId: $assessmentId\n      labId: $labId\n      planType: $planType\n      planSourceId: $planSourceId\n      planVersion: $planVersion\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateCollectionItems(\n      $Id: ID!\n      $name: String\n      $description: String\n      $missionPartnerId: ID!\n    ) {\n      updateCollection(\n        id: $Id\n        name: $name\n        description: $description\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateCollectionItems(\n      $Id: ID!\n      $name: String\n      $description: String\n      $missionPartnerId: ID!\n    ) {\n      updateCollection(\n        id: $Id\n        name: $name\n        description: $description\n        missionPartnerId: $missionPartnerId\n      ) {\n        collections {\n          id\n          name\n          description\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateCustomTrainingEnabled(\n      $input: UpdateCustomTrainingEnabledInput!\n    ) {\n      updateCustomTrainingEnabled(input: $input) {\n        id\n        name\n        customTrainingEnabled\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateCustomTrainingEnabled(\n      $input: UpdateCustomTrainingEnabledInput!\n    ) {\n      updateCustomTrainingEnabled(input: $input) {\n        id\n        name\n        customTrainingEnabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateIsMarketplaceEnabled(\n      $input: UpdateIsMarketplaceEnabledInput!\n    ) {\n      updateIsMarketplaceEnabled(input: $input) {\n        id\n        name\n        isMarketplaceEnabled\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateIsMarketplaceEnabled(\n      $input: UpdateIsMarketplaceEnabledInput!\n    ) {\n      updateIsMarketplaceEnabled(input: $input) {\n        id\n        name\n        isMarketplaceEnabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateMissionPartner($input: UpdateMissionPartnerInput!) {\n      updateMissionPartner(input: $input) {\n        id\n        name\n        description\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          dateAdded\n          required\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateMissionPartner($input: UpdateMissionPartnerInput!) {\n      updateMissionPartner(input: $input) {\n        id\n        name\n        description\n        affiliateId\n        sectionType\n        logoUrl\n        slug\n        provisionedLicenses {\n          vendorId\n          vendorName\n          provisioned\n        }\n        featuredTraining {\n          type\n          courseId\n          assessmentId\n          labId\n          planType\n          planSourceId\n          planVersion\n          title\n          dateAdded\n          required\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UploadMissionPartnerLogo($file: Upload, $missionPartnerId: ID!) {\n      uploadMissionPartnerLogo(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        url\n      }\n    }\n  "): (typeof documents)["\n    mutation UploadMissionPartnerLogo($file: Upload, $missionPartnerId: ID!) {\n      uploadMissionPartnerLogo(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        url\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateRole($input: CreateRoleInput!) {\n      createRole(input: $input) {\n        userId\n        missionPartnerId\n        name\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateRole($input: CreateRoleInput!) {\n      createRole(input: $input) {\n        userId\n        missionPartnerId\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteRoles(\n      $userIds: [ID!]\n      $missionPartnerId: ID!\n      $name: RoleName!\n    ) {\n      deleteRoles(\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n        name: $name\n      )\n    }\n  "): (typeof documents)["\n    mutation DeleteRoles(\n      $userIds: [ID!]\n      $missionPartnerId: ID!\n      $name: RoleName!\n    ) {\n      deleteRoles(\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n        name: $name\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindRolesByMissionPartnerId($missionPartnerId: ID!) {\n      findRolesByMissionPartnerId(missionPartnerId: $missionPartnerId) {\n        userId\n        userName\n        userEmail\n        userDate\n        name\n      }\n    }\n  "): (typeof documents)["\n    query FindRolesByMissionPartnerId($missionPartnerId: ID!) {\n      findRolesByMissionPartnerId(missionPartnerId: $missionPartnerId) {\n        userId\n        userName\n        userEmail\n        userDate\n        name\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getUserForRoles {\n      getUser {\n        roles {\n          name\n          missionPartnerId\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getUserForRoles {\n      getUser {\n        roles {\n          name\n          missionPartnerId\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetServiceHealth {\n      getServiceHealth {\n        services {\n          name\n          status\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetServiceHealth {\n      getServiceHealth {\n        services {\n          name\n          status\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DisableSetting($id: ID!) {\n      disableSetting(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  "): (typeof documents)["\n    mutation DisableSetting($id: ID!) {\n      disableSetting(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation EnableSetting($id: ID!) {\n      enableSetting(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  "): (typeof documents)["\n    mutation EnableSetting($id: ID!) {\n      enableSetting(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindAllSettings {\n      findAllSettings {\n        id\n        name\n        enabled\n      }\n    }\n  "): (typeof documents)["\n    query FindAllSettings {\n      findAllSettings {\n        id\n        name\n        enabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindSettingById($id: ID!) {\n      findSettingById(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  "): (typeof documents)["\n    query FindSettingById($id: ID!) {\n      findSettingById(id: $id) {\n        id\n        name\n        enabled\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findSkillById($id: ID!) {\n      findSkillById(id: $id) {\n        id\n        title\n        learningPaths {\n          id\n          title\n          schoolId\n          content {\n            summary\n          }\n        }\n        content {\n          summary\n          description\n          valuePropositions {\n            title\n            summary\n          }\n          about {\n            title\n            description\n            image\n          }\n          skillTree {\n            title\n            description\n            image\n          }\n          callToAction {\n            title\n          }\n        }\n        vendors\n        totalItems\n        totalDuration\n        enrolledLearners\n      }\n    }\n  "): (typeof documents)["\n    query findSkillById($id: ID!) {\n      findSkillById(id: $id) {\n        id\n        title\n        learningPaths {\n          id\n          title\n          schoolId\n          content {\n            summary\n          }\n        }\n        content {\n          summary\n          description\n          valuePropositions {\n            title\n            summary\n          }\n          about {\n            title\n            description\n            image\n          }\n          skillTree {\n            title\n            description\n            image\n          }\n          callToAction {\n            title\n          }\n        }\n        vendors\n        totalItems\n        totalDuration\n        enrolledLearners\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateSurvey($surveyInput: NewSurveyInput!) {\n      createSurvey(input: $surveyInput) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateSurvey($surveyInput: NewSurveyInput!) {\n      createSurvey(input: $surveyInput) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindSurveyById($id: ID!) {\n      findSurveyById(id: $id) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  "): (typeof documents)["\n    query FindSurveyById($id: ID!) {\n      findSurveyById(id: $id) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n        __typename\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation PublishSurvey($id: ID!) {\n      publishSurvey(id: $id) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation PublishSurvey($id: ID!) {\n      publishSurvey(id: $id) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateSurvey($input: UpdatedSurveyInput!) {\n      updateSurvey(input: $input) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateSurvey($input: UpdatedSurveyInput!) {\n      updateSurvey(input: $input) {\n        id\n        missionPartnerId\n        missionPartner {\n          name\n        }\n        name\n        description\n        durationInMinutes\n        status\n        questions\n        createdAt\n        updatedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountAllCourses {\n      countAllCourses {\n        total\n      }\n    }\n  "): (typeof documents)["\n    query CountAllCourses {\n      countAllCourses {\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetTrainingPlanMetrics($dayRange: SafeInt) {\n      getTrainingPlanMetrics(dayRange: $dayRange) {\n        totalPlans\n        plansInProgress\n        plansCompleted\n      }\n    }\n  "): (typeof documents)["\n    query GetTrainingPlanMetrics($dayRange: SafeInt) {\n      getTrainingPlanMetrics(dayRange: $dayRange) {\n        totalPlans\n        plansInProgress\n        plansCompleted\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getTranscriptCourseMetrics($branch: String!, $dayRange: SafeInt) {\n      getTranscriptCourseMetrics(branch: $branch, dayRange: $dayRange) {\n        totalCourses\n        coursesInProgress\n        coursesCompleted\n        coursesStopped\n        coursesPendingReview\n        totalHoursCompleted\n      }\n    }\n  "): (typeof documents)["\n    query getTranscriptCourseMetrics($branch: String!, $dayRange: SafeInt) {\n      getTranscriptCourseMetrics(branch: $branch, dayRange: $dayRange) {\n        totalCourses\n        coursesInProgress\n        coursesCompleted\n        coursesStopped\n        coursesPendingReview\n        totalHoursCompleted\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getTrainingPlanMetricsAll {\n      getTrainingPlanMetrics {\n        totalPlans\n        plansInProgress\n        plansCompleted\n        plansStopped\n        plansAssigned\n      }\n    }\n  "): (typeof documents)["\n    query getTrainingPlanMetricsAll {\n      getTrainingPlanMetrics {\n        totalPlans\n        plansInProgress\n        plansCompleted\n        plansStopped\n        plansAssigned\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getTranscriptCourseMetricsExtra(\n      $branch: String!\n      $trainingGroup: String\n      $missionPartnerId: String\n      $fieldCommand: String\n      $spaceDelta: String\n      $squadron: String\n      $organization: String\n    ) {\n      getTranscriptCourseMetrics(\n        branch: $branch\n        trainingGroup: $trainingGroup\n        missionPartnerId: $missionPartnerId\n        fieldCommand: $fieldCommand\n        spaceDelta: $spaceDelta\n        squadron: $squadron\n        organization: $organization\n      ) {\n        totalCourses\n        coursesInProgress\n        coursesCompleted\n        coursesStopped\n        coursesPendingReview\n        totalHoursCompleted\n      }\n    }\n  "): (typeof documents)["\n    query getTranscriptCourseMetricsExtra(\n      $branch: String!\n      $trainingGroup: String\n      $missionPartnerId: String\n      $fieldCommand: String\n      $spaceDelta: String\n      $squadron: String\n      $organization: String\n    ) {\n      getTranscriptCourseMetrics(\n        branch: $branch\n        trainingGroup: $trainingGroup\n        missionPartnerId: $missionPartnerId\n        fieldCommand: $fieldCommand\n        spaceDelta: $spaceDelta\n        squadron: $squadron\n        organization: $organization\n      ) {\n        totalCourses\n        coursesInProgress\n        coursesCompleted\n        coursesStopped\n        coursesPendingReview\n        totalHoursCompleted\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getTrainingPlansByUserId($userId: ID!) {\n    getTrainingPlansByUserId(userId: $userId) {\n      id\n      userId\n      planType\n      planSourceId\n      title\n      startedAt\n      completedAt\n      activities {\n        activityType\n        masteryLevel\n        course {\n          id\n          vendorId\n          vendorCourseId\n          courseTitle\n          courseUrl\n          courseDescription\n          courseDuration\n        }\n        startedAt\n        markedCompletedAt\n        completedAt\n        specialization {\n          id\n          title\n          instructions\n          options {\n            title\n            text\n            value\n          }\n        }\n        value\n      }\n      stats {\n        group\n        total\n        completed\n        completedPercentage\n        duration\n        completedAt\n      }\n      nextActivity {\n        activityType\n        masteryLevel\n        course {\n          id\n          vendorId\n          vendorCourseId\n          courseTitle\n          courseUrl\n          courseDescription\n          courseDuration\n        }\n        startedAt\n        markedCompletedAt\n        completedAt\n        specialization {\n          id\n          title\n          instructions\n          options {\n            title\n            text\n            value\n          }\n        }\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTrainingPlansByUserId($userId: ID!) {\n    getTrainingPlansByUserId(userId: $userId) {\n      id\n      userId\n      planType\n      planSourceId\n      title\n      startedAt\n      completedAt\n      activities {\n        activityType\n        masteryLevel\n        course {\n          id\n          vendorId\n          vendorCourseId\n          courseTitle\n          courseUrl\n          courseDescription\n          courseDuration\n        }\n        startedAt\n        markedCompletedAt\n        completedAt\n        specialization {\n          id\n          title\n          instructions\n          options {\n            title\n            text\n            value\n          }\n        }\n        value\n      }\n      stats {\n        group\n        total\n        completed\n        completedPercentage\n        duration\n        completedAt\n      }\n      nextActivity {\n        activityType\n        masteryLevel\n        course {\n          id\n          vendorId\n          vendorCourseId\n          courseTitle\n          courseUrl\n          courseDescription\n          courseDuration\n        }\n        startedAt\n        markedCompletedAt\n        completedAt\n        specialization {\n          id\n          title\n          instructions\n          options {\n            title\n            text\n            value\n          }\n        }\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindTranscriptTrainingPlans(\n      $missionPartnerId: String\n      $groupId: String\n      $planType: String\n      $planSourceId: String\n      $status: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      findTranscriptTrainingPlans(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planType: $planType\n        planSourceId: $planSourceId\n        status: $status\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          userId\n          trainingPlanId\n          status\n          assignedAt\n          startedAt\n          stoppedAt\n          completedAt\n          trainingPlan {\n            planType\n            planSourceId\n            title\n          }\n          user {\n            id\n            firstName\n            lastName\n            email\n          }\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindTranscriptTrainingPlans(\n      $missionPartnerId: String\n      $groupId: String\n      $planType: String\n      $planSourceId: String\n      $status: String\n      $search: String\n      $sortField: String\n      $sortDirection: String\n      $pageSize: SafeInt\n      $pageNumber: SafeInt\n    ) {\n      findTranscriptTrainingPlans(\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n        planType: $planType\n        planSourceId: $planSourceId\n        status: $status\n        search: $search\n        sortField: $sortField\n        sortDirection: $sortDirection\n        pageSize: $pageSize\n        pageNumber: $pageNumber\n      ) {\n        records {\n          userId\n          trainingPlanId\n          status\n          assignedAt\n          startedAt\n          stoppedAt\n          completedAt\n          trainingPlan {\n            planType\n            planSourceId\n            title\n          }\n          user {\n            id\n            firstName\n            lastName\n            email\n          }\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getAllTrainingPlans {\n      getAllTrainingPlans {\n        id\n        userId\n        planType\n        planSourceId\n        title\n        startedAt\n        completedAt\n        activities {\n          activityType\n          masteryLevel\n          course {\n            id\n            vendorId\n            vendorCourseId\n            courseTitle\n            courseUrl\n            courseDescription\n            courseDuration\n          }\n          startedAt\n          markedCompletedAt\n          completedAt\n          specialization {\n            id\n            title\n            instructions\n            options {\n              title\n              text\n              value\n            }\n          }\n          value\n        }\n        stats {\n          group\n          total\n          completed\n          completedPercentage\n          duration\n          completedAt\n        }\n        nextActivity {\n          activityType\n          masteryLevel\n          course {\n            id\n            vendorId\n            vendorCourseId\n            courseTitle\n            courseUrl\n            courseDescription\n            courseDuration\n          }\n          startedAt\n          markedCompletedAt\n          completedAt\n          specialization {\n            id\n            title\n            instructions\n            options {\n              title\n              text\n              value\n            }\n          }\n          value\n        }\n      }\n    }\n  "): (typeof documents)["\n    query getAllTrainingPlans {\n      getAllTrainingPlans {\n        id\n        userId\n        planType\n        planSourceId\n        title\n        startedAt\n        completedAt\n        activities {\n          activityType\n          masteryLevel\n          course {\n            id\n            vendorId\n            vendorCourseId\n            courseTitle\n            courseUrl\n            courseDescription\n            courseDuration\n          }\n          startedAt\n          markedCompletedAt\n          completedAt\n          specialization {\n            id\n            title\n            instructions\n            options {\n              title\n              text\n              value\n            }\n          }\n          value\n        }\n        stats {\n          group\n          total\n          completed\n          completedPercentage\n          duration\n          completedAt\n        }\n        nextActivity {\n          activityType\n          masteryLevel\n          course {\n            id\n            vendorId\n            vendorCourseId\n            courseTitle\n            courseUrl\n            courseDescription\n            courseDuration\n          }\n          startedAt\n          markedCompletedAt\n          completedAt\n          specialization {\n            id\n            title\n            instructions\n            options {\n              title\n              text\n              value\n            }\n          }\n          value\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query LearnerTrainingPlan($userId: ID!) {\n      getTrainingPlansByUserId(userId: $userId) {\n        id\n        userId\n        planType\n        planSourceId\n        title\n        assignedAt\n        startedAt\n        completedAt\n        stoppedAt\n      }\n    }\n  "): (typeof documents)["\n    query LearnerTrainingPlan($userId: ID!) {\n      getTrainingPlansByUserId(userId: $userId) {\n        id\n        userId\n        planType\n        planSourceId\n        title\n        assignedAt\n        startedAt\n        completedAt\n        stoppedAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetTopCourses($missionPartnerId: String, $limit: SafeInt) {\n      getTopCourses(missionPartnerId: $missionPartnerId, limit: $limit) {\n        count\n        id\n        title\n      }\n    }\n  "): (typeof documents)["\n    query GetTopCourses($missionPartnerId: String, $limit: SafeInt) {\n      getTopCourses(missionPartnerId: $missionPartnerId, limit: $limit) {\n        count\n        id\n        title\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetTopPlans($missionPartnerId: String, $limit: SafeInt) {\n      getTopPlans(missionPartnerId: $missionPartnerId, limit: $limit) {\n        title\n        planType\n        planSourceId\n        count\n      }\n    }\n  "): (typeof documents)["\n    query GetTopPlans($missionPartnerId: String, $limit: SafeInt) {\n      getTopPlans(missionPartnerId: $missionPartnerId, limit: $limit) {\n        title\n        planType\n        planSourceId\n        count\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserUploads {\n    getUserUploads {\n      id\n      userId\n      type\n      requestedAt\n      completedAt\n      title\n      parameters\n      status\n      error\n    }\n  }\n"): (typeof documents)["\n  query GetUserUploads {\n    getUserUploads {\n      id\n      userId\n      type\n      requestedAt\n      completedAt\n      title\n      parameters\n      status\n      error\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteUpload($id: ID!) {\n      deleteUpload(id: $id)\n    }\n  "): (typeof documents)["\n    mutation DeleteUpload($id: ID!) {\n      deleteUpload(id: $id)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddAssessmentsToUser(\n      $userId: ID!\n      $assessmentIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addAssessmentsToUser(\n        userId: $userId\n        assessmentIds: $assessmentIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "): (typeof documents)["\n    mutation AddAssessmentsToUser(\n      $userId: ID!\n      $assessmentIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addAssessmentsToUser(\n        userId: $userId\n        assessmentIds: $assessmentIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddCoursesToUser(\n      $userId: ID!\n      $courseIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addCoursesToUser(\n        userId: $userId\n        courseIds: $courseIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "): (typeof documents)["\n    mutation AddCoursesToUser(\n      $userId: ID!\n      $courseIds: [ID]!\n      $missionPartnerId: ID!\n    ) {\n      addCoursesToUser(\n        userId: $userId\n        courseIds: $courseIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addGroupMembership($input: AddGroupMembershipInput!) {\n      addGroupMembership(input: $input) {\n        id\n        firstName\n        lastName\n        email\n        groupMemberships {\n          groupName\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation addGroupMembership($input: AddGroupMembershipInput!) {\n      addGroupMembership(input: $input) {\n        id\n        firstName\n        lastName\n        email\n        groupMemberships {\n          groupName\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddLicenseToUsers(\n      $file: Upload!\n      $missionPartnerId: ID!\n      $vendorId: ID!\n    ) {\n      addLicenseToUsers(\n        file: $file\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "): (typeof documents)["\n    mutation AddLicenseToUsers(\n      $file: Upload!\n      $missionPartnerId: ID!\n      $vendorId: ID!\n    ) {\n      addLicenseToUsers(\n        file: $file\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateRecentMissionPartner($missionPartnerId: ID!) {\n      updateRecentMissionPartner(missionPartnerId: $missionPartnerId)\n    }\n  "): (typeof documents)["\n    mutation UpdateRecentMissionPartner($missionPartnerId: ID!) {\n      updateRecentMissionPartner(missionPartnerId: $missionPartnerId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountAllUsers(\n      $branch: String\n      $trainingGroup: String\n      $fieldCommand: String\n      $spaceDelta: String\n      $squadron: String\n      $organization: String\n    ) {\n      countAllUsers(\n        branch: $branch\n        trainingGroup: $trainingGroup\n        fieldCommand: $fieldCommand\n        spaceDelta: $spaceDelta\n        squadron: $squadron\n        organization: $organization\n      )\n    }\n  "): (typeof documents)["\n    query CountAllUsers(\n      $branch: String\n      $trainingGroup: String\n      $fieldCommand: String\n      $spaceDelta: String\n      $squadron: String\n      $organization: String\n    ) {\n      countAllUsers(\n        branch: $branch\n        trainingGroup: $trainingGroup\n        fieldCommand: $fieldCommand\n        spaceDelta: $spaceDelta\n        squadron: $squadron\n        organization: $organization\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountCacEnabledUsers($branch: String!) {\n      countCacEnabledUsers(branch: $branch)\n    }\n  "): (typeof documents)["\n    query CountCacEnabledUsers($branch: String!) {\n      countCacEnabledUsers(branch: $branch)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountNewUsers($branch: String!, $dayRange: SafeInt) {\n      countNewUsers(branch: $branch, dayRange: $dayRange)\n    }\n  "): (typeof documents)["\n    query CountNewUsers($branch: String!, $dayRange: SafeInt) {\n      countNewUsers(branch: $branch, dayRange: $dayRange)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ExportUsers($branch: String) {\n      exportUsers(branch: $branch)\n    }\n  "): (typeof documents)["\n    mutation ExportUsers($branch: String) {\n      exportUsers(branch: $branch)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindAwardedBadges($userId: ID) {\n      findAwardedBadges(userId: $userId) {\n        badgeId\n        title\n        description\n        recipient\n        imageUrl\n        jsonUrl\n        issuedAt\n        expiresAt\n      }\n    }\n  "): (typeof documents)["\n    query FindAwardedBadges($userId: ID) {\n      findAwardedBadges(userId: $userId) {\n        badgeId\n        title\n        description\n        recipient\n        imageUrl\n        jsonUrl\n        issuedAt\n        expiresAt\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findLearnerCohorts($userId: ID!, $missionPartnerId: ID!) {\n      getUserCohorts(userId: $userId, missionPartnerId: $missionPartnerId) {\n        group {\n          id\n          name\n          createdAt\n        }\n        count\n        missionPartner {\n          id\n          name\n        }\n      }\n    }\n  "): (typeof documents)["\n    query findLearnerCohorts($userId: ID!, $missionPartnerId: ID!) {\n      getUserCohorts(userId: $userId, missionPartnerId: $missionPartnerId) {\n        group {\n          id\n          name\n          createdAt\n        }\n        count\n        missionPartner {\n          id\n          name\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindUsersByGroupId($groupId: String!) {\n      findUsersByGroupId(groupId: $groupId) {\n        id\n        email\n        firstName\n        lastName\n      }\n    }\n  "): (typeof documents)["\n    query FindUsersByGroupId($groupId: String!) {\n      findUsersByGroupId(groupId: $groupId) {\n        id\n        email\n        firstName\n        lastName\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindUsersBySearchText(\n      $searchText: String!\n      $branch: String\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findUsersBySearchText(\n        searchText: $searchText\n        branch: $branch\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          id\n          firstName\n          lastName\n          email\n          photoUrl\n          branch\n          userType\n          grade\n          occupationalCode\n          metadata\n          currentCareer\n          onboardingCompletedAt\n          licenseOnboardingCompletedAt\n          showThirdPartySiteWarning\n          badgeNotifications\n        }\n        total\n      }\n    }\n  "): (typeof documents)["\n    query FindUsersBySearchText(\n      $searchText: String!\n      $branch: String\n      $pageNumber: SafeInt\n      $pageSize: SafeInt\n    ) {\n      findUsersBySearchText(\n        searchText: $searchText\n        branch: $branch\n        pageNumber: $pageNumber\n        pageSize: $pageSize\n      ) {\n        records {\n          id\n          firstName\n          lastName\n          email\n          photoUrl\n          branch\n          userType\n          grade\n          occupationalCode\n          metadata\n          currentCareer\n          onboardingCompletedAt\n          licenseOnboardingCompletedAt\n          showThirdPartySiteWarning\n          badgeNotifications\n        }\n        total\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUser {\n      getUser {\n        id\n        firstName\n        lastName\n        phoneNumber\n        email\n        photoUrl\n        userType\n        branch\n        grade\n        occupationalCode\n        metadata\n        trainingGroup\n        currentCareer\n        onboardingCompletedAt\n        licenseOnboardingCompletedAt\n        showThirdPartySiteWarning\n        badgeNotifications\n      }\n    }\n  "): (typeof documents)["\n    query GetUser {\n      getUser {\n        id\n        firstName\n        lastName\n        phoneNumber\n        email\n        photoUrl\n        userType\n        branch\n        grade\n        occupationalCode\n        metadata\n        trainingGroup\n        currentCareer\n        onboardingCompletedAt\n        licenseOnboardingCompletedAt\n        showThirdPartySiteWarning\n        badgeNotifications\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetRecentMissionPartners {\n      getUser {\n        recentMissionPartners {\n          missionPartnerId\n          missionPartnerName\n          visitedAt\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetRecentMissionPartners {\n      getUser {\n        recentMissionPartners {\n          missionPartnerId\n          missionPartnerName\n          visitedAt\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ImportBulkUsers(\n      $bulkUploadFile: Upload!\n      $missionPartnerId: ID\n      $groupId: ID\n    ) {\n      importBulkUsers(\n        file: $bulkUploadFile\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "): (typeof documents)["\n    mutation ImportBulkUsers(\n      $bulkUploadFile: Upload!\n      $missionPartnerId: ID\n      $groupId: ID\n    ) {\n      importBulkUsers(\n        file: $bulkUploadFile\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ImportSingleUser(\n      $firstName: String!\n      $lastName: String!\n      $email: String!\n      $missionPartnerId: ID\n      $groupId: ID\n    ) {\n      importSingleUser(\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    mutation ImportSingleUser(\n      $firstName: String!\n      $lastName: String!\n      $email: String!\n      $missionPartnerId: ID\n      $groupId: ID\n    ) {\n      importSingleUser(\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        missionPartnerId: $missionPartnerId\n        groupId: $groupId\n      ) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeGroupMemberships(\n      $groupId: ID!\n      $userIds: [ID!]!\n      $missionPartnerId: ID!\n    ) {\n      removeGroupMemberships(\n        groupId: $groupId\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "): (typeof documents)["\n    mutation removeGroupMemberships(\n      $groupId: ID!\n      $userIds: [ID!]!\n      $missionPartnerId: ID!\n    ) {\n      removeGroupMemberships(\n        groupId: $groupId\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeMissionPartnerMemberships(\n      $userIds: [ID!]!\n      $missionPartnerId: ID!\n    ) {\n      removeMissionPartnerMemberships(\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "): (typeof documents)["\n    mutation removeMissionPartnerMemberships(\n      $userIds: [ID!]!\n      $missionPartnerId: ID!\n    ) {\n      removeMissionPartnerMemberships(\n        userIds: $userIds\n        missionPartnerId: $missionPartnerId\n      )\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation ToggleAllowContractorAccess($userId: ID!, $allow: Boolean) {\n      toggleAllowContractorAccess(userId: $userId, allow: $allow) {\n        id\n        canAccessFullDu\n      }\n    }\n  "): (typeof documents)["\n    mutation ToggleAllowContractorAccess($userId: ID!, $allow: Boolean) {\n      toggleAllowContractorAccess(userId: $userId, allow: $allow) {\n        id\n        canAccessFullDu\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AddTrainingPlansToUser(\n      $userId: ID!\n      $plans: [AddPlansInput]!\n      $missionPartnerId: ID!\n    ) {\n      addTrainingPlansToUser(\n        userId: $userId\n        plans: $plans\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        userId\n        planType\n        planSourceId\n      }\n    }\n  "): (typeof documents)["\n    mutation AddTrainingPlansToUser(\n      $userId: ID!\n      $plans: [AddPlansInput]!\n      $missionPartnerId: ID!\n    ) {\n      addTrainingPlansToUser(\n        userId: $userId\n        plans: $plans\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        userId\n        planType\n        planSourceId\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountActiveUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countActiveUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  "): (typeof documents)["\n    query CountActiveUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countActiveUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountOnboardedUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countOnboardedUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  "): (typeof documents)["\n    query CountOnboardedUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countOnboardedUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  "): (typeof documents)["\n    query CountUsersByMissionPartnerId($missionPartnerId: ID!) {\n      countUsersByMissionPartnerId(missionPartnerId: $missionPartnerId)\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindFieldCommands {\n      findFieldCommands {\n        title\n      }\n    }\n  "): (typeof documents)["\n    query FindFieldCommands {\n      findFieldCommands {\n        title\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findOrganizations {\n      findOrganizations {\n        title\n      }\n    }\n  "): (typeof documents)["\n    query findOrganizations {\n      findOrganizations {\n        title\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindSpaceDeltas {\n      findSpaceDeltas {\n        title\n      }\n    }\n  "): (typeof documents)["\n    query FindSpaceDeltas {\n      findSpaceDeltas {\n        title\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findSquadrons {\n      findSquadrons {\n        title\n      }\n    }\n  "): (typeof documents)["\n    query findSquadrons {\n      findSquadrons {\n        title\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findUserById($userId: ID!) {\n      findUserById(id: $userId) {\n        id\n        firstName\n        lastName\n        email\n        userType\n        branch\n        grade\n        metadata\n        testRecord\n        canAccessFullDu\n        occupationalCode\n        groupMemberships {\n          groupName\n          userId\n          groupId\n        }\n        photoUrl\n        metadata\n        lastLoginAt\n        keycloakUserCreatedAt\n        totalTimeTrained\n        skills\n      }\n    }\n  "): (typeof documents)["\n    query findUserById($userId: ID!) {\n      findUserById(id: $userId) {\n        id\n        firstName\n        lastName\n        email\n        userType\n        branch\n        grade\n        metadata\n        testRecord\n        canAccessFullDu\n        occupationalCode\n        groupMemberships {\n          groupName\n          userId\n          groupId\n        }\n        photoUrl\n        metadata\n        lastLoginAt\n        keycloakUserCreatedAt\n        totalTimeTrained\n        skills\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserMissionPartnerTrialStatus {\n      getUserMissionPartnerTrialStatus {\n        hasExpiredTrial\n        missionPartner {\n          id\n          name\n          trialStartDate\n          trialEndDate\n          trialEnabled\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetUserMissionPartnerTrialStatus {\n      getUserMissionPartnerTrialStatus {\n        hasExpiredTrial\n        missionPartner {\n          id\n          name\n          trialStartDate\n          trialEndDate\n          trialEnabled\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeUsersFromMissionPartner(\n      $file: Upload!\n      $missionPartnerId: ID!\n    ) {\n      removeUsersFromMissionPartner(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "): (typeof documents)["\n    mutation removeUsersFromMissionPartner(\n      $file: Upload!\n      $missionPartnerId: ID!\n    ) {\n      removeUsersFromMissionPartner(\n        file: $file\n        missionPartnerId: $missionPartnerId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation revokeVendorLicensesForUsers(\n      $file: Upload!\n      $missionPartnerId: ID!\n      $vendorId: ID!\n    ) {\n      revokeVendorLicensesForUsers(\n        file: $file\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "): (typeof documents)["\n    mutation revokeVendorLicensesForUsers(\n      $file: Upload!\n      $missionPartnerId: ID!\n      $vendorId: ID!\n    ) {\n      revokeVendorLicensesForUsers(\n        file: $file\n        missionPartnerId: $missionPartnerId\n        vendorId: $vendorId\n      ) {\n        id\n        status\n        error\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query countAllVendors {\n      countAllVendors\n    }\n  "): (typeof documents)["\n    query countAllVendors {\n      countAllVendors\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query countUniqueItemsAndVendorsBySource($source: String!) {\n      countUniqueItemsAndVendorsBySource(source: $source) {\n        items\n        vendors\n      }\n    }\n  "): (typeof documents)["\n    query countUniqueItemsAndVendorsBySource($source: String!) {\n      countUniqueItemsAndVendorsBySource(source: $source) {\n        items\n        vendors\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateVendor($input: CreateVendorInput!) {\n      createVendor(input: $input) {\n        id\n        name\n        isLicensed\n      }\n    }\n  "): (typeof documents)["\n    mutation CreateVendor($input: CreateVendorInput!) {\n      createVendor(input: $input) {\n        id\n        name\n        isLicensed\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindAllVendors {\n      findAllVendors {\n        id\n        name\n        provisioned\n        assigned\n        isLicensed\n      }\n    }\n  "): (typeof documents)["\n    query FindAllVendors {\n      findAllVendors {\n        id\n        name\n        provisioned\n        assigned\n        isLicensed\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FindLicensedVendors {\n      findLicensedVendors {\n        id\n        name\n        provisioned\n        assigned\n        isLicensed\n      }\n    }\n  "): (typeof documents)["\n    query FindLicensedVendors {\n      findLicensedVendors {\n        id\n        name\n        provisioned\n        assigned\n        isLicensed\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findVendorById($id: ID!) {\n      findVendorById(id: $id) {\n        id\n        name\n        provisioned\n        assigned\n      }\n    }\n  "): (typeof documents)["\n    query findVendorById($id: ID!) {\n      findVendorById(id: $id) {\n        id\n        name\n        provisioned\n        assigned\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateVendor($input: UpdateVendorInput!) {\n      updateVendor(input: $input) {\n        id\n        name\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateVendor($input: UpdateVendorInput!) {\n      updateVendor(input: $input) {\n        id\n        name\n      }\n    }\n  "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;